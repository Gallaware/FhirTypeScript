import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_NAME, REGEX_TIMINGDATE, REGEX_TIMINGDATETIME } from '../FhirTsLibValidation/FhirRegex';
import { DataRequirement, Element, Expression, Extension, Reference, Timing } from './FhirType';
import { TriggerDefinitionType_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A description of a triggering event. Triggering events can be named events, data events, or
 * periodic, as determined by the type element.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/TriggerDefinition
 */
export class TriggerDefinition {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * The type of triggering event.
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things
   * are planned, expected or requested to occur. The most common usage is in dosage instructions for
   * medications. They are also used when planning care of various kinds, and may be used for reporting
   * the schedule to which past regular activities were carried out.
   */
  @Type(() => Timing)
   timingTiming?: Timing;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   timingReference?: Reference;

  /**
   * The timing of the event (if this is a periodic trigger).
   * Field access restricted because there are specific valid values.
   */
  protected timingDate?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _timingDate?: Element;

  /**
   * The timing of the event (if this is a periodic trigger).
   * Field access restricted because there are specific valid values.
   */
  protected timingDateTime?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _timingDateTime?: Element;

  /**
   * The triggering data of the event (if this is a data trigger). If more than one data is requirement
   * is specified, then all the data requirements must be true.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => DataRequirement)
  protected data?: DataRequirement[];

  /**
   * A expression that is evaluated in a specified context and returns a value. The context of use of
   * the expression must specify the context in which the expression is evaluated, and how the result
   * of the expression is used.
   */
  @Type(() => Expression)
   condition?: Expression;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    const idx = getValidValueIdx(TriggerDefinitionType_list_ValidValues, newValue);
    if (idx >= 0) {
      this.type = TriggerDefinitionType_list_ValidValues[idx];
    } else {
      throw new Error("Unknown type of " + newValue);
    }
  }
  
  public getTriggerDefinitionTypeValidValues(): string[] {
    return TriggerDefinitionType_list_ValidValues;
  }
  

  public getType(): string | undefined {
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME.source;
  }
  

  public getName(): string | undefined {
      return this.name;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTimingDate(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.timingDate) !== 'undefined') {
         delete this.timingDate;
      }
      return;
    }
    
    if (REGEX_TIMINGDATE.test(newValue)) {
      this.timingDate = newValue
    } else {
      throw new Error("Invalid value pattern for timingDate of " + newValue);
    }
  }
  
  public getTimingDatePattern(): string {
    return REGEX_TIMINGDATE.source;
  }
  

  public getTimingDate(): string | undefined {
      return this.timingDate;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTimingDateTime(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.timingDateTime) !== 'undefined') {
         delete this.timingDateTime;
      }
      return;
    }
    
    if (REGEX_TIMINGDATETIME.test(newValue)) {
      this.timingDateTime = newValue
    } else {
      throw new Error("Invalid value pattern for timingDateTime of " + newValue);
    }
  }
  
  public getTimingDateTimePattern(): string {
    return REGEX_TIMINGDATETIME.source;
  }
  

  public getTimingDateTime(): string | undefined {
      return this.timingDateTime;
  }

  public addData(newValue: DataRequirement) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.data) !== 'undefined') {
         delete this.data;
      }
      return;
    }
    
    if (typeof(this.data) === 'undefined') {
      this.data =  [];
    }
    this.data.push(newValue);
  }

  public getData(): DataRequirement[] | undefined {
      return this.data;
  }


}


