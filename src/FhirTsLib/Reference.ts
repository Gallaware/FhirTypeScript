import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_REFERENCE, REGEX_DISPLAY } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, Identifier } from './index';
import { ResourceType_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A reference from one resource to another.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Reference
 */
export class Reference {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected reference?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _reference?: Element;

  /**
   * The expected type of the target of the reference. If both Reference.type and Reference.reference
   * are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
   * 
   * The type is the Canonical URL of Resource Definition that is the type this reference refers to.
   * References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient"
   * is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed
   * for logical models (and can only be used in references in logical models, not resources).
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for
   * business identifiers.
   */
  @Type(() => Identifier)
   identifier?: Identifier;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected display?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _display?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setReference(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.reference) !== 'undefined') {
         delete this.reference;
      }
      return;
    }
    
    if (REGEX_REFERENCE.test(newValue)) {
      this.reference = newValue
    } else {
      throw new Error("Invalid value pattern for reference of " + newValue);
    }
  }
  
  public getReferencePattern(): string {
    return REGEX_REFERENCE.source;
  }
  
  /**
  * Gets the current value of field reference.
  * @returns the value  or undefined
  */
  public getReference(): string | undefined {
      return this.reference;
  }

  /**
  * Gets the current value of field reference if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getReferenceOrElse(defaultValue: string): string {
      if (this.reference == undefined || this.reference == null ) { return defaultValue; }
      return this.reference;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    const idx = getValidValueIdx(ResourceType_list_ValidValues, newValue);
    if (idx >= 0) {
      this.type = ResourceType_list_ValidValues[idx];
    } else {
      throw new Error("Unknown type of " + newValue);
    }
  }
  
  public getReferenceTypeValidValues(): string[] {
    return ResourceType_list_ValidValues;
  }
  
  /**
  * Gets the current value of field type.
  * @returns the value  or undefined
  */
  public getType(): string | undefined {
      return this.type;
  }

  /**
  * Gets the current value of field type if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getTypeOrElse(defaultValue: string): string {
      if (this.type == undefined || this.type == null ) { return defaultValue; }
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDisplay(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.display) !== 'undefined') {
         delete this.display;
      }
      return;
    }
    
    if (REGEX_DISPLAY.test(newValue)) {
      this.display = newValue
    } else {
      throw new Error("Invalid value pattern for display of " + newValue);
    }
  }
  
  public getDisplayPattern(): string {
    return REGEX_DISPLAY.source;
  }
  
  /**
  * Gets the current value of field display.
  * @returns the value  or undefined
  */
  public getDisplay(): string | undefined {
      return this.display;
  }

  /**
  * Gets the current value of field display if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDisplayOrElse(defaultValue: string): string {
      if (this.display == undefined || this.display == null ) { return defaultValue; }
      return this.display;
  }


}


