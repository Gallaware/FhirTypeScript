import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Duration, Extension, Quantity } from './index';



/**
 * Information about a medication that is used to support knowledge.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/MedicationKnowledge_Kinetics
 */
export class MedicationKnowledgeKinetics {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * The drug concentration measured at certain discrete points in time.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Quantity)
  protected areaUnderCurve?: Quantity[];

  /**
   * The median lethal dose of a drug.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Quantity)
  protected lethalDose50?: Quantity[];

  /**
   * A length of time.
   */
  @Type(() => Duration)
   halfLifePeriod?: Duration;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  public addAreaUnderCurve(newValue: Quantity) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.areaUnderCurve) !== 'undefined') {
         delete this.areaUnderCurve;
      }
      return;
    }
    
    if (typeof(this.areaUnderCurve) === 'undefined') {
      this.areaUnderCurve =  [];
    }
    this.areaUnderCurve.push(newValue);
  }
  /**
  * Removes all elements from the array areaUnderCurve, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteAreaUnderCurveAll(): Quantity[] {
    if (typeof(this.areaUnderCurve) !== 'undefined') {
       const oldArray = this.areaUnderCurve;
       delete this.areaUnderCurve;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array areaUnderCurve, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteAreaUnderCurveBySplice(start: number, deleteCount?: number): Quantity[] {
    if (typeof(this.areaUnderCurve) !== 'undefined') {
       return this.areaUnderCurve.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field areaUnderCurve.
  * @returns the value  or undefined
  */
  public getAreaUnderCurve(): Quantity[] | undefined {
      return this.areaUnderCurve;
  }

  /**
  * Gets the current value of field areaUnderCurve if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getAreaUnderCurveOrElse(defaultValue: Quantity[]): Quantity[] {
      if (this.areaUnderCurve == undefined || this.areaUnderCurve == null ) { return defaultValue; }
      return this.areaUnderCurve;
  }

  public addLethalDose50(newValue: Quantity) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.lethalDose50) !== 'undefined') {
         delete this.lethalDose50;
      }
      return;
    }
    
    if (typeof(this.lethalDose50) === 'undefined') {
      this.lethalDose50 =  [];
    }
    this.lethalDose50.push(newValue);
  }
  /**
  * Removes all elements from the array lethalDose50, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteLethalDose50All(): Quantity[] {
    if (typeof(this.lethalDose50) !== 'undefined') {
       const oldArray = this.lethalDose50;
       delete this.lethalDose50;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array lethalDose50, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteLethalDose50BySplice(start: number, deleteCount?: number): Quantity[] {
    if (typeof(this.lethalDose50) !== 'undefined') {
       return this.lethalDose50.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field lethalDose50.
  * @returns the value  or undefined
  */
  public getLethalDose50(): Quantity[] | undefined {
      return this.lethalDose50;
  }

  /**
  * Gets the current value of field lethalDose50 if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getLethalDose50OrElse(defaultValue: Quantity[]): Quantity[] {
      if (this.lethalDose50 == undefined || this.lethalDose50 == null ) { return defaultValue; }
      return this.lethalDose50;
  }


}


