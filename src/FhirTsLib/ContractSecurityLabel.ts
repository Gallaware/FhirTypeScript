import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Coding, Element, Extension } from './index';



/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or
 * agreement.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Contract_SecurityLabel
 */
export class ContractSecurityLabel {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Number used to link this term or term element to the applicable Security Label.
   * Field access restricted because there are specific valid values.
   */
  protected number?: number[];

  /**
   * Extensions for number
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _number?: Element[];

  /**
   * A reference to a code defined by a terminology system.
   */
  @Type(() => Coding)
   classification?: Coding;

  /**
   * Security label privacy tag that species the applicable privacy and security policies governing this
   * term and/or term elements.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Coding)
  protected category?: Coding[];

  /**
   * Security label privacy tag that species the manner in which term and/or term elements are to be
   * protected.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Coding)
  protected control?: Coding[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  public addNumber(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.number) !== 'undefined') {
         delete this.number;
      }
      return;
    }
    
    if (typeof(this.number) === 'undefined') {
      this.number =  [];
    }
    this.number.push(newValue);
  }
  /**
  * Removes all elements from the array number, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNumberAll(): number[] {
    if (typeof(this.number) !== 'undefined') {
       const oldArray = this.number;
       delete this.number;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array number, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNumberBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.number) !== 'undefined') {
       return this.number.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field number.
  * @returns the value  or undefined
  */
  public getNumber(): number[] | undefined {
      return this.number;
  }

  /**
  * Gets the current value of field number if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getNumberOrElse(defaultValue: number[]): number[] {
      if (this.number == undefined || this.number == null ) { return defaultValue; }
      return this.number;
  }

  public add_number(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._number) !== 'undefined') {
         delete this._number;
      }
      return;
    }
    
    if (typeof(this._number) === 'undefined') {
      this._number =  [];
    }
    this._number.push(newValue);
  }
  /**
  * Removes all elements from the array _number, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_numberAll(): Element[] {
    if (typeof(this._number) !== 'undefined') {
       const oldArray = this._number;
       delete this._number;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _number, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_numberBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._number) !== 'undefined') {
       return this._number.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _number.
  * @returns the value  or undefined
  */
  public get_number(): Element[] | undefined {
      return this._number;
  }

  /**
  * Gets the current value of field _number if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_numberOrElse(defaultValue: Element[]): Element[] {
      if (this._number == undefined || this._number == null ) { return defaultValue; }
      return this._number;
  }

  public addCategory(newValue: Coding) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.category) !== 'undefined') {
         delete this.category;
      }
      return;
    }
    
    if (typeof(this.category) === 'undefined') {
      this.category =  [];
    }
    this.category.push(newValue);
  }
  /**
  * Removes all elements from the array category, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCategoryAll(): Coding[] {
    if (typeof(this.category) !== 'undefined') {
       const oldArray = this.category;
       delete this.category;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array category, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCategoryBySplice(start: number, deleteCount?: number): Coding[] {
    if (typeof(this.category) !== 'undefined') {
       return this.category.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field category.
  * @returns the value  or undefined
  */
  public getCategory(): Coding[] | undefined {
      return this.category;
  }

  /**
  * Gets the current value of field category if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getCategoryOrElse(defaultValue: Coding[]): Coding[] {
      if (this.category == undefined || this.category == null ) { return defaultValue; }
      return this.category;
  }

  public addControl(newValue: Coding) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.control) !== 'undefined') {
         delete this.control;
      }
      return;
    }
    
    if (typeof(this.control) === 'undefined') {
      this.control =  [];
    }
    this.control.push(newValue);
  }
  /**
  * Removes all elements from the array control, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteControlAll(): Coding[] {
    if (typeof(this.control) !== 'undefined') {
       const oldArray = this.control;
       delete this.control;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array control, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteControlBySplice(start: number, deleteCount?: number): Coding[] {
    if (typeof(this.control) !== 'undefined') {
       return this.control.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field control.
  * @returns the value  or undefined
  */
  public getControl(): Coding[] | undefined {
      return this.control;
  }

  /**
  * Gets the current value of field control if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getControlOrElse(defaultValue: Coding[]): Coding[] {
      if (this.control == undefined || this.control == null ) { return defaultValue; }
      return this.control;
  }


}


