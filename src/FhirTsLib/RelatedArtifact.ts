import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_LABEL, REGEX_DISPLAY, REGEX_CITATION, REGEX_URL, REGEX_RESOURCE } from '../FhirTsLibValidation/FhirRegex';
import { Attachment, Element, Extension } from './FhirType';
import { RelatedArtifactType_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/RelatedArtifact
 */
export class RelatedArtifact {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * The type of relationship to the related artifact.
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected label?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _label?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected display?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _display?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected citation?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _citation?: Element;

  /**
   * A URI that is a literal reference
   * Field access restricted because there are specific valid values.
   */
  protected url?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _url?: Element;

  /**
   * For referring to data content defined in other formats.
   */
  @Type(() => Attachment)
   document?: Attachment;

  /**
   * A URI that is a reference to a canonical URL on a FHIR resource
   * Field access restricted because there are specific valid values.
   */
  protected resource?: string;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    const idx = getValidValueIdx(RelatedArtifactType_list_ValidValues, newValue);
    if (idx >= 0) {
      this.type = RelatedArtifactType_list_ValidValues[idx];
    } else {
      throw new Error("Unknown type of " + newValue);
    }
  }
  
  public getRelatedArtifactTypeValidValues(): string[] {
    return RelatedArtifactType_list_ValidValues;
  }
  

  public getType(): string | undefined {
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLabel(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.label) !== 'undefined') {
         delete this.label;
      }
      return;
    }
    
    if (REGEX_LABEL.test(newValue)) {
      this.label = newValue
    } else {
      throw new Error("Invalid value pattern for label of " + newValue);
    }
  }
  
  public getLabelPattern(): string {
    return REGEX_LABEL.source;
  }
  

  public getLabel(): string | undefined {
      return this.label;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDisplay(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.display) !== 'undefined') {
         delete this.display;
      }
      return;
    }
    
    if (REGEX_DISPLAY.test(newValue)) {
      this.display = newValue
    } else {
      throw new Error("Invalid value pattern for display of " + newValue);
    }
  }
  
  public getDisplayPattern(): string {
    return REGEX_DISPLAY.source;
  }
  

  public getDisplay(): string | undefined {
      return this.display;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCitation(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.citation) !== 'undefined') {
         delete this.citation;
      }
      return;
    }
    
    if (REGEX_CITATION.test(newValue)) {
      this.citation = newValue
    } else {
      throw new Error("Invalid value pattern for citation of " + newValue);
    }
  }
  
  public getCitationPattern(): string {
    return REGEX_CITATION.source;
  }
  

  public getCitation(): string | undefined {
      return this.citation;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setUrl(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.url) !== 'undefined') {
         delete this.url;
      }
      return;
    }
    
    if (REGEX_URL.test(newValue)) {
      this.url = newValue
    } else {
      throw new Error("Invalid value pattern for url of " + newValue);
    }
  }
  
  public getUrlPattern(): string {
    return REGEX_URL.source;
  }
  

  public getUrl(): string | undefined {
      return this.url;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setResource(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.resource) !== 'undefined') {
         delete this.resource;
      }
      return;
    }
    
    if (REGEX_RESOURCE.test(newValue)) {
      this.resource = newValue
    } else {
      throw new Error("Invalid value pattern for resource of " + newValue);
    }
  }
  
  public getResourcePattern(): string {
    return REGEX_RESOURCE.source;
  }
  

  public getResource(): string | undefined {
      return this.resource;
  }


}


