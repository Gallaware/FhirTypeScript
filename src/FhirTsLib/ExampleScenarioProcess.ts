import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_TITLE, REGEX_DESCRIPTION, REGEX_PRECONDITIONS, REGEX_POSTCONDITIONS } from '../FhirTsLibValidation/FhirRegex';
import { Element, ExampleScenarioStep, Extension } from './FhirType';



/**
 * Example of workflow instance.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ExampleScenario_Process
 */
export class ExampleScenarioProcess {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected title?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _title?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected preConditions?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _preConditions?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected postConditions?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _postConditions?: Element;

  /**
   * Each step of the process.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ExampleScenarioStep)
  protected step?: ExampleScenarioStep[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTitle(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.title) !== 'undefined') {
         delete this.title;
      }
      return;
    }
    
    if (REGEX_TITLE.test(newValue)) {
      this.title = newValue
    } else {
      throw new Error("Invalid value pattern for title of " + newValue);
    }
  }
  
  public getTitlePattern(): string {
    return REGEX_TITLE.source;
  }
  

  public getTitle(): string | undefined {
      return this.title;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPreConditions(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.preConditions) !== 'undefined') {
         delete this.preConditions;
      }
      return;
    }
    
    if (REGEX_PRECONDITIONS.test(newValue)) {
      this.preConditions = newValue
    } else {
      throw new Error("Invalid value pattern for preConditions of " + newValue);
    }
  }
  
  public getPreConditionsPattern(): string {
    return REGEX_PRECONDITIONS.source;
  }
  

  public getPreConditions(): string | undefined {
      return this.preConditions;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPostConditions(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.postConditions) !== 'undefined') {
         delete this.postConditions;
      }
      return;
    }
    
    if (REGEX_POSTCONDITIONS.test(newValue)) {
      this.postConditions = newValue
    } else {
      throw new Error("Invalid value pattern for postConditions of " + newValue);
    }
  }
  
  public getPostConditionsPattern(): string {
    return REGEX_POSTCONDITIONS.source;
  }
  

  public getPostConditions(): string | undefined {
      return this.postConditions;
  }

  public addStep(newValue: ExampleScenarioStep) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.step) !== 'undefined') {
         delete this.step;
      }
      return;
    }
    
    if (typeof(this.step) === 'undefined') {
      this.step =  [];
    }
    this.step.push(newValue);
  }

  public getStep(): ExampleScenarioStep[] | undefined {
      return this.step;
  }


}


