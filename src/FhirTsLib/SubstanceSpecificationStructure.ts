import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_MOLECULARFORMULA, REGEX_MOLECULARFORMULABYMOIETY } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Element, Extension, Reference, SubstanceSpecificationIsotope, SubstanceSpecificationMolecularWeight, SubstanceSpecificationRepresentation } from './FhirType';



/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/SubstanceSpecification_Structure
 */
export class SubstanceSpecificationStructure {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   stereochemistry?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   opticalActivity?: CodeableConcept;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected molecularFormula?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _molecularFormula?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected molecularFormulaByMoiety?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _molecularFormulaByMoiety?: Element;

  /**
   * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => SubstanceSpecificationIsotope)
  protected isotope?: SubstanceSpecificationIsotope[];

  /**
   * The detailed description of a substance, typically at a level beyond what is used for prescribing.
   */
  @Type(() => SubstanceSpecificationMolecularWeight)
   molecularWeight?: SubstanceSpecificationMolecularWeight;

  /**
   * Supporting literature.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected source?: Reference[];

  /**
   * Molecular structural representation.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => SubstanceSpecificationRepresentation)
  protected representation?: SubstanceSpecificationRepresentation[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setMolecularFormula(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.molecularFormula) !== 'undefined') {
         delete this.molecularFormula;
      }
      return;
    }
    
    if (REGEX_MOLECULARFORMULA.test(newValue)) {
      this.molecularFormula = newValue
    } else {
      throw new Error("Invalid value pattern for molecularFormula of " + newValue);
    }
  }
  
  public getMolecularFormulaPattern(): string {
    return REGEX_MOLECULARFORMULA.source;
  }
  

  public getMolecularFormula(): string | undefined {
      return this.molecularFormula;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setMolecularFormulaByMoiety(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.molecularFormulaByMoiety) !== 'undefined') {
         delete this.molecularFormulaByMoiety;
      }
      return;
    }
    
    if (REGEX_MOLECULARFORMULABYMOIETY.test(newValue)) {
      this.molecularFormulaByMoiety = newValue
    } else {
      throw new Error("Invalid value pattern for molecularFormulaByMoiety of " + newValue);
    }
  }
  
  public getMolecularFormulaByMoietyPattern(): string {
    return REGEX_MOLECULARFORMULABYMOIETY.source;
  }
  

  public getMolecularFormulaByMoiety(): string | undefined {
      return this.molecularFormulaByMoiety;
  }

  public addIsotope(newValue: SubstanceSpecificationIsotope) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.isotope) !== 'undefined') {
         delete this.isotope;
      }
      return;
    }
    
    if (typeof(this.isotope) === 'undefined') {
      this.isotope =  [];
    }
    this.isotope.push(newValue);
  }

  public getIsotope(): SubstanceSpecificationIsotope[] | undefined {
      return this.isotope;
  }

  public addSource(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.source) !== 'undefined') {
         delete this.source;
      }
      return;
    }
    
    if (typeof(this.source) === 'undefined') {
      this.source =  [];
    }
    this.source.push(newValue);
  }

  public getSource(): Reference[] | undefined {
      return this.source;
  }

  public addRepresentation(newValue: SubstanceSpecificationRepresentation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.representation) !== 'undefined') {
         delete this.representation;
      }
      return;
    }
    
    if (typeof(this.representation) === 'undefined') {
      this.representation =  [];
    }
    this.representation.push(newValue);
  }

  public getRepresentation(): SubstanceSpecificationRepresentation[] | undefined {
      return this.representation;
  }


}


