import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_CODE, REGEX_DISPLAY, REGEX_DEFINITION } from '../FhirTsLibValidation/FhirRegex';
import { CodeSystemDesignation, CodeSystemProperty1, Element, Extension } from './index';



/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code
 * system supplement and its key properties, and optionally define a part or all of its content.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/CodeSystem_Concept
 */
export class CodeSystemConcept {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected code?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _code?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected display?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _display?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected definition?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _definition?: Element;

  /**
   * Additional representations for the concept - other languages, aliases, specialized purposes, used
   * for particular purposes, etc.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeSystemDesignation)
  protected designation?: CodeSystemDesignation[];

  /**
   * A property value for this concept.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeSystemProperty1)
  protected property?: CodeSystemProperty1[];

  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships
   * is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeSystemConcept)
  protected concept?: CodeSystemConcept[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCode(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.code) !== 'undefined') {
         delete this.code;
      }
      return;
    }
    
    if (REGEX_CODE.test(newValue)) {
      this.code = newValue
    } else {
      throw new Error("Invalid value pattern for code of " + newValue);
    }
  }
  
  public getCodePattern(): string {
    return REGEX_CODE.source;
  }
  
  /**
  * Gets the current value of field code.
  * @returns the value  or undefined
  */
  public getCode(): string | undefined {
      return this.code;
  }

  /**
  * Gets the current value of field code if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getCodeOrElse(defaultValue: string): string {
      if (this.code == undefined || this.code == null ) { return defaultValue; }
      return this.code;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDisplay(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.display) !== 'undefined') {
         delete this.display;
      }
      return;
    }
    
    if (REGEX_DISPLAY.test(newValue)) {
      this.display = newValue
    } else {
      throw new Error("Invalid value pattern for display of " + newValue);
    }
  }
  
  public getDisplayPattern(): string {
    return REGEX_DISPLAY.source;
  }
  
  /**
  * Gets the current value of field display.
  * @returns the value  or undefined
  */
  public getDisplay(): string | undefined {
      return this.display;
  }

  /**
  * Gets the current value of field display if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDisplayOrElse(defaultValue: string): string {
      if (this.display == undefined || this.display == null ) { return defaultValue; }
      return this.display;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDefinition(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.definition) !== 'undefined') {
         delete this.definition;
      }
      return;
    }
    
    if (REGEX_DEFINITION.test(newValue)) {
      this.definition = newValue
    } else {
      throw new Error("Invalid value pattern for definition of " + newValue);
    }
  }
  
  public getDefinitionPattern(): string {
    return REGEX_DEFINITION.source;
  }
  
  /**
  * Gets the current value of field definition.
  * @returns the value  or undefined
  */
  public getDefinition(): string | undefined {
      return this.definition;
  }

  /**
  * Gets the current value of field definition if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDefinitionOrElse(defaultValue: string): string {
      if (this.definition == undefined || this.definition == null ) { return defaultValue; }
      return this.definition;
  }

  public addDesignation(newValue: CodeSystemDesignation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.designation) !== 'undefined') {
         delete this.designation;
      }
      return;
    }
    
    if (typeof(this.designation) === 'undefined') {
      this.designation =  [];
    }
    this.designation.push(newValue);
  }
  /**
  * Removes all elements from the array designation, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDesignationAll(): CodeSystemDesignation[] {
    if (typeof(this.designation) !== 'undefined') {
       const oldArray = this.designation;
       delete this.designation;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array designation, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDesignationBySplice(start: number, deleteCount?: number): CodeSystemDesignation[] {
    if (typeof(this.designation) !== 'undefined') {
       return this.designation.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field designation.
  * @returns the value  or undefined
  */
  public getDesignation(): CodeSystemDesignation[] | undefined {
      return this.designation;
  }

  /**
  * Gets the current value of field designation if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDesignationOrElse(defaultValue: CodeSystemDesignation[]): CodeSystemDesignation[] {
      if (this.designation == undefined || this.designation == null ) { return defaultValue; }
      return this.designation;
  }

  public addProperty(newValue: CodeSystemProperty1) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.property) !== 'undefined') {
         delete this.property;
      }
      return;
    }
    
    if (typeof(this.property) === 'undefined') {
      this.property =  [];
    }
    this.property.push(newValue);
  }
  /**
  * Removes all elements from the array property, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePropertyAll(): CodeSystemProperty1[] {
    if (typeof(this.property) !== 'undefined') {
       const oldArray = this.property;
       delete this.property;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array property, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePropertyBySplice(start: number, deleteCount?: number): CodeSystemProperty1[] {
    if (typeof(this.property) !== 'undefined') {
       return this.property.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field property.
  * @returns the value  or undefined
  */
  public getProperty(): CodeSystemProperty1[] | undefined {
      return this.property;
  }

  /**
  * Gets the current value of field property if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getPropertyOrElse(defaultValue: CodeSystemProperty1[]): CodeSystemProperty1[] {
      if (this.property == undefined || this.property == null ) { return defaultValue; }
      return this.property;
  }

  public addConcept(newValue: CodeSystemConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.concept) !== 'undefined') {
         delete this.concept;
      }
      return;
    }
    
    if (typeof(this.concept) === 'undefined') {
      this.concept =  [];
    }
    this.concept.push(newValue);
  }
  /**
  * Removes all elements from the array concept, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteConceptAll(): CodeSystemConcept[] {
    if (typeof(this.concept) !== 'undefined') {
       const oldArray = this.concept;
       delete this.concept;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array concept, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteConceptBySplice(start: number, deleteCount?: number): CodeSystemConcept[] {
    if (typeof(this.concept) !== 'undefined') {
       return this.concept.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field concept.
  * @returns the value  or undefined
  */
  public getConcept(): CodeSystemConcept[] | undefined {
      return this.concept;
  }

  /**
  * Gets the current value of field concept if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getConceptOrElse(defaultValue: CodeSystemConcept[]): CodeSystemConcept[] {
      if (this.concept == undefined || this.concept == null ) { return defaultValue; }
      return this.concept;
  }


}


