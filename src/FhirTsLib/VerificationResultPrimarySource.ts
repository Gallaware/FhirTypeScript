import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_VALIDATIONDATE } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Element, Extension, Reference } from './index';



/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/VerificationResult_PrimarySource
 */
export class VerificationResultPrimarySource {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   who?: Reference;

  /**
   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service;
   * Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected type?: CodeableConcept[];

  /**
   * Method for communicating with the primary source (manual; API; Push).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected communicationMethod?: CodeableConcept[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   validationStatus?: CodeableConcept;

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected validationDate?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _validationDate?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   canPushUpdates?: CodeableConcept;

  /**
   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as
   * defined by source).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected pushTypeAvailable?: CodeableConcept[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addType(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    if (typeof(this.type) === 'undefined') {
      this.type =  [];
    }
    this.type.push(newValue);
  }
  /**
  * Removes all elements from the array type, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTypeAll(): CodeableConcept[] {
    if (typeof(this.type) !== 'undefined') {
       const oldArray = this.type;
       delete this.type;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array type, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTypeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.type) !== 'undefined') {
       return this.type.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field type.
  * @returns the value  or undefined
  */
  public getType(): CodeableConcept[] | undefined {
      return this.type;
  }

  public addCommunicationMethod(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.communicationMethod) !== 'undefined') {
         delete this.communicationMethod;
      }
      return;
    }
    
    if (typeof(this.communicationMethod) === 'undefined') {
      this.communicationMethod =  [];
    }
    this.communicationMethod.push(newValue);
  }
  /**
  * Removes all elements from the array communicationMethod, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCommunicationMethodAll(): CodeableConcept[] {
    if (typeof(this.communicationMethod) !== 'undefined') {
       const oldArray = this.communicationMethod;
       delete this.communicationMethod;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array communicationMethod, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCommunicationMethodBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.communicationMethod) !== 'undefined') {
       return this.communicationMethod.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field communicationMethod.
  * @returns the value  or undefined
  */
  public getCommunicationMethod(): CodeableConcept[] | undefined {
      return this.communicationMethod;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setValidationDate(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.validationDate) !== 'undefined') {
         delete this.validationDate;
      }
      return;
    }
    
    if (REGEX_VALIDATIONDATE.test(newValue)) {
      this.validationDate = newValue
    } else {
      throw new Error("Invalid value pattern for validationDate of " + newValue);
    }
  }
  
  public getValidationDatePattern(): string {
    return REGEX_VALIDATIONDATE.source;
  }
  
  /**
  * Gets the current value of field validationDate.
  * @returns the value  or undefined
  */
  public getValidationDate(): string | undefined {
      return this.validationDate;
  }

  public addPushTypeAvailable(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.pushTypeAvailable) !== 'undefined') {
         delete this.pushTypeAvailable;
      }
      return;
    }
    
    if (typeof(this.pushTypeAvailable) === 'undefined') {
      this.pushTypeAvailable =  [];
    }
    this.pushTypeAvailable.push(newValue);
  }
  /**
  * Removes all elements from the array pushTypeAvailable, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePushTypeAvailableAll(): CodeableConcept[] {
    if (typeof(this.pushTypeAvailable) !== 'undefined') {
       const oldArray = this.pushTypeAvailable;
       delete this.pushTypeAvailable;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array pushTypeAvailable, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePushTypeAvailableBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.pushTypeAvailable) !== 'undefined') {
       return this.pushTypeAvailable.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field pushTypeAvailable.
  * @returns the value  or undefined
  */
  public getPushTypeAvailable(): CodeableConcept[] | undefined {
      return this.pushTypeAvailable;
  }


}


