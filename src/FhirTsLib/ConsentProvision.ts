import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Coding, ConsentActor, ConsentData, Element, Extension, Period } from './index';
import { ConsentProvisionType_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A record of a healthcare consumerâ€™s  choices, which permits or denies identified recipient(s) or
 * recipient role(s) to perform one or more actions within a given policy context, for specific
 * purposes and periods of time.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Consent_Provision
 */
export class ConsentProvision {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule,
   * required in all nested rules.
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   period?: Period;

  /**
   * Who or what is controlled by this rule. Use group to identify a set of actors by some property they
   * share (e.g. 'admitting officers').
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ConsentActor)
  protected actor?: ConsentActor[];

  /**
   * Actions controlled by this Rule.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected action?: CodeableConcept[];

  /**
   * A security label, comprised of 0..* security label fields (Privacy tags), which define which
   * resources are controlled by this exception.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Coding)
  protected securityLabel?: Coding[];

  /**
   * The context of the activities a user is taking - why the user is accessing the data - that are
   * controlled by this rule.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Coding)
  protected purpose?: Coding[];

  /**
   * The class of information covered by this rule. The type can be a FHIR resource type, a profile on a
   * type, or a CDA document, or some other type that indicates what sort of information the consent
   * relates to.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Coding)
  protected class?: Coding[];

  /**
   * If this code is found in an instance, then the rule applies.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected code?: CodeableConcept[];

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   dataPeriod?: Period;

  /**
   * The resources controlled by this rule if specific resources are referenced.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ConsentData)
  protected data?: ConsentData[];

  /**
   * Rules which provide exceptions to the base rule or subrules.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ConsentProvision)
  protected provision?: ConsentProvision[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    const idx = getValidValueIdx(ConsentProvisionType_list_ValidValues, newValue);
    if (idx >= 0) {
      this.type = ConsentProvisionType_list_ValidValues[idx];
    } else {
      throw new Error("Unknown type of " + newValue);
    }
  }
  
  public getConsentProvisionTypeValidValues(): string[] {
    return ConsentProvisionType_list_ValidValues;
  }
  
  /**
  * Gets the current value of field type.
  * @returns the value  or undefined
  */
  public getType(): string | undefined {
      return this.type;
  }

  public addActor(newValue: ConsentActor) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.actor) !== 'undefined') {
         delete this.actor;
      }
      return;
    }
    
    if (typeof(this.actor) === 'undefined') {
      this.actor =  [];
    }
    this.actor.push(newValue);
  }
  /**
  * Removes all elements from the array actor, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteActorAll(): ConsentActor[] {
    if (typeof(this.actor) !== 'undefined') {
       const oldArray = this.actor;
       delete this.actor;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array actor, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteActorBySplice(start: number, deleteCount?: number): ConsentActor[] {
    if (typeof(this.actor) !== 'undefined') {
       return this.actor.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field actor.
  * @returns the value  or undefined
  */
  public getActor(): ConsentActor[] | undefined {
      return this.actor;
  }

  public addAction(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.action) !== 'undefined') {
         delete this.action;
      }
      return;
    }
    
    if (typeof(this.action) === 'undefined') {
      this.action =  [];
    }
    this.action.push(newValue);
  }
  /**
  * Removes all elements from the array action, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteActionAll(): CodeableConcept[] {
    if (typeof(this.action) !== 'undefined') {
       const oldArray = this.action;
       delete this.action;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array action, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteActionBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.action) !== 'undefined') {
       return this.action.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field action.
  * @returns the value  or undefined
  */
  public getAction(): CodeableConcept[] | undefined {
      return this.action;
  }

  public addSecurityLabel(newValue: Coding) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.securityLabel) !== 'undefined') {
         delete this.securityLabel;
      }
      return;
    }
    
    if (typeof(this.securityLabel) === 'undefined') {
      this.securityLabel =  [];
    }
    this.securityLabel.push(newValue);
  }
  /**
  * Removes all elements from the array securityLabel, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSecurityLabelAll(): Coding[] {
    if (typeof(this.securityLabel) !== 'undefined') {
       const oldArray = this.securityLabel;
       delete this.securityLabel;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array securityLabel, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSecurityLabelBySplice(start: number, deleteCount?: number): Coding[] {
    if (typeof(this.securityLabel) !== 'undefined') {
       return this.securityLabel.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field securityLabel.
  * @returns the value  or undefined
  */
  public getSecurityLabel(): Coding[] | undefined {
      return this.securityLabel;
  }

  public addPurpose(newValue: Coding) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.purpose) !== 'undefined') {
         delete this.purpose;
      }
      return;
    }
    
    if (typeof(this.purpose) === 'undefined') {
      this.purpose =  [];
    }
    this.purpose.push(newValue);
  }
  /**
  * Removes all elements from the array purpose, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePurposeAll(): Coding[] {
    if (typeof(this.purpose) !== 'undefined') {
       const oldArray = this.purpose;
       delete this.purpose;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array purpose, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePurposeBySplice(start: number, deleteCount?: number): Coding[] {
    if (typeof(this.purpose) !== 'undefined') {
       return this.purpose.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field purpose.
  * @returns the value  or undefined
  */
  public getPurpose(): Coding[] | undefined {
      return this.purpose;
  }

  public addClass(newValue: Coding) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.class) !== 'undefined') {
         delete this.class;
      }
      return;
    }
    
    if (typeof(this.class) === 'undefined') {
      this.class =  [];
    }
    this.class.push(newValue);
  }
  /**
  * Removes all elements from the array class, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteClassAll(): Coding[] {
    if (typeof(this.class) !== 'undefined') {
       const oldArray = this.class;
       delete this.class;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array class, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteClassBySplice(start: number, deleteCount?: number): Coding[] {
    if (typeof(this.class) !== 'undefined') {
       return this.class.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field class.
  * @returns the value  or undefined
  */
  public getClass(): Coding[] | undefined {
      return this.class;
  }

  public addCode(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.code) !== 'undefined') {
         delete this.code;
      }
      return;
    }
    
    if (typeof(this.code) === 'undefined') {
      this.code =  [];
    }
    this.code.push(newValue);
  }
  /**
  * Removes all elements from the array code, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCodeAll(): CodeableConcept[] {
    if (typeof(this.code) !== 'undefined') {
       const oldArray = this.code;
       delete this.code;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array code, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCodeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.code) !== 'undefined') {
       return this.code.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field code.
  * @returns the value  or undefined
  */
  public getCode(): CodeableConcept[] | undefined {
      return this.code;
  }

  public addData(newValue: ConsentData) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.data) !== 'undefined') {
         delete this.data;
      }
      return;
    }
    
    if (typeof(this.data) === 'undefined') {
      this.data =  [];
    }
    this.data.push(newValue);
  }
  /**
  * Removes all elements from the array data, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDataAll(): ConsentData[] {
    if (typeof(this.data) !== 'undefined') {
       const oldArray = this.data;
       delete this.data;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array data, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDataBySplice(start: number, deleteCount?: number): ConsentData[] {
    if (typeof(this.data) !== 'undefined') {
       return this.data.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field data.
  * @returns the value  or undefined
  */
  public getData(): ConsentData[] | undefined {
      return this.data;
  }

  public addProvision(newValue: ConsentProvision) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.provision) !== 'undefined') {
         delete this.provision;
      }
      return;
    }
    
    if (typeof(this.provision) === 'undefined') {
      this.provision =  [];
    }
    this.provision.push(newValue);
  }
  /**
  * Removes all elements from the array provision, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteProvisionAll(): ConsentProvision[] {
    if (typeof(this.provision) !== 'undefined') {
       const oldArray = this.provision;
       delete this.provision;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array provision, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteProvisionBySplice(start: number, deleteCount?: number): ConsentProvision[] {
    if (typeof(this.provision) !== 'undefined') {
       return this.provision.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field provision.
  * @returns the value  or undefined
  */
  public getProvision(): ConsentProvision[] | undefined {
      return this.provision;
  }


}


