import { Type } from 'class-transformer';
import { REGEX_ID_000, REGEX_IMPLICITRULES, REGEX_LANGUAGE, REGEX_STATUS_000, REGEX_INTENT, REGEX_PRIORITY, REGEX_OCCURRENCEDATETIME, REGEX_AUTHOREDON, REGEX_PATIENTINSTRUCTION } from '../FhirTsLibValidation/FhirRegex';
import { Annotation, CodeableConcept, Element, Extension, Identifier, Meta, Narrative, Period, Quantity, Range, Ratio, Reference, ResourceList, Account, ActivityDefinition, AdverseEvent, AllergyIntolerance, Appointment, AppointmentResponse, AuditEvent, Basic, Binary, BiologicallyDerivedProduct, BodyStructure, Bundle, CapabilityStatement, CarePlan, CareTeam, CatalogEntry, ChargeItem, ChargeItemDefinition, Claim, ClaimResponse, ClinicalImpression, CodeSystem, Communication, CommunicationRequest, CompartmentDefinition, Composition, ConceptMap, Condition, Consent, Contract, Coverage, CoverageEligibilityRequest, CoverageEligibilityResponse, DetectedIssue, Device, DeviceDefinition, DeviceMetric, DeviceRequest, DeviceUseStatement, DiagnosticReport, DocumentManifest, DocumentReference, EffectEvidenceSynthesis, Encounter, Endpoint, EnrollmentRequest, EnrollmentResponse, EpisodeOfCare, EventDefinition, Evidence, EvidenceVariable, ExampleScenario, ExplanationOfBenefit, FamilyMemberHistory, Flag, Goal, GraphDefinition, Group, GuidanceResponse, HealthcareService, ImagingStudy, Immunization, ImmunizationEvaluation, ImmunizationRecommendation, ImplementationGuide, InsurancePlan, Invoice, Library, Linkage, List, Location, Measure, MeasureReport, Media, Medication, MedicationAdministration, MedicationDispense, MedicationKnowledge, MedicationRequest, MedicationStatement, MedicinalProduct, MedicinalProductAuthorization, MedicinalProductContraindication, MedicinalProductIndication, MedicinalProductIngredient, MedicinalProductInteraction, MedicinalProductManufactured, MedicinalProductPackaged, MedicinalProductPharmaceutical, MedicinalProductUndesirableEffect, MessageDefinition, MessageHeader, MolecularSequence, NamingSystem, NutritionOrder, Observation, ObservationDefinition, OperationDefinition, OperationOutcome, Organization, OrganizationAffiliation, Parameters, Patient, PaymentNotice, PaymentReconciliation, Person, PlanDefinition, Practitioner, PractitionerRole, Procedure, Provenance, Questionnaire, QuestionnaireResponse, RelatedPerson, RequestGroup, ResearchDefinition, ResearchElementDefinition, ResearchStudy, ResearchSubject, RiskAssessment, RiskEvidenceSynthesis, Schedule, SearchParameter, Slot, Specimen, SpecimenDefinition, StructureDefinition, StructureMap, Subscription, Substance, SubstanceNucleicAcid, SubstancePolymer, SubstanceProtein, SubstanceReferenceInformation, SubstanceSourceMaterial, SubstanceSpecification, SupplyDelivery, SupplyRequest, Task, TerminologyCapabilities, TestReport, TestScript, ValueSet, VerificationResult, VisionPrescription, Timing } from './index';



/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to
 * be performed.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ServiceRequest
 */
export class ServiceRequest {
  /**
   * This is a ServiceRequest resource
   */
     resourceType = "ServiceRequest";

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * The metadata about a resource. This is content in the resource that is maintained by the
   * infrastructure. Changes to the content might not always be associated with version changes to the
   * resource.
   */
  @Type(() => Meta)
   meta?: Meta;

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected implicitRules?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _implicitRules?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected language?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _language?: Element;

  /**
   * A human-readable summary of the resource conveying the essential clinical and business information
   * for the resource.
   */
  @Type(() => Narrative)
   text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the resource that contains them -
   * they cannot be identified independently, and nor can they have their own independent transaction
   * scope.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ResourceList, {
          discriminator: {
    property: 'resourceType',
    subTypes: [
      	{ value: Account, name: 'Account'},
      	{ value: ActivityDefinition, name: 'ActivityDefinition'},
      	{ value: AdverseEvent, name: 'AdverseEvent'},
      	{ value: AllergyIntolerance, name: 'AllergyIntolerance'},
      	{ value: Appointment, name: 'Appointment'},
      	{ value: AppointmentResponse, name: 'AppointmentResponse'},
      	{ value: AuditEvent, name: 'AuditEvent'},
      	{ value: Basic, name: 'Basic'},
      	{ value: Binary, name: 'Binary'},
      	{ value: BiologicallyDerivedProduct, name: 'BiologicallyDerivedProduct'},
      	{ value: BodyStructure, name: 'BodyStructure'},
      	{ value: Bundle, name: 'Bundle'},
      	{ value: CapabilityStatement, name: 'CapabilityStatement'},
      	{ value: CarePlan, name: 'CarePlan'},
      	{ value: CareTeam, name: 'CareTeam'},
      	{ value: CatalogEntry, name: 'CatalogEntry'},
      	{ value: ChargeItem, name: 'ChargeItem'},
      	{ value: ChargeItemDefinition, name: 'ChargeItemDefinition'},
      	{ value: Claim, name: 'Claim'},
      	{ value: ClaimResponse, name: 'ClaimResponse'},
      	{ value: ClinicalImpression, name: 'ClinicalImpression'},
      	{ value: CodeSystem, name: 'CodeSystem'},
      	{ value: Communication, name: 'Communication'},
      	{ value: CommunicationRequest, name: 'CommunicationRequest'},
      	{ value: CompartmentDefinition, name: 'CompartmentDefinition'},
      	{ value: Composition, name: 'Composition'},
      	{ value: ConceptMap, name: 'ConceptMap'},
      	{ value: Condition, name: 'Condition'},
      	{ value: Consent, name: 'Consent'},
      	{ value: Contract, name: 'Contract'},
      	{ value: Coverage, name: 'Coverage'},
      	{ value: CoverageEligibilityRequest, name: 'CoverageEligibilityRequest'},
      	{ value: CoverageEligibilityResponse, name: 'CoverageEligibilityResponse'},
      	{ value: DetectedIssue, name: 'DetectedIssue'},
      	{ value: Device, name: 'Device'},
      	{ value: DeviceDefinition, name: 'DeviceDefinition'},
      	{ value: DeviceMetric, name: 'DeviceMetric'},
      	{ value: DeviceRequest, name: 'DeviceRequest'},
      	{ value: DeviceUseStatement, name: 'DeviceUseStatement'},
      	{ value: DiagnosticReport, name: 'DiagnosticReport'},
      	{ value: DocumentManifest, name: 'DocumentManifest'},
      	{ value: DocumentReference, name: 'DocumentReference'},
      	{ value: EffectEvidenceSynthesis, name: 'EffectEvidenceSynthesis'},
      	{ value: Encounter, name: 'Encounter'},
      	{ value: Endpoint, name: 'Endpoint'},
      	{ value: EnrollmentRequest, name: 'EnrollmentRequest'},
      	{ value: EnrollmentResponse, name: 'EnrollmentResponse'},
      	{ value: EpisodeOfCare, name: 'EpisodeOfCare'},
      	{ value: EventDefinition, name: 'EventDefinition'},
      	{ value: Evidence, name: 'Evidence'},
      	{ value: EvidenceVariable, name: 'EvidenceVariable'},
      	{ value: ExampleScenario, name: 'ExampleScenario'},
      	{ value: ExplanationOfBenefit, name: 'ExplanationOfBenefit'},
      	{ value: FamilyMemberHistory, name: 'FamilyMemberHistory'},
      	{ value: Flag, name: 'Flag'},
      	{ value: Goal, name: 'Goal'},
      	{ value: GraphDefinition, name: 'GraphDefinition'},
      	{ value: Group, name: 'Group'},
      	{ value: GuidanceResponse, name: 'GuidanceResponse'},
      	{ value: HealthcareService, name: 'HealthcareService'},
      	{ value: ImagingStudy, name: 'ImagingStudy'},
      	{ value: Immunization, name: 'Immunization'},
      	{ value: ImmunizationEvaluation, name: 'ImmunizationEvaluation'},
      	{ value: ImmunizationRecommendation, name: 'ImmunizationRecommendation'},
      	{ value: ImplementationGuide, name: 'ImplementationGuide'},
      	{ value: InsurancePlan, name: 'InsurancePlan'},
      	{ value: Invoice, name: 'Invoice'},
      	{ value: Library, name: 'Library'},
      	{ value: Linkage, name: 'Linkage'},
      	{ value: List, name: 'List'},
      	{ value: Location, name: 'Location'},
      	{ value: Measure, name: 'Measure'},
      	{ value: MeasureReport, name: 'MeasureReport'},
      	{ value: Media, name: 'Media'},
      	{ value: Medication, name: 'Medication'},
      	{ value: MedicationAdministration, name: 'MedicationAdministration'},
      	{ value: MedicationDispense, name: 'MedicationDispense'},
      	{ value: MedicationKnowledge, name: 'MedicationKnowledge'},
      	{ value: MedicationRequest, name: 'MedicationRequest'},
      	{ value: MedicationStatement, name: 'MedicationStatement'},
      	{ value: MedicinalProduct, name: 'MedicinalProduct'},
      	{ value: MedicinalProductAuthorization, name: 'MedicinalProductAuthorization'},
      	{ value: MedicinalProductContraindication, name: 'MedicinalProductContraindication'},
      	{ value: MedicinalProductIndication, name: 'MedicinalProductIndication'},
      	{ value: MedicinalProductIngredient, name: 'MedicinalProductIngredient'},
      	{ value: MedicinalProductInteraction, name: 'MedicinalProductInteraction'},
      	{ value: MedicinalProductManufactured, name: 'MedicinalProductManufactured'},
      	{ value: MedicinalProductPackaged, name: 'MedicinalProductPackaged'},
      	{ value: MedicinalProductPharmaceutical, name: 'MedicinalProductPharmaceutical'},
      	{ value: MedicinalProductUndesirableEffect, name: 'MedicinalProductUndesirableEffect'},
      	{ value: MessageDefinition, name: 'MessageDefinition'},
      	{ value: MessageHeader, name: 'MessageHeader'},
      	{ value: MolecularSequence, name: 'MolecularSequence'},
      	{ value: NamingSystem, name: 'NamingSystem'},
      	{ value: NutritionOrder, name: 'NutritionOrder'},
      	{ value: Observation, name: 'Observation'},
      	{ value: ObservationDefinition, name: 'ObservationDefinition'},
      	{ value: OperationDefinition, name: 'OperationDefinition'},
      	{ value: OperationOutcome, name: 'OperationOutcome'},
      	{ value: Organization, name: 'Organization'},
      	{ value: OrganizationAffiliation, name: 'OrganizationAffiliation'},
      	{ value: Parameters, name: 'Parameters'},
      	{ value: Patient, name: 'Patient'},
      	{ value: PaymentNotice, name: 'PaymentNotice'},
      	{ value: PaymentReconciliation, name: 'PaymentReconciliation'},
      	{ value: Person, name: 'Person'},
      	{ value: PlanDefinition, name: 'PlanDefinition'},
      	{ value: Practitioner, name: 'Practitioner'},
      	{ value: PractitionerRole, name: 'PractitionerRole'},
      	{ value: Procedure, name: 'Procedure'},
      	{ value: Provenance, name: 'Provenance'},
      	{ value: Questionnaire, name: 'Questionnaire'},
      	{ value: QuestionnaireResponse, name: 'QuestionnaireResponse'},
      	{ value: RelatedPerson, name: 'RelatedPerson'},
      	{ value: RequestGroup, name: 'RequestGroup'},
      	{ value: ResearchDefinition, name: 'ResearchDefinition'},
      	{ value: ResearchElementDefinition, name: 'ResearchElementDefinition'},
      	{ value: ResearchStudy, name: 'ResearchStudy'},
      	{ value: ResearchSubject, name: 'ResearchSubject'},
      	{ value: RiskAssessment, name: 'RiskAssessment'},
      	{ value: RiskEvidenceSynthesis, name: 'RiskEvidenceSynthesis'},
      	{ value: Schedule, name: 'Schedule'},
      	{ value: SearchParameter, name: 'SearchParameter'},
      	{ value: ServiceRequest, name: 'ServiceRequest'},
      	{ value: Slot, name: 'Slot'},
      	{ value: Specimen, name: 'Specimen'},
      	{ value: SpecimenDefinition, name: 'SpecimenDefinition'},
      	{ value: StructureDefinition, name: 'StructureDefinition'},
      	{ value: StructureMap, name: 'StructureMap'},
      	{ value: Subscription, name: 'Subscription'},
      	{ value: Substance, name: 'Substance'},
      	{ value: SubstanceNucleicAcid, name: 'SubstanceNucleicAcid'},
      	{ value: SubstancePolymer, name: 'SubstancePolymer'},
      	{ value: SubstanceProtein, name: 'SubstanceProtein'},
      	{ value: SubstanceReferenceInformation, name: 'SubstanceReferenceInformation'},
      	{ value: SubstanceSourceMaterial, name: 'SubstanceSourceMaterial'},
      	{ value: SubstanceSpecification, name: 'SubstanceSpecification'},
      	{ value: SupplyDelivery, name: 'SupplyDelivery'},
      	{ value: SupplyRequest, name: 'SupplyRequest'},
      	{ value: Task, name: 'Task'},
      	{ value: TerminologyCapabilities, name: 'TerminologyCapabilities'},
      	{ value: TestReport, name: 'TestReport'},
      	{ value: TestScript, name: 'TestScript'},
      	{ value: ValueSet, name: 'ValueSet'},
      	{ value: VerificationResult, name: 'VerificationResult'},
      	{ value: VisionPrescription, name: 'VisionPrescription'}
      ],
    }
  })
  protected contained?: ResourceList[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource and that modifies the understanding of the element that contains it and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met as part of the definition of
   * the extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order
   * fulfiller.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is
   * adhered to in whole or in part by this ServiceRequest.
   * Field access restricted because there are specific valid values.
   */
  protected instantiatesCanonical?: string[];

  /**
   * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that
   * is adhered to in whole or in part by this ServiceRequest.
   * Field access restricted because there are specific valid values.
   */
  protected instantiatesUri?: string[];

  /**
   * Extensions for instantiatesUri
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _instantiatesUri?: Element[];

  /**
   * Plan/proposal/order fulfilled by this request.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected basedOn?: Reference[];

  /**
   * The request takes the place of the referenced completed or terminated request(s).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected replaces?: Reference[];

  /**
   * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for
   * business identifiers.
   */
  @Type(() => Identifier)
   requisition?: Identifier;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected status?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _status?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected intent?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _intent?: Element;

  /**
   * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical
   * Procedure").
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected category?: CodeableConcept[];

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected priority?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _priority?: Element;

  /**
   * Value of "true" or "false"
   */
   doNotPerform?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _doNotPerform?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   code?: CodeableConcept;

  /**
   * Additional details and instructions about the how the services are to be delivered.   For example,
   * and order for a urinary catheter may have an order detail for an external or indwelling catheter,
   * or an order for a bandage may require additional instructions specifying how the bandage should be
   * applied.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected orderDetail?: CodeableConcept[];

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   quantityQuantity?: Quantity;

  /**
   * A relationship of two Quantity values - expressed as a numerator and a denominator.
   */
  @Type(() => Ratio)
   quantityRatio?: Ratio;

  /**
   * A set of ordered Quantities defined by a low and high limit.
   */
  @Type(() => Range)
   quantityRange?: Range;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   subject?: Reference;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   encounter?: Reference;

  /**
   * The date/time at which the requested service should occur.
   * Field access restricted because there are specific valid values.
   */
  protected occurrenceDateTime?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _occurrenceDateTime?: Element;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   occurrencePeriod?: Period;

  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things
   * are planned, expected or requested to occur. The most common usage is in dosage instructions for
   * medications. They are also used when planning care of various kinds, and may be used for reporting
   * the schedule to which past regular activities were carried out.
   */
  @Type(() => Timing)
   occurrenceTiming?: Timing;

  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For
   * example "pain", "on flare-up", etc.
   */
   asNeededBoolean?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _asNeededBoolean?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   asNeededCodeableConcept?: CodeableConcept;

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected authoredOn?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _authoredOn?: Element;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   requester?: Reference;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   performerType?: CodeableConcept;

  /**
   * The desired performer for doing the requested service.  For example, the surgeon,
   * dermatopathologist, endoscopist, etc.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected performer?: Reference[];

  /**
   * The preferred location(s) where the procedure should actually happen in coded or free text form.
   * E.g. at home or nursing day care center.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected locationCode?: CodeableConcept[];

  /**
   * A reference to the the preferred location(s) where the procedure should actually happen. E.g. at
   * home or nursing day care center.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected locationReference?: Reference[];

  /**
   * An explanation or justification for why this service is being requested in coded or textual form.
   * This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected reasonCode?: CodeableConcept[];

  /**
   * Indicates another resource that provides a justification for why this service is being requested.
   * May relate to the resources referred to in `supportingInfo`.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected reasonReference?: Reference[];

  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be
   * needed for delivering the requested service.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected insurance?: Reference[];

  /**
   * Additional clinical information about the patient or specimen that may influence the services or
   * their interpretations.     This information includes diagnosis, clinical findings and other
   * observations.  In laboratory ordering these are typically referred to as "ask at order entry
   * questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to
   * provide context or supporting information needed to complete the order. For example,  reporting
   * the amount of inspired oxygen for blood gas measurements.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected supportingInfo?: Reference[];

  /**
   * One or more specimens that the laboratory procedure will use.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected specimen?: Reference[];

  /**
   * Anatomic location where the procedure should be performed. This is the target site.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected bodySite?: CodeableConcept[];

  /**
   * Any other notes and comments made about the service request. For example, internal billing notes.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Annotation)
  protected note?: Annotation[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected patientInstruction?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _patientInstruction?: Element;

  /**
   * Key events in the history of the request.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected relevantHistory?: Reference[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID_000.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID_000.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setImplicitRules(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.implicitRules) !== 'undefined') {
         delete this.implicitRules;
      }
      return;
    }
    
    if (REGEX_IMPLICITRULES.test(newValue)) {
      this.implicitRules = newValue
    } else {
      throw new Error("Invalid value pattern for implicitRules of " + newValue);
    }
  }
  
  public getImplicitRulesPattern(): string {
    return REGEX_IMPLICITRULES.source;
  }
  
  /**
  * Gets the current value of field implicitRules.
  * @returns the value  or undefined
  */
  public getImplicitRules(): string | undefined {
      return this.implicitRules;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLanguage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.language) !== 'undefined') {
         delete this.language;
      }
      return;
    }
    
    if (REGEX_LANGUAGE.test(newValue)) {
      this.language = newValue
    } else {
      throw new Error("Invalid value pattern for language of " + newValue);
    }
  }
  
  public getLanguagePattern(): string {
    return REGEX_LANGUAGE.source;
  }
  
  /**
  * Gets the current value of field language.
  * @returns the value  or undefined
  */
  public getLanguage(): string | undefined {
      return this.language;
  }

  public addContained(newValue: ResourceList) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contained) !== 'undefined') {
         delete this.contained;
      }
      return;
    }
    
    if (typeof(this.contained) === 'undefined') {
      this.contained =  [];
    }
    this.contained.push(newValue);
  }
  /**
  * Removes all elements from the array contained, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteContainedAll(): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       const oldArray = this.contained;
       delete this.contained;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array contained, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteContainedBySplice(start: number, deleteCount?: number): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       return this.contained.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field contained.
  * @returns the value  or undefined
  */
  public getContained(): ResourceList[] | undefined {
      return this.contained;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }
  /**
  * Removes all elements from the array identifier, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteIdentifierAll(): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       const oldArray = this.identifier;
       delete this.identifier;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array identifier, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteIdentifierBySplice(start: number, deleteCount?: number): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       return this.identifier.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field identifier.
  * @returns the value  or undefined
  */
  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  public addInstantiatesCanonical(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.instantiatesCanonical) !== 'undefined') {
         delete this.instantiatesCanonical;
      }
      return;
    }
    
    if (typeof(this.instantiatesCanonical) === 'undefined') {
      this.instantiatesCanonical =  [];
    }
    this.instantiatesCanonical.push(newValue);
  }
  /**
  * Removes all elements from the array instantiatesCanonical, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteInstantiatesCanonicalAll(): string[] {
    if (typeof(this.instantiatesCanonical) !== 'undefined') {
       const oldArray = this.instantiatesCanonical;
       delete this.instantiatesCanonical;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array instantiatesCanonical, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteInstantiatesCanonicalBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.instantiatesCanonical) !== 'undefined') {
       return this.instantiatesCanonical.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field instantiatesCanonical.
  * @returns the value  or undefined
  */
  public getInstantiatesCanonical(): string[] | undefined {
      return this.instantiatesCanonical;
  }

  public addInstantiatesUri(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.instantiatesUri) !== 'undefined') {
         delete this.instantiatesUri;
      }
      return;
    }
    
    if (typeof(this.instantiatesUri) === 'undefined') {
      this.instantiatesUri =  [];
    }
    this.instantiatesUri.push(newValue);
  }
  /**
  * Removes all elements from the array instantiatesUri, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteInstantiatesUriAll(): string[] {
    if (typeof(this.instantiatesUri) !== 'undefined') {
       const oldArray = this.instantiatesUri;
       delete this.instantiatesUri;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array instantiatesUri, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteInstantiatesUriBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.instantiatesUri) !== 'undefined') {
       return this.instantiatesUri.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field instantiatesUri.
  * @returns the value  or undefined
  */
  public getInstantiatesUri(): string[] | undefined {
      return this.instantiatesUri;
  }

  public add_instantiatesUri(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._instantiatesUri) !== 'undefined') {
         delete this._instantiatesUri;
      }
      return;
    }
    
    if (typeof(this._instantiatesUri) === 'undefined') {
      this._instantiatesUri =  [];
    }
    this._instantiatesUri.push(newValue);
  }
  /**
  * Removes all elements from the array _instantiatesUri, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_instantiatesUriAll(): Element[] {
    if (typeof(this._instantiatesUri) !== 'undefined') {
       const oldArray = this._instantiatesUri;
       delete this._instantiatesUri;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _instantiatesUri, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_instantiatesUriBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._instantiatesUri) !== 'undefined') {
       return this._instantiatesUri.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _instantiatesUri.
  * @returns the value  or undefined
  */
  public get_instantiatesUri(): Element[] | undefined {
      return this._instantiatesUri;
  }

  public addBasedOn(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.basedOn) !== 'undefined') {
         delete this.basedOn;
      }
      return;
    }
    
    if (typeof(this.basedOn) === 'undefined') {
      this.basedOn =  [];
    }
    this.basedOn.push(newValue);
  }
  /**
  * Removes all elements from the array basedOn, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteBasedOnAll(): Reference[] {
    if (typeof(this.basedOn) !== 'undefined') {
       const oldArray = this.basedOn;
       delete this.basedOn;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array basedOn, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteBasedOnBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.basedOn) !== 'undefined') {
       return this.basedOn.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field basedOn.
  * @returns the value  or undefined
  */
  public getBasedOn(): Reference[] | undefined {
      return this.basedOn;
  }

  public addReplaces(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.replaces) !== 'undefined') {
         delete this.replaces;
      }
      return;
    }
    
    if (typeof(this.replaces) === 'undefined') {
      this.replaces =  [];
    }
    this.replaces.push(newValue);
  }
  /**
  * Removes all elements from the array replaces, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReplacesAll(): Reference[] {
    if (typeof(this.replaces) !== 'undefined') {
       const oldArray = this.replaces;
       delete this.replaces;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array replaces, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReplacesBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.replaces) !== 'undefined') {
       return this.replaces.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field replaces.
  * @returns the value  or undefined
  */
  public getReplaces(): Reference[] | undefined {
      return this.replaces;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setStatus(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.status) !== 'undefined') {
         delete this.status;
      }
      return;
    }
    
    if (REGEX_STATUS_000.test(newValue)) {
      this.status = newValue
    } else {
      throw new Error("Invalid value pattern for status of " + newValue);
    }
  }
  
  public getStatusPattern(): string {
    return REGEX_STATUS_000.source;
  }
  
  /**
  * Gets the current value of field status.
  * @returns the value  or undefined
  */
  public getStatus(): string | undefined {
      return this.status;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setIntent(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.intent) !== 'undefined') {
         delete this.intent;
      }
      return;
    }
    
    if (REGEX_INTENT.test(newValue)) {
      this.intent = newValue
    } else {
      throw new Error("Invalid value pattern for intent of " + newValue);
    }
  }
  
  public getIntentPattern(): string {
    return REGEX_INTENT.source;
  }
  
  /**
  * Gets the current value of field intent.
  * @returns the value  or undefined
  */
  public getIntent(): string | undefined {
      return this.intent;
  }

  public addCategory(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.category) !== 'undefined') {
         delete this.category;
      }
      return;
    }
    
    if (typeof(this.category) === 'undefined') {
      this.category =  [];
    }
    this.category.push(newValue);
  }
  /**
  * Removes all elements from the array category, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCategoryAll(): CodeableConcept[] {
    if (typeof(this.category) !== 'undefined') {
       const oldArray = this.category;
       delete this.category;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array category, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCategoryBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.category) !== 'undefined') {
       return this.category.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field category.
  * @returns the value  or undefined
  */
  public getCategory(): CodeableConcept[] | undefined {
      return this.category;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPriority(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.priority) !== 'undefined') {
         delete this.priority;
      }
      return;
    }
    
    if (REGEX_PRIORITY.test(newValue)) {
      this.priority = newValue
    } else {
      throw new Error("Invalid value pattern for priority of " + newValue);
    }
  }
  
  public getPriorityPattern(): string {
    return REGEX_PRIORITY.source;
  }
  
  /**
  * Gets the current value of field priority.
  * @returns the value  or undefined
  */
  public getPriority(): string | undefined {
      return this.priority;
  }

  public addOrderDetail(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.orderDetail) !== 'undefined') {
         delete this.orderDetail;
      }
      return;
    }
    
    if (typeof(this.orderDetail) === 'undefined') {
      this.orderDetail =  [];
    }
    this.orderDetail.push(newValue);
  }
  /**
  * Removes all elements from the array orderDetail, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteOrderDetailAll(): CodeableConcept[] {
    if (typeof(this.orderDetail) !== 'undefined') {
       const oldArray = this.orderDetail;
       delete this.orderDetail;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array orderDetail, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteOrderDetailBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.orderDetail) !== 'undefined') {
       return this.orderDetail.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field orderDetail.
  * @returns the value  or undefined
  */
  public getOrderDetail(): CodeableConcept[] | undefined {
      return this.orderDetail;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setOccurrenceDateTime(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.occurrenceDateTime) !== 'undefined') {
         delete this.occurrenceDateTime;
      }
      return;
    }
    
    if (REGEX_OCCURRENCEDATETIME.test(newValue)) {
      this.occurrenceDateTime = newValue
    } else {
      throw new Error("Invalid value pattern for occurrenceDateTime of " + newValue);
    }
  }
  
  public getOccurrenceDateTimePattern(): string {
    return REGEX_OCCURRENCEDATETIME.source;
  }
  
  /**
  * Gets the current value of field occurrenceDateTime.
  * @returns the value  or undefined
  */
  public getOccurrenceDateTime(): string | undefined {
      return this.occurrenceDateTime;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setAuthoredOn(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.authoredOn) !== 'undefined') {
         delete this.authoredOn;
      }
      return;
    }
    
    if (REGEX_AUTHOREDON.test(newValue)) {
      this.authoredOn = newValue
    } else {
      throw new Error("Invalid value pattern for authoredOn of " + newValue);
    }
  }
  
  public getAuthoredOnPattern(): string {
    return REGEX_AUTHOREDON.source;
  }
  
  /**
  * Gets the current value of field authoredOn.
  * @returns the value  or undefined
  */
  public getAuthoredOn(): string | undefined {
      return this.authoredOn;
  }

  public addPerformer(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.performer) !== 'undefined') {
         delete this.performer;
      }
      return;
    }
    
    if (typeof(this.performer) === 'undefined') {
      this.performer =  [];
    }
    this.performer.push(newValue);
  }
  /**
  * Removes all elements from the array performer, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePerformerAll(): Reference[] {
    if (typeof(this.performer) !== 'undefined') {
       const oldArray = this.performer;
       delete this.performer;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array performer, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePerformerBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.performer) !== 'undefined') {
       return this.performer.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field performer.
  * @returns the value  or undefined
  */
  public getPerformer(): Reference[] | undefined {
      return this.performer;
  }

  public addLocationCode(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.locationCode) !== 'undefined') {
         delete this.locationCode;
      }
      return;
    }
    
    if (typeof(this.locationCode) === 'undefined') {
      this.locationCode =  [];
    }
    this.locationCode.push(newValue);
  }
  /**
  * Removes all elements from the array locationCode, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteLocationCodeAll(): CodeableConcept[] {
    if (typeof(this.locationCode) !== 'undefined') {
       const oldArray = this.locationCode;
       delete this.locationCode;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array locationCode, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteLocationCodeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.locationCode) !== 'undefined') {
       return this.locationCode.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field locationCode.
  * @returns the value  or undefined
  */
  public getLocationCode(): CodeableConcept[] | undefined {
      return this.locationCode;
  }

  public addLocationReference(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.locationReference) !== 'undefined') {
         delete this.locationReference;
      }
      return;
    }
    
    if (typeof(this.locationReference) === 'undefined') {
      this.locationReference =  [];
    }
    this.locationReference.push(newValue);
  }
  /**
  * Removes all elements from the array locationReference, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteLocationReferenceAll(): Reference[] {
    if (typeof(this.locationReference) !== 'undefined') {
       const oldArray = this.locationReference;
       delete this.locationReference;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array locationReference, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteLocationReferenceBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.locationReference) !== 'undefined') {
       return this.locationReference.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field locationReference.
  * @returns the value  or undefined
  */
  public getLocationReference(): Reference[] | undefined {
      return this.locationReference;
  }

  public addReasonCode(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.reasonCode) !== 'undefined') {
         delete this.reasonCode;
      }
      return;
    }
    
    if (typeof(this.reasonCode) === 'undefined') {
      this.reasonCode =  [];
    }
    this.reasonCode.push(newValue);
  }
  /**
  * Removes all elements from the array reasonCode, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReasonCodeAll(): CodeableConcept[] {
    if (typeof(this.reasonCode) !== 'undefined') {
       const oldArray = this.reasonCode;
       delete this.reasonCode;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array reasonCode, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReasonCodeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.reasonCode) !== 'undefined') {
       return this.reasonCode.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field reasonCode.
  * @returns the value  or undefined
  */
  public getReasonCode(): CodeableConcept[] | undefined {
      return this.reasonCode;
  }

  public addReasonReference(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.reasonReference) !== 'undefined') {
         delete this.reasonReference;
      }
      return;
    }
    
    if (typeof(this.reasonReference) === 'undefined') {
      this.reasonReference =  [];
    }
    this.reasonReference.push(newValue);
  }
  /**
  * Removes all elements from the array reasonReference, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReasonReferenceAll(): Reference[] {
    if (typeof(this.reasonReference) !== 'undefined') {
       const oldArray = this.reasonReference;
       delete this.reasonReference;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array reasonReference, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReasonReferenceBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.reasonReference) !== 'undefined') {
       return this.reasonReference.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field reasonReference.
  * @returns the value  or undefined
  */
  public getReasonReference(): Reference[] | undefined {
      return this.reasonReference;
  }

  public addInsurance(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.insurance) !== 'undefined') {
         delete this.insurance;
      }
      return;
    }
    
    if (typeof(this.insurance) === 'undefined') {
      this.insurance =  [];
    }
    this.insurance.push(newValue);
  }
  /**
  * Removes all elements from the array insurance, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteInsuranceAll(): Reference[] {
    if (typeof(this.insurance) !== 'undefined') {
       const oldArray = this.insurance;
       delete this.insurance;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array insurance, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteInsuranceBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.insurance) !== 'undefined') {
       return this.insurance.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field insurance.
  * @returns the value  or undefined
  */
  public getInsurance(): Reference[] | undefined {
      return this.insurance;
  }

  public addSupportingInfo(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.supportingInfo) !== 'undefined') {
         delete this.supportingInfo;
      }
      return;
    }
    
    if (typeof(this.supportingInfo) === 'undefined') {
      this.supportingInfo =  [];
    }
    this.supportingInfo.push(newValue);
  }
  /**
  * Removes all elements from the array supportingInfo, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSupportingInfoAll(): Reference[] {
    if (typeof(this.supportingInfo) !== 'undefined') {
       const oldArray = this.supportingInfo;
       delete this.supportingInfo;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array supportingInfo, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSupportingInfoBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.supportingInfo) !== 'undefined') {
       return this.supportingInfo.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field supportingInfo.
  * @returns the value  or undefined
  */
  public getSupportingInfo(): Reference[] | undefined {
      return this.supportingInfo;
  }

  public addSpecimen(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.specimen) !== 'undefined') {
         delete this.specimen;
      }
      return;
    }
    
    if (typeof(this.specimen) === 'undefined') {
      this.specimen =  [];
    }
    this.specimen.push(newValue);
  }
  /**
  * Removes all elements from the array specimen, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSpecimenAll(): Reference[] {
    if (typeof(this.specimen) !== 'undefined') {
       const oldArray = this.specimen;
       delete this.specimen;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array specimen, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSpecimenBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.specimen) !== 'undefined') {
       return this.specimen.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field specimen.
  * @returns the value  or undefined
  */
  public getSpecimen(): Reference[] | undefined {
      return this.specimen;
  }

  public addBodySite(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.bodySite) !== 'undefined') {
         delete this.bodySite;
      }
      return;
    }
    
    if (typeof(this.bodySite) === 'undefined') {
      this.bodySite =  [];
    }
    this.bodySite.push(newValue);
  }
  /**
  * Removes all elements from the array bodySite, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteBodySiteAll(): CodeableConcept[] {
    if (typeof(this.bodySite) !== 'undefined') {
       const oldArray = this.bodySite;
       delete this.bodySite;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array bodySite, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteBodySiteBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.bodySite) !== 'undefined') {
       return this.bodySite.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field bodySite.
  * @returns the value  or undefined
  */
  public getBodySite(): CodeableConcept[] | undefined {
      return this.bodySite;
  }

  public addNote(newValue: Annotation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.note) !== 'undefined') {
         delete this.note;
      }
      return;
    }
    
    if (typeof(this.note) === 'undefined') {
      this.note =  [];
    }
    this.note.push(newValue);
  }
  /**
  * Removes all elements from the array note, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNoteAll(): Annotation[] {
    if (typeof(this.note) !== 'undefined') {
       const oldArray = this.note;
       delete this.note;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array note, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNoteBySplice(start: number, deleteCount?: number): Annotation[] {
    if (typeof(this.note) !== 'undefined') {
       return this.note.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field note.
  * @returns the value  or undefined
  */
  public getNote(): Annotation[] | undefined {
      return this.note;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPatientInstruction(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.patientInstruction) !== 'undefined') {
         delete this.patientInstruction;
      }
      return;
    }
    
    if (REGEX_PATIENTINSTRUCTION.test(newValue)) {
      this.patientInstruction = newValue
    } else {
      throw new Error("Invalid value pattern for patientInstruction of " + newValue);
    }
  }
  
  public getPatientInstructionPattern(): string {
    return REGEX_PATIENTINSTRUCTION.source;
  }
  
  /**
  * Gets the current value of field patientInstruction.
  * @returns the value  or undefined
  */
  public getPatientInstruction(): string | undefined {
      return this.patientInstruction;
  }

  public addRelevantHistory(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.relevantHistory) !== 'undefined') {
         delete this.relevantHistory;
      }
      return;
    }
    
    if (typeof(this.relevantHistory) === 'undefined') {
      this.relevantHistory =  [];
    }
    this.relevantHistory.push(newValue);
  }
  /**
  * Removes all elements from the array relevantHistory, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteRelevantHistoryAll(): Reference[] {
    if (typeof(this.relevantHistory) !== 'undefined') {
       const oldArray = this.relevantHistory;
       delete this.relevantHistory;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array relevantHistory, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteRelevantHistoryBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.relevantHistory) !== 'undefined') {
       return this.relevantHistory.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field relevantHistory.
  * @returns the value  or undefined
  */
  public getRelevantHistory(): Reference[] | undefined {
      return this.relevantHistory;
  }


}


