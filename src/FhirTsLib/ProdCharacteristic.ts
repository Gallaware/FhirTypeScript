import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_SHAPE } from '../FhirTsLibValidation/FhirRegex';
import { Attachment, CodeableConcept, Element, Extension, Quantity } from './index';



/**
 * The marketing status describes the date when a medicinal product is actually put on the market or
 * the date as of which it is no longer available.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ProdCharacteristic
 */
export class ProdCharacteristic {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   height?: Quantity;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   width?: Quantity;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   depth?: Quantity;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   weight?: Quantity;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   nominalVolume?: Quantity;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   externalDiameter?: Quantity;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected shape?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _shape?: Element;

  /**
   * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The
   * term and the term identifier shall be used.
   * Field access restricted because there are specific valid values.
   */
  protected color?: string[];

  /**
   * Extensions for color
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _color?: Element[];

  /**
   * Where applicable, the imprint can be specified as text.
   * Field access restricted because there are specific valid values.
   */
  protected imprint?: string[];

  /**
   * Extensions for imprint
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _imprint?: Element[];

  /**
   * Where applicable, the image can be provided The format of the image attachment shall be specified
   * by regional implementations.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Attachment)
  protected image?: Attachment[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   scoring?: CodeableConcept;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setShape(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.shape) !== 'undefined') {
         delete this.shape;
      }
      return;
    }
    
    if (REGEX_SHAPE.test(newValue)) {
      this.shape = newValue
    } else {
      throw new Error("Invalid value pattern for shape of " + newValue);
    }
  }
  
  public getShapePattern(): string {
    return REGEX_SHAPE.source;
  }
  
  /**
  * Gets the current value of field shape.
  * @returns the value  or undefined
  */
  public getShape(): string | undefined {
      return this.shape;
  }

  public addColor(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.color) !== 'undefined') {
         delete this.color;
      }
      return;
    }
    
    if (typeof(this.color) === 'undefined') {
      this.color =  [];
    }
    this.color.push(newValue);
  }
  /**
  * Removes all elements from the array color, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteColorAll(): string[] {
    if (typeof(this.color) !== 'undefined') {
       const oldArray = this.color;
       delete this.color;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array color, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteColorBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.color) !== 'undefined') {
       return this.color.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field color.
  * @returns the value  or undefined
  */
  public getColor(): string[] | undefined {
      return this.color;
  }

  public add_color(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._color) !== 'undefined') {
         delete this._color;
      }
      return;
    }
    
    if (typeof(this._color) === 'undefined') {
      this._color =  [];
    }
    this._color.push(newValue);
  }
  /**
  * Removes all elements from the array _color, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_colorAll(): Element[] {
    if (typeof(this._color) !== 'undefined') {
       const oldArray = this._color;
       delete this._color;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _color, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_colorBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._color) !== 'undefined') {
       return this._color.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _color.
  * @returns the value  or undefined
  */
  public get_color(): Element[] | undefined {
      return this._color;
  }

  public addImprint(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.imprint) !== 'undefined') {
         delete this.imprint;
      }
      return;
    }
    
    if (typeof(this.imprint) === 'undefined') {
      this.imprint =  [];
    }
    this.imprint.push(newValue);
  }
  /**
  * Removes all elements from the array imprint, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteImprintAll(): string[] {
    if (typeof(this.imprint) !== 'undefined') {
       const oldArray = this.imprint;
       delete this.imprint;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array imprint, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteImprintBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.imprint) !== 'undefined') {
       return this.imprint.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field imprint.
  * @returns the value  or undefined
  */
  public getImprint(): string[] | undefined {
      return this.imprint;
  }

  public add_imprint(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._imprint) !== 'undefined') {
         delete this._imprint;
      }
      return;
    }
    
    if (typeof(this._imprint) === 'undefined') {
      this._imprint =  [];
    }
    this._imprint.push(newValue);
  }
  /**
  * Removes all elements from the array _imprint, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_imprintAll(): Element[] {
    if (typeof(this._imprint) !== 'undefined') {
       const oldArray = this._imprint;
       delete this._imprint;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _imprint, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_imprintBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._imprint) !== 'undefined') {
       return this._imprint.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _imprint.
  * @returns the value  or undefined
  */
  public get_imprint(): Element[] | undefined {
      return this._imprint;
  }

  public addImage(newValue: Attachment) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.image) !== 'undefined') {
         delete this.image;
      }
      return;
    }
    
    if (typeof(this.image) === 'undefined') {
      this.image =  [];
    }
    this.image.push(newValue);
  }
  /**
  * Removes all elements from the array image, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteImageAll(): Attachment[] {
    if (typeof(this.image) !== 'undefined') {
       const oldArray = this.image;
       delete this.image;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array image, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteImageBySplice(start: number, deleteCount?: number): Attachment[] {
    if (typeof(this.image) !== 'undefined') {
       return this.image.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field image.
  * @returns the value  or undefined
  */
  public getImage(): Attachment[] | undefined {
      return this.image;
  }


}


