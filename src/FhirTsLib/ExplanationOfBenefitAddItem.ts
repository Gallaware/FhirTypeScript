import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_SERVICEDDATE } from '../FhirTsLibValidation/FhirRegex';
import { Address, CodeableConcept, Element, ExplanationOfBenefitAdjudication, ExplanationOfBenefitDetail1, Extension, Money, Period, Quantity, Reference } from './FhirType';



/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and
 * optionally account balance information, for informing the subscriber of the benefits provided.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ExplanationOfBenefit_AddItem
 */
export class ExplanationOfBenefitAddItem {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Claim items which this service line is intended to replace.
   * Field access restricted because there are specific valid values.
   */
  protected itemSequence?: number[];

  /**
   * Extensions for itemSequence
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _itemSequence?: Element[];

  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   * Field access restricted because there are specific valid values.
   */
  protected detailSequence?: number[];

  /**
   * Extensions for detailSequence
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _detailSequence?: Element[];

  /**
   * The sequence number of the sub-details woithin the details within the claim item which this line is
   * intended to replace.
   * Field access restricted because there are specific valid values.
   */
  protected subDetailSequence?: number[];

  /**
   * Extensions for subDetailSequence
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _subDetailSequence?: Element[];

  /**
   * The providers who are authorized for the services rendered to the patient.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected provider?: Reference[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   productOrService?: CodeableConcept;

  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected modifier?: CodeableConcept[];

  /**
   * Identifies the program under which this may be recovered.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected programCode?: CodeableConcept[];

  /**
   * The date or dates when the service or product was supplied, performed or completed.
   * Field access restricted because there are specific valid values.
   */
  protected servicedDate?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _servicedDate?: Element;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   servicedPeriod?: Period;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   locationCodeableConcept?: CodeableConcept;

  /**
   * An address expressed using postal conventions (as opposed to GPS or other location definition
   * formats).  This data type may be used to convey addresses for use in delivering mail as well as
   * for visiting locations which might not be valid for mail delivery.  There are a variety of postal
   * address formats defined around the world.
   */
  @Type(() => Address)
   locationAddress?: Address;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   locationReference?: Reference;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   quantity?: Quantity;

  /**
   * An amount of economic utility in some recognized currency.
   */
  @Type(() => Money)
   unitPrice?: Money;

  /**
   * A rational number with implicit precision
   */
   factor?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _factor?: Element;

  /**
   * An amount of economic utility in some recognized currency.
   */
  @Type(() => Money)
   net?: Money;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   bodySite?: CodeableConcept;

  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected subSite?: CodeableConcept[];

  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   * Field access restricted because there are specific valid values.
   */
  protected noteNumber?: number[];

  /**
   * Extensions for noteNumber
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _noteNumber?: Element[];

  /**
   * The adjudication results.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ExplanationOfBenefitAdjudication)
  protected adjudication?: ExplanationOfBenefitAdjudication[];

  /**
   * The second-tier service adjudications for payor added services.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ExplanationOfBenefitDetail1)
  protected detail?: ExplanationOfBenefitDetail1[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addItemSequence(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.itemSequence) !== 'undefined') {
         delete this.itemSequence;
      }
      return;
    }
    
    if (typeof(this.itemSequence) === 'undefined') {
      this.itemSequence =  [];
    }
    this.itemSequence.push(newValue);
  }

  public getItemSequence(): number[] | undefined {
      return this.itemSequence;
  }

  public add_itemSequence(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._itemSequence) !== 'undefined') {
         delete this._itemSequence;
      }
      return;
    }
    
    if (typeof(this._itemSequence) === 'undefined') {
      this._itemSequence =  [];
    }
    this._itemSequence.push(newValue);
  }

  public get_itemSequence(): Element[] | undefined {
      return this._itemSequence;
  }

  public addDetailSequence(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.detailSequence) !== 'undefined') {
         delete this.detailSequence;
      }
      return;
    }
    
    if (typeof(this.detailSequence) === 'undefined') {
      this.detailSequence =  [];
    }
    this.detailSequence.push(newValue);
  }

  public getDetailSequence(): number[] | undefined {
      return this.detailSequence;
  }

  public add_detailSequence(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._detailSequence) !== 'undefined') {
         delete this._detailSequence;
      }
      return;
    }
    
    if (typeof(this._detailSequence) === 'undefined') {
      this._detailSequence =  [];
    }
    this._detailSequence.push(newValue);
  }

  public get_detailSequence(): Element[] | undefined {
      return this._detailSequence;
  }

  public addSubDetailSequence(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.subDetailSequence) !== 'undefined') {
         delete this.subDetailSequence;
      }
      return;
    }
    
    if (typeof(this.subDetailSequence) === 'undefined') {
      this.subDetailSequence =  [];
    }
    this.subDetailSequence.push(newValue);
  }

  public getSubDetailSequence(): number[] | undefined {
      return this.subDetailSequence;
  }

  public add_subDetailSequence(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._subDetailSequence) !== 'undefined') {
         delete this._subDetailSequence;
      }
      return;
    }
    
    if (typeof(this._subDetailSequence) === 'undefined') {
      this._subDetailSequence =  [];
    }
    this._subDetailSequence.push(newValue);
  }

  public get_subDetailSequence(): Element[] | undefined {
      return this._subDetailSequence;
  }

  public addProvider(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.provider) !== 'undefined') {
         delete this.provider;
      }
      return;
    }
    
    if (typeof(this.provider) === 'undefined') {
      this.provider =  [];
    }
    this.provider.push(newValue);
  }

  public getProvider(): Reference[] | undefined {
      return this.provider;
  }

  public addModifier(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifier) !== 'undefined') {
         delete this.modifier;
      }
      return;
    }
    
    if (typeof(this.modifier) === 'undefined') {
      this.modifier =  [];
    }
    this.modifier.push(newValue);
  }

  public getModifier(): CodeableConcept[] | undefined {
      return this.modifier;
  }

  public addProgramCode(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.programCode) !== 'undefined') {
         delete this.programCode;
      }
      return;
    }
    
    if (typeof(this.programCode) === 'undefined') {
      this.programCode =  [];
    }
    this.programCode.push(newValue);
  }

  public getProgramCode(): CodeableConcept[] | undefined {
      return this.programCode;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setServicedDate(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.servicedDate) !== 'undefined') {
         delete this.servicedDate;
      }
      return;
    }
    
    if (REGEX_SERVICEDDATE.test(newValue)) {
      this.servicedDate = newValue
    } else {
      throw new Error("Invalid value pattern for servicedDate of " + newValue);
    }
  }
  
  public getServicedDatePattern(): string {
    return REGEX_SERVICEDDATE.source;
  }
  

  public getServicedDate(): string | undefined {
      return this.servicedDate;
  }

  public addSubSite(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.subSite) !== 'undefined') {
         delete this.subSite;
      }
      return;
    }
    
    if (typeof(this.subSite) === 'undefined') {
      this.subSite =  [];
    }
    this.subSite.push(newValue);
  }

  public getSubSite(): CodeableConcept[] | undefined {
      return this.subSite;
  }

  public addNoteNumber(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.noteNumber) !== 'undefined') {
         delete this.noteNumber;
      }
      return;
    }
    
    if (typeof(this.noteNumber) === 'undefined') {
      this.noteNumber =  [];
    }
    this.noteNumber.push(newValue);
  }

  public getNoteNumber(): number[] | undefined {
      return this.noteNumber;
  }

  public add_noteNumber(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._noteNumber) !== 'undefined') {
         delete this._noteNumber;
      }
      return;
    }
    
    if (typeof(this._noteNumber) === 'undefined') {
      this._noteNumber =  [];
    }
    this._noteNumber.push(newValue);
  }

  public get_noteNumber(): Element[] | undefined {
      return this._noteNumber;
  }

  public addAdjudication(newValue: ExplanationOfBenefitAdjudication) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.adjudication) !== 'undefined') {
         delete this.adjudication;
      }
      return;
    }
    
    if (typeof(this.adjudication) === 'undefined') {
      this.adjudication =  [];
    }
    this.adjudication.push(newValue);
  }

  public getAdjudication(): ExplanationOfBenefitAdjudication[] | undefined {
      return this.adjudication;
  }

  public addDetail(newValue: ExplanationOfBenefitDetail1) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.detail) !== 'undefined') {
         delete this.detail;
      }
      return;
    }
    
    if (typeof(this.detail) === 'undefined') {
      this.detail =  [];
    }
    this.detail.push(newValue);
  }

  public getDetail(): ExplanationOfBenefitDetail1[] | undefined {
      return this.detail;
  }


}


