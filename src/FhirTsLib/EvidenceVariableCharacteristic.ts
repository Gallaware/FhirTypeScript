import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_DESCRIPTION, REGEX_DEFINITIONCANONICAL, REGEX_PARTICIPANTEFFECTIVEDATETIME } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, DataRequirement, Duration, Element, Expression, Extension, Period, Reference, Timing, TriggerDefinition, UsageContext } from './FhirType';
import { EvidenceVariableCharacteristicGroupMeasure_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion,
 * recommendation) is about.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/EvidenceVariable_Characteristic
 */
export class EvidenceVariableCharacteristic {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   definitionReference?: Reference;

  /**
   * Define members of the evidence element using Codes (such as condition, medication, or observation),
   * Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as
   * Diabetes diagnosis onset in the last year).
   * Field access restricted because there are specific valid values.
   */
  protected definitionCanonical?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _definitionCanonical?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   definitionCodeableConcept?: CodeableConcept;

  /**
   * A expression that is evaluated in a specified context and returns a value. The context of use of
   * the expression must specify the context in which the expression is evaluated, and how the result
   * of the expression is used.
   */
  @Type(() => Expression)
   definitionExpression?: Expression;

  /**
   * Describes a required data item for evaluation in terms of the type of data, and optional code or
   * date-based filters of the data.
   */
  @Type(() => DataRequirement)
   definitionDataRequirement?: DataRequirement;

  /**
   * A description of a triggering event. Triggering events can be named events, data events, or
   * periodic, as determined by the type element.
   */
  @Type(() => TriggerDefinition)
   definitionTriggerDefinition?: TriggerDefinition;

  /**
   * Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => UsageContext)
  protected usageContext?: UsageContext[];

  /**
   * Value of "true" or "false"
   */
   exclude?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _exclude?: Element;

  /**
   * Indicates what effective period the study covers.
   * Field access restricted because there are specific valid values.
   */
  protected participantEffectiveDateTime?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _participantEffectiveDateTime?: Element;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   participantEffectivePeriod?: Period;

  /**
   * A length of time.
   */
  @Type(() => Duration)
   participantEffectiveDuration?: Duration;

  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things
   * are planned, expected or requested to occur. The most common usage is in dosage instructions for
   * medications. They are also used when planning care of various kinds, and may be used for reporting
   * the schedule to which past regular activities were carried out.
   */
  @Type(() => Timing)
   participantEffectiveTiming?: Timing;

  /**
   * A length of time.
   */
  @Type(() => Duration)
   timeFromStart?: Duration;

  /**
   * Indicates how elements are aggregated within the study effective period.
   * Field access restricted because there are specific valid values.
   */
  protected groupMeasure?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _groupMeasure?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDefinitionCanonical(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.definitionCanonical) !== 'undefined') {
         delete this.definitionCanonical;
      }
      return;
    }
    
    if (REGEX_DEFINITIONCANONICAL.test(newValue)) {
      this.definitionCanonical = newValue
    } else {
      throw new Error("Invalid value pattern for definitionCanonical of " + newValue);
    }
  }
  
  public getDefinitionCanonicalPattern(): string {
    return REGEX_DEFINITIONCANONICAL.source;
  }
  

  public getDefinitionCanonical(): string | undefined {
      return this.definitionCanonical;
  }

  public addUsageContext(newValue: UsageContext) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.usageContext) !== 'undefined') {
         delete this.usageContext;
      }
      return;
    }
    
    if (typeof(this.usageContext) === 'undefined') {
      this.usageContext =  [];
    }
    this.usageContext.push(newValue);
  }

  public getUsageContext(): UsageContext[] | undefined {
      return this.usageContext;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setParticipantEffectiveDateTime(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.participantEffectiveDateTime) !== 'undefined') {
         delete this.participantEffectiveDateTime;
      }
      return;
    }
    
    if (REGEX_PARTICIPANTEFFECTIVEDATETIME.test(newValue)) {
      this.participantEffectiveDateTime = newValue
    } else {
      throw new Error("Invalid value pattern for participantEffectiveDateTime of " + newValue);
    }
  }
  
  public getParticipantEffectiveDateTimePattern(): string {
    return REGEX_PARTICIPANTEFFECTIVEDATETIME.source;
  }
  

  public getParticipantEffectiveDateTime(): string | undefined {
      return this.participantEffectiveDateTime;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setGroupMeasure(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.groupMeasure) !== 'undefined') {
         delete this.groupMeasure;
      }
      return;
    }
    
    const idx = getValidValueIdx(EvidenceVariableCharacteristicGroupMeasure_list_ValidValues, newValue);
    if (idx >= 0) {
      this.groupMeasure = EvidenceVariableCharacteristicGroupMeasure_list_ValidValues[idx];
    } else {
      throw new Error("Unknown groupMeasure of " + newValue);
    }
  }
  
  public getEvidenceVariableCharacteristicGroupMeasureValidValues(): string[] {
    return EvidenceVariableCharacteristicGroupMeasure_list_ValidValues;
  }
  

  public getGroupMeasure(): string | undefined {
      return this.groupMeasure;
  }


}


