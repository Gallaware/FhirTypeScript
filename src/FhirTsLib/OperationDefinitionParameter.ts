import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_NAME_001, REGEX_MAX, REGEX_DOCUMENTATION, REGEX_TYPE } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, OperationDefinitionBinding, OperationDefinitionReferencedFrom } from './index';
import { OperationDefinitionParameterUse_list_ValidValues, OperationDefinitionParameterSearchType_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using
 * the search interaction).
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/OperationDefinition_Parameter
 */
export class OperationDefinitionParameter {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * Whether this is an input or an output parameter.
   * Field access restricted because there are specific valid values.
   */
  protected use?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _use?: Element;

  /**
   * A whole number
   */
   min?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _min?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected max?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _max?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected documentation?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _documentation?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * Used when the type is "Reference" or "canonical", and identifies a profile structure or
   * implementation Guide that applies to the target of the reference this parameter refers to. If any
   * profiles are specified, then the content must conform to at least one of them. The URL can be a
   * local reference - to a contained StructureDefinition, or a reference to another
   * StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is
   * specified, the target resource SHALL conform to at least one profile defined in the implementation
   * guide.
   * Field access restricted because there are specific valid values.
   */
  protected targetProfile?: string[];

  /**
   * How the parameter is understood as a search parameter. This is only used if the parameter type is
   * 'string'.
   * Field access restricted because there are specific valid values.
   */
  protected searchType?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _searchType?: Element;

  /**
   * A formal computable definition of an operation (on the RESTful interface) or a named query (using
   * the search interaction).
   */
  @Type(() => OperationDefinitionBinding)
   binding?: OperationDefinitionBinding;

  /**
   * Identifies other resource parameters within the operation invocation that are expected to resolve
   * to this resource.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => OperationDefinitionReferencedFrom)
  protected referencedFrom?: OperationDefinitionReferencedFrom[];

  /**
   * The parts of a nested Parameter.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => OperationDefinitionParameter)
  protected part?: OperationDefinitionParameter[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME_001.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME_001.source;
  }
  
  /**
  * Gets the current value of field name.
  * @returns the value  or undefined
  */
  public getName(): string | undefined {
      return this.name;
  }

  /**
  * Gets the current value of field name if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getNameOrElse(defaultValue: string): string {
      if (this.name == undefined || this.name == null ) { return defaultValue; }
      return this.name;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setUse(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.use) !== 'undefined') {
         delete this.use;
      }
      return;
    }
    
    const idx = getValidValueIdx(OperationDefinitionParameterUse_list_ValidValues, newValue);
    if (idx >= 0) {
      this.use = OperationDefinitionParameterUse_list_ValidValues[idx];
    } else {
      throw new Error("Unknown use of " + newValue);
    }
  }
  
  public getOperationDefinitionParameterUseValidValues(): string[] {
    return OperationDefinitionParameterUse_list_ValidValues;
  }
  
  /**
  * Gets the current value of field use.
  * @returns the value  or undefined
  */
  public getUse(): string | undefined {
      return this.use;
  }

  /**
  * Gets the current value of field use if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getUseOrElse(defaultValue: string): string {
      if (this.use == undefined || this.use == null ) { return defaultValue; }
      return this.use;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setMax(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.max) !== 'undefined') {
         delete this.max;
      }
      return;
    }
    
    if (REGEX_MAX.test(newValue)) {
      this.max = newValue
    } else {
      throw new Error("Invalid value pattern for max of " + newValue);
    }
  }
  
  public getMaxPattern(): string {
    return REGEX_MAX.source;
  }
  
  /**
  * Gets the current value of field max.
  * @returns the value  or undefined
  */
  public getMax(): string | undefined {
      return this.max;
  }

  /**
  * Gets the current value of field max if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getMaxOrElse(defaultValue: string): string {
      if (this.max == undefined || this.max == null ) { return defaultValue; }
      return this.max;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDocumentation(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.documentation) !== 'undefined') {
         delete this.documentation;
      }
      return;
    }
    
    if (REGEX_DOCUMENTATION.test(newValue)) {
      this.documentation = newValue
    } else {
      throw new Error("Invalid value pattern for documentation of " + newValue);
    }
  }
  
  public getDocumentationPattern(): string {
    return REGEX_DOCUMENTATION.source;
  }
  
  /**
  * Gets the current value of field documentation.
  * @returns the value  or undefined
  */
  public getDocumentation(): string | undefined {
      return this.documentation;
  }

  /**
  * Gets the current value of field documentation if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDocumentationOrElse(defaultValue: string): string {
      if (this.documentation == undefined || this.documentation == null ) { return defaultValue; }
      return this.documentation;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    if (REGEX_TYPE.test(newValue)) {
      this.type = newValue
    } else {
      throw new Error("Invalid value pattern for type of " + newValue);
    }
  }
  
  public getTypePattern(): string {
    return REGEX_TYPE.source;
  }
  
  /**
  * Gets the current value of field type.
  * @returns the value  or undefined
  */
  public getType(): string | undefined {
      return this.type;
  }

  /**
  * Gets the current value of field type if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getTypeOrElse(defaultValue: string): string {
      if (this.type == undefined || this.type == null ) { return defaultValue; }
      return this.type;
  }

  public addTargetProfile(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.targetProfile) !== 'undefined') {
         delete this.targetProfile;
      }
      return;
    }
    
    if (typeof(this.targetProfile) === 'undefined') {
      this.targetProfile =  [];
    }
    this.targetProfile.push(newValue);
  }
  /**
  * Removes all elements from the array targetProfile, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTargetProfileAll(): string[] {
    if (typeof(this.targetProfile) !== 'undefined') {
       const oldArray = this.targetProfile;
       delete this.targetProfile;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array targetProfile, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTargetProfileBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.targetProfile) !== 'undefined') {
       return this.targetProfile.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field targetProfile.
  * @returns the value  or undefined
  */
  public getTargetProfile(): string[] | undefined {
      return this.targetProfile;
  }

  /**
  * Gets the current value of field targetProfile if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getTargetProfileOrElse(defaultValue: string[]): string[] {
      if (this.targetProfile == undefined || this.targetProfile == null ) { return defaultValue; }
      return this.targetProfile;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setSearchType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.searchType) !== 'undefined') {
         delete this.searchType;
      }
      return;
    }
    
    const idx = getValidValueIdx(OperationDefinitionParameterSearchType_list_ValidValues, newValue);
    if (idx >= 0) {
      this.searchType = OperationDefinitionParameterSearchType_list_ValidValues[idx];
    } else {
      throw new Error("Unknown searchType of " + newValue);
    }
  }
  
  public getOperationDefinitionParameterSearchTypeValidValues(): string[] {
    return OperationDefinitionParameterSearchType_list_ValidValues;
  }
  
  /**
  * Gets the current value of field searchType.
  * @returns the value  or undefined
  */
  public getSearchType(): string | undefined {
      return this.searchType;
  }

  /**
  * Gets the current value of field searchType if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getSearchTypeOrElse(defaultValue: string): string {
      if (this.searchType == undefined || this.searchType == null ) { return defaultValue; }
      return this.searchType;
  }

  public addReferencedFrom(newValue: OperationDefinitionReferencedFrom) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.referencedFrom) !== 'undefined') {
         delete this.referencedFrom;
      }
      return;
    }
    
    if (typeof(this.referencedFrom) === 'undefined') {
      this.referencedFrom =  [];
    }
    this.referencedFrom.push(newValue);
  }
  /**
  * Removes all elements from the array referencedFrom, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReferencedFromAll(): OperationDefinitionReferencedFrom[] {
    if (typeof(this.referencedFrom) !== 'undefined') {
       const oldArray = this.referencedFrom;
       delete this.referencedFrom;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array referencedFrom, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReferencedFromBySplice(start: number, deleteCount?: number): OperationDefinitionReferencedFrom[] {
    if (typeof(this.referencedFrom) !== 'undefined') {
       return this.referencedFrom.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field referencedFrom.
  * @returns the value  or undefined
  */
  public getReferencedFrom(): OperationDefinitionReferencedFrom[] | undefined {
      return this.referencedFrom;
  }

  /**
  * Gets the current value of field referencedFrom if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getReferencedFromOrElse(defaultValue: OperationDefinitionReferencedFrom[]): OperationDefinitionReferencedFrom[] {
      if (this.referencedFrom == undefined || this.referencedFrom == null ) { return defaultValue; }
      return this.referencedFrom;
  }

  public addPart(newValue: OperationDefinitionParameter) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.part) !== 'undefined') {
         delete this.part;
      }
      return;
    }
    
    if (typeof(this.part) === 'undefined') {
      this.part =  [];
    }
    this.part.push(newValue);
  }
  /**
  * Removes all elements from the array part, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePartAll(): OperationDefinitionParameter[] {
    if (typeof(this.part) !== 'undefined') {
       const oldArray = this.part;
       delete this.part;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array part, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePartBySplice(start: number, deleteCount?: number): OperationDefinitionParameter[] {
    if (typeof(this.part) !== 'undefined') {
       return this.part.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field part.
  * @returns the value  or undefined
  */
  public getPart(): OperationDefinitionParameter[] | undefined {
      return this.part;
  }

  /**
  * Gets the current value of field part if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getPartOrElse(defaultValue: OperationDefinitionParameter[]): OperationDefinitionParameter[] {
      if (this.part == undefined || this.part == null ) { return defaultValue; }
      return this.part;
  }


}


