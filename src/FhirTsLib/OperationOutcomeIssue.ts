import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_DIAGNOSTICS } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Element, Extension } from './FhirType';
import { OperationOutcomeIssueSeverity_list_ValidValues, OperationOutcomeIssueCode_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A collection of error, warning, or information messages that result from a system action.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/OperationOutcome_Issue
 */
export class OperationOutcomeIssue {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Indicates whether the issue indicates a variation from successful processing.
   * Field access restricted because there are specific valid values.
   */
  protected severity?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _severity?: Element;

  /**
   * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most
   * applicable code from the IssueType value set, and may additional provide its own code for the
   * error in the details element.
   * Field access restricted because there are specific valid values.
   */
  protected code?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _code?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   details?: CodeableConcept;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected diagnostics?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _diagnostics?: Element;

  /**
   * This element is deprecated because it is XML specific. It is replaced by issue.expression, which is
   * format independent, and simpler to parse.
   * 
   * For resource issues, this will be a simple XPath limited to element names, repetition indicators
   * and the default child accessor that identifies one of the elements in the resource that caused
   * this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
   * Field access restricted because there are specific valid values.
   */
  protected location?: string[];

  /**
   * Extensions for location
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _location?: Element[];

  /**
   * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators
   * and the default child accessor that identifies one of the elements in the resource that caused this
   * issue to be raised.
   * Field access restricted because there are specific valid values.
   */
  protected expression?: string[];

  /**
   * Extensions for expression
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _expression?: Element[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setSeverity(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.severity) !== 'undefined') {
         delete this.severity;
      }
      return;
    }
    
    const idx = getValidValueIdx(OperationOutcomeIssueSeverity_list_ValidValues, newValue);
    if (idx >= 0) {
      this.severity = OperationOutcomeIssueSeverity_list_ValidValues[idx];
    } else {
      throw new Error("Unknown severity of " + newValue);
    }
  }
  
  public getOperationOutcomeIssueSeverityValidValues(): string[] {
    return OperationOutcomeIssueSeverity_list_ValidValues;
  }
  

  public getSeverity(): string | undefined {
      return this.severity;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setCode(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.code) !== 'undefined') {
         delete this.code;
      }
      return;
    }
    
    const idx = getValidValueIdx(OperationOutcomeIssueCode_list_ValidValues, newValue);
    if (idx >= 0) {
      this.code = OperationOutcomeIssueCode_list_ValidValues[idx];
    } else {
      throw new Error("Unknown code of " + newValue);
    }
  }
  
  public getOperationOutcomeIssueCodeValidValues(): string[] {
    return OperationOutcomeIssueCode_list_ValidValues;
  }
  

  public getCode(): string | undefined {
      return this.code;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDiagnostics(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.diagnostics) !== 'undefined') {
         delete this.diagnostics;
      }
      return;
    }
    
    if (REGEX_DIAGNOSTICS.test(newValue)) {
      this.diagnostics = newValue
    } else {
      throw new Error("Invalid value pattern for diagnostics of " + newValue);
    }
  }
  
  public getDiagnosticsPattern(): string {
    return REGEX_DIAGNOSTICS.source;
  }
  

  public getDiagnostics(): string | undefined {
      return this.diagnostics;
  }

  public addLocation(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.location) !== 'undefined') {
         delete this.location;
      }
      return;
    }
    
    if (typeof(this.location) === 'undefined') {
      this.location =  [];
    }
    this.location.push(newValue);
  }

  public getLocation(): string[] | undefined {
      return this.location;
  }

  public add_location(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._location) !== 'undefined') {
         delete this._location;
      }
      return;
    }
    
    if (typeof(this._location) === 'undefined') {
      this._location =  [];
    }
    this._location.push(newValue);
  }

  public get_location(): Element[] | undefined {
      return this._location;
  }

  public addExpression(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.expression) !== 'undefined') {
         delete this.expression;
      }
      return;
    }
    
    if (typeof(this.expression) === 'undefined') {
      this.expression =  [];
    }
    this.expression.push(newValue);
  }

  public getExpression(): string[] | undefined {
      return this.expression;
  }

  public add_expression(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._expression) !== 'undefined') {
         delete this._expression;
      }
      return;
    }
    
    if (typeof(this._expression) === 'undefined') {
      this._expression =  [];
    }
    this._expression.push(newValue);
  }

  public get_expression(): Element[] | undefined {
      return this._expression;
  }


}


