import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Duration, Element, Extension, Period, Range } from './FhirType';
import { TimingRepeatDurationUnit_list_ValidValues, TimingRepeatPeriodUnit_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things
 * are planned, expected or requested to occur. The most common usage is in dosage instructions for
 * medications. They are also used when planning care of various kinds, and may be used for reporting
 * the schedule to which past regular activities were carried out.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Timing_Repeat
 */
export class TimingRepeat {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A length of time.
   */
  @Type(() => Duration)
   boundsDuration?: Duration;

  /**
   * A set of ordered Quantities defined by a low and high limit.
   */
  @Type(() => Range)
   boundsRange?: Range;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   boundsPeriod?: Period;

  /**
   * An integer with a value that is positive (e.g. >0)
   */
   count?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _count?: Element;

  /**
   * An integer with a value that is positive (e.g. >0)
   */
   countMax?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _countMax?: Element;

  /**
   * A rational number with implicit precision
   */
   duration?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _duration?: Element;

  /**
   * A rational number with implicit precision
   */
   durationMax?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _durationMax?: Element;

  /**
   * The units of time for the duration, in UCUM units.
   * Field access restricted because there are specific valid values.
   */
  protected durationUnit?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _durationUnit?: Element;

  /**
   * An integer with a value that is positive (e.g. >0)
   */
   frequency?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _frequency?: Element;

  /**
   * An integer with a value that is positive (e.g. >0)
   */
   frequencyMax?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _frequencyMax?: Element;

  /**
   * A rational number with implicit precision
   */
   period?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _period?: Element;

  /**
   * A rational number with implicit precision
   */
   periodMax?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _periodMax?: Element;

  /**
   * The units of time for the period in UCUM units.
   * Field access restricted because there are specific valid values.
   */
  protected periodUnit?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _periodUnit?: Element;

  /**
   * If one or more days of week is provided, then the action happens only on the specified day(s).
   * Field access restricted because there are specific valid values.
   */
  protected dayOfWeek?: string[];

  /**
   * Extensions for dayOfWeek
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _dayOfWeek?: Element[];

  /**
   * Specified time of day for action to take place.
   * Field access restricted because there are specific valid values.
   */
  protected timeOfDay?: string[];

  /**
   * Extensions for timeOfDay
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _timeOfDay?: Element[];

  /**
   * An approximate time period during the day, potentially linked to an event of daily living that
   * indicates when the action should occur.
   * Field access restricted because there are specific valid values.
   */
  protected when?: string[];

  /**
   * Extensions for when
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _when?: Element[];

  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
   offset?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _offset?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setDurationUnit(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.durationUnit) !== 'undefined') {
         delete this.durationUnit;
      }
      return;
    }
    
    const idx = getValidValueIdx(TimingRepeatDurationUnit_list_ValidValues, newValue);
    if (idx >= 0) {
      this.durationUnit = TimingRepeatDurationUnit_list_ValidValues[idx];
    } else {
      throw new Error("Unknown durationUnit of " + newValue);
    }
  }
  
  public getTimingRepeatDurationUnitValidValues(): string[] {
    return TimingRepeatDurationUnit_list_ValidValues;
  }
  

  public getDurationUnit(): string | undefined {
      return this.durationUnit;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setPeriodUnit(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.periodUnit) !== 'undefined') {
         delete this.periodUnit;
      }
      return;
    }
    
    const idx = getValidValueIdx(TimingRepeatPeriodUnit_list_ValidValues, newValue);
    if (idx >= 0) {
      this.periodUnit = TimingRepeatPeriodUnit_list_ValidValues[idx];
    } else {
      throw new Error("Unknown periodUnit of " + newValue);
    }
  }
  
  public getTimingRepeatPeriodUnitValidValues(): string[] {
    return TimingRepeatPeriodUnit_list_ValidValues;
  }
  

  public getPeriodUnit(): string | undefined {
      return this.periodUnit;
  }

  public addDayOfWeek(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.dayOfWeek) !== 'undefined') {
         delete this.dayOfWeek;
      }
      return;
    }
    
    if (typeof(this.dayOfWeek) === 'undefined') {
      this.dayOfWeek =  [];
    }
    this.dayOfWeek.push(newValue);
  }

  public getDayOfWeek(): string[] | undefined {
      return this.dayOfWeek;
  }

  public add_dayOfWeek(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._dayOfWeek) !== 'undefined') {
         delete this._dayOfWeek;
      }
      return;
    }
    
    if (typeof(this._dayOfWeek) === 'undefined') {
      this._dayOfWeek =  [];
    }
    this._dayOfWeek.push(newValue);
  }

  public get_dayOfWeek(): Element[] | undefined {
      return this._dayOfWeek;
  }

  public addTimeOfDay(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.timeOfDay) !== 'undefined') {
         delete this.timeOfDay;
      }
      return;
    }
    
    if (typeof(this.timeOfDay) === 'undefined') {
      this.timeOfDay =  [];
    }
    this.timeOfDay.push(newValue);
  }

  public getTimeOfDay(): string[] | undefined {
      return this.timeOfDay;
  }

  public add_timeOfDay(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._timeOfDay) !== 'undefined') {
         delete this._timeOfDay;
      }
      return;
    }
    
    if (typeof(this._timeOfDay) === 'undefined') {
      this._timeOfDay =  [];
    }
    this._timeOfDay.push(newValue);
  }

  public get_timeOfDay(): Element[] | undefined {
      return this._timeOfDay;
  }

  public addWhen(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.when) !== 'undefined') {
         delete this.when;
      }
      return;
    }
    
    if (typeof(this.when) === 'undefined') {
      this.when =  [];
    }
    this.when.push(newValue);
  }

  public getWhen(): string[] | undefined {
      return this.when;
  }

  public add_when(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._when) !== 'undefined') {
         delete this._when;
      }
      return;
    }
    
    if (typeof(this._when) === 'undefined') {
      this._when =  [];
    }
    this._when.push(newValue);
  }

  public get_when(): Element[] | undefined {
      return this._when;
  }


}


