import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_NAME_000, REGEX_EXTENDS, REGEX_DOCUMENTATION } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, StructureMapInput, StructureMapRule } from './index';
import { StructureMapGroupTypeMode_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A Map of relationships between 2 structures that can be used to transform data.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/StructureMap_Group
 */
export class StructureMapGroup {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected extends?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _extends?: Element;

  /**
   * If this is the default rule set to apply for the source type or this combination of types.
   * Field access restricted because there are specific valid values.
   */
  protected typeMode?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _typeMode?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected documentation?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _documentation?: Element;

  /**
   * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => StructureMapInput)
  protected input?: StructureMapInput[];

  /**
   * Transform Rule from source to target.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => StructureMapRule)
  protected rule?: StructureMapRule[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME_000.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME_000.source;
  }
  
  /**
  * Gets the current value of field name.
  * @returns the value  or undefined
  */
  public getName(): string | undefined {
      return this.name;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setExtends(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extends) !== 'undefined') {
         delete this.extends;
      }
      return;
    }
    
    if (REGEX_EXTENDS.test(newValue)) {
      this.extends = newValue
    } else {
      throw new Error("Invalid value pattern for extends of " + newValue);
    }
  }
  
  public getExtendsPattern(): string {
    return REGEX_EXTENDS.source;
  }
  
  /**
  * Gets the current value of field extends.
  * @returns the value  or undefined
  */
  public getExtends(): string | undefined {
      return this.extends;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setTypeMode(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.typeMode) !== 'undefined') {
         delete this.typeMode;
      }
      return;
    }
    
    const idx = getValidValueIdx(StructureMapGroupTypeMode_list_ValidValues, newValue);
    if (idx >= 0) {
      this.typeMode = StructureMapGroupTypeMode_list_ValidValues[idx];
    } else {
      throw new Error("Unknown typeMode of " + newValue);
    }
  }
  
  public getStructureMapGroupTypeModeValidValues(): string[] {
    return StructureMapGroupTypeMode_list_ValidValues;
  }
  
  /**
  * Gets the current value of field typeMode.
  * @returns the value  or undefined
  */
  public getTypeMode(): string | undefined {
      return this.typeMode;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDocumentation(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.documentation) !== 'undefined') {
         delete this.documentation;
      }
      return;
    }
    
    if (REGEX_DOCUMENTATION.test(newValue)) {
      this.documentation = newValue
    } else {
      throw new Error("Invalid value pattern for documentation of " + newValue);
    }
  }
  
  public getDocumentationPattern(): string {
    return REGEX_DOCUMENTATION.source;
  }
  
  /**
  * Gets the current value of field documentation.
  * @returns the value  or undefined
  */
  public getDocumentation(): string | undefined {
      return this.documentation;
  }

  public addInput(newValue: StructureMapInput) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.input) !== 'undefined') {
         delete this.input;
      }
      return;
    }
    
    if (typeof(this.input) === 'undefined') {
      this.input =  [];
    }
    this.input.push(newValue);
  }
  /**
  * Removes all elements from the array input, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteInputAll(): StructureMapInput[] {
    if (typeof(this.input) !== 'undefined') {
       const oldArray = this.input;
       delete this.input;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array input, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteInputBySplice(start: number, deleteCount?: number): StructureMapInput[] {
    if (typeof(this.input) !== 'undefined') {
       return this.input.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field input.
  * @returns the value  or undefined
  */
  public getInput(): StructureMapInput[] | undefined {
      return this.input;
  }

  public addRule(newValue: StructureMapRule) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.rule) !== 'undefined') {
         delete this.rule;
      }
      return;
    }
    
    if (typeof(this.rule) === 'undefined') {
      this.rule =  [];
    }
    this.rule.push(newValue);
  }
  /**
  * Removes all elements from the array rule, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteRuleAll(): StructureMapRule[] {
    if (typeof(this.rule) !== 'undefined') {
       const oldArray = this.rule;
       delete this.rule;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array rule, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteRuleBySplice(start: number, deleteCount?: number): StructureMapRule[] {
    if (typeof(this.rule) !== 'undefined') {
       return this.rule.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field rule.
  * @returns the value  or undefined
  */
  public getRule(): StructureMapRule[] | undefined {
      return this.rule;
  }


}


