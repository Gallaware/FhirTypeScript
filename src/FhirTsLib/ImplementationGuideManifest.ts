import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_RENDERING } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, ImplementationGuidePage1, ImplementationGuideResource1 } from './index';



/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically
 * through the use of FHIR resources. This resource is used to gather all the parts of an
 * implementation guide into a logical whole and to publish a computable definition of all the parts.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ImplementationGuide_Manifest
 */
export class ImplementationGuideManifest {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A URI that is a literal reference
   * Field access restricted because there are specific valid values.
   */
  protected rendering?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _rendering?: Element;

  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure
   * definition, capability statements etc.) are obvious candidates for inclusion, but any kind of
   * resource can be included as an example resource.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImplementationGuideResource1)
  protected resource?: ImplementationGuideResource1[];

  /**
   * Information about a page within the IG.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImplementationGuidePage1)
  protected page?: ImplementationGuidePage1[];

  /**
   * Indicates a relative path to an image that exists within the IG.
   * Field access restricted because there are specific valid values.
   */
  protected image?: string[];

  /**
   * Extensions for image
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _image?: Element[];

  /**
   * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g.
   * zip, jar and similar files that could be the target of a hyperlink in a derived IG.
   * Field access restricted because there are specific valid values.
   */
  protected other?: string[];

  /**
   * Extensions for other
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _other?: Element[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setRendering(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.rendering) !== 'undefined') {
         delete this.rendering;
      }
      return;
    }
    
    if (REGEX_RENDERING.test(newValue)) {
      this.rendering = newValue
    } else {
      throw new Error("Invalid value pattern for rendering of " + newValue);
    }
  }
  
  public getRenderingPattern(): string {
    return REGEX_RENDERING.source;
  }
  
  /**
  * Gets the current value of field rendering.
  * @returns the value  or undefined
  */
  public getRendering(): string | undefined {
      return this.rendering;
  }

  /**
  * Gets the current value of field rendering if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getRenderingOrElse(defaultValue: string): string {
      if (this.rendering == undefined || this.rendering == null ) { return defaultValue; }
      return this.rendering;
  }

  public addResource(newValue: ImplementationGuideResource1) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.resource) !== 'undefined') {
         delete this.resource;
      }
      return;
    }
    
    if (typeof(this.resource) === 'undefined') {
      this.resource =  [];
    }
    this.resource.push(newValue);
  }
  /**
  * Removes all elements from the array resource, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteResourceAll(): ImplementationGuideResource1[] {
    if (typeof(this.resource) !== 'undefined') {
       const oldArray = this.resource;
       delete this.resource;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array resource, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteResourceBySplice(start: number, deleteCount?: number): ImplementationGuideResource1[] {
    if (typeof(this.resource) !== 'undefined') {
       return this.resource.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field resource.
  * @returns the value  or undefined
  */
  public getResource(): ImplementationGuideResource1[] | undefined {
      return this.resource;
  }

  /**
  * Gets the current value of field resource if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getResourceOrElse(defaultValue: ImplementationGuideResource1[]): ImplementationGuideResource1[] {
      if (this.resource == undefined || this.resource == null ) { return defaultValue; }
      return this.resource;
  }

  public addPage(newValue: ImplementationGuidePage1) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.page) !== 'undefined') {
         delete this.page;
      }
      return;
    }
    
    if (typeof(this.page) === 'undefined') {
      this.page =  [];
    }
    this.page.push(newValue);
  }
  /**
  * Removes all elements from the array page, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePageAll(): ImplementationGuidePage1[] {
    if (typeof(this.page) !== 'undefined') {
       const oldArray = this.page;
       delete this.page;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array page, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePageBySplice(start: number, deleteCount?: number): ImplementationGuidePage1[] {
    if (typeof(this.page) !== 'undefined') {
       return this.page.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field page.
  * @returns the value  or undefined
  */
  public getPage(): ImplementationGuidePage1[] | undefined {
      return this.page;
  }

  /**
  * Gets the current value of field page if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getPageOrElse(defaultValue: ImplementationGuidePage1[]): ImplementationGuidePage1[] {
      if (this.page == undefined || this.page == null ) { return defaultValue; }
      return this.page;
  }

  public addImage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.image) !== 'undefined') {
         delete this.image;
      }
      return;
    }
    
    if (typeof(this.image) === 'undefined') {
      this.image =  [];
    }
    this.image.push(newValue);
  }
  /**
  * Removes all elements from the array image, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteImageAll(): string[] {
    if (typeof(this.image) !== 'undefined') {
       const oldArray = this.image;
       delete this.image;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array image, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteImageBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.image) !== 'undefined') {
       return this.image.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field image.
  * @returns the value  or undefined
  */
  public getImage(): string[] | undefined {
      return this.image;
  }

  /**
  * Gets the current value of field image if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getImageOrElse(defaultValue: string[]): string[] {
      if (this.image == undefined || this.image == null ) { return defaultValue; }
      return this.image;
  }

  public add_image(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._image) !== 'undefined') {
         delete this._image;
      }
      return;
    }
    
    if (typeof(this._image) === 'undefined') {
      this._image =  [];
    }
    this._image.push(newValue);
  }
  /**
  * Removes all elements from the array _image, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_imageAll(): Element[] {
    if (typeof(this._image) !== 'undefined') {
       const oldArray = this._image;
       delete this._image;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _image, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_imageBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._image) !== 'undefined') {
       return this._image.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _image.
  * @returns the value  or undefined
  */
  public get_image(): Element[] | undefined {
      return this._image;
  }

  /**
  * Gets the current value of field _image if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_imageOrElse(defaultValue: Element[]): Element[] {
      if (this._image == undefined || this._image == null ) { return defaultValue; }
      return this._image;
  }

  public addOther(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.other) !== 'undefined') {
         delete this.other;
      }
      return;
    }
    
    if (typeof(this.other) === 'undefined') {
      this.other =  [];
    }
    this.other.push(newValue);
  }
  /**
  * Removes all elements from the array other, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteOtherAll(): string[] {
    if (typeof(this.other) !== 'undefined') {
       const oldArray = this.other;
       delete this.other;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array other, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteOtherBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.other) !== 'undefined') {
       return this.other.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field other.
  * @returns the value  or undefined
  */
  public getOther(): string[] | undefined {
      return this.other;
  }

  /**
  * Gets the current value of field other if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getOtherOrElse(defaultValue: string[]): string[] {
      if (this.other == undefined || this.other == null ) { return defaultValue; }
      return this.other;
  }

  public add_other(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._other) !== 'undefined') {
         delete this._other;
      }
      return;
    }
    
    if (typeof(this._other) === 'undefined') {
      this._other =  [];
    }
    this._other.push(newValue);
  }
  /**
  * Removes all elements from the array _other, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_otherAll(): Element[] {
    if (typeof(this._other) !== 'undefined') {
       const oldArray = this._other;
       delete this._other;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _other, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_otherBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._other) !== 'undefined') {
       return this._other.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _other.
  * @returns the value  or undefined
  */
  public get_other(): Element[] | undefined {
      return this._other;
  }

  /**
  * Gets the current value of field _other if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_otherOrElse(defaultValue: Element[]): Element[] {
      if (this._other == undefined || this._other == null ) { return defaultValue; }
      return this._other;
  }


}


