import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID_000, REGEX_IMPLICITRULES, REGEX_LANGUAGE, REGEX_URL, REGEX_VERSION, REGEX_NAME, REGEX_TITLE, REGEX_SUBTITLE, REGEX_DATE, REGEX_PUBLISHER, REGEX_DESCRIPTION, REGEX_PURPOSE, REGEX_USAGE, REGEX_COPYRIGHT, REGEX_APPROVALDATE, REGEX_LASTREVIEWDATE, REGEX_DISCLAIMER, REGEX_RISKADJUSTMENT, REGEX_RATEAGGREGATION, REGEX_RATIONALE, REGEX_CLINICALRECOMMENDATIONSTATEMENT, REGEX_GUIDANCE } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, ContactDetail, Element, Extension, Identifier, MeasureGroup, MeasureSupplementalData, Meta, Narrative, Period, Reference, RelatedArtifact, ResourceList, Account, ActivityDefinition, AdverseEvent, AllergyIntolerance, Appointment, AppointmentResponse, AuditEvent, Basic, Binary, BiologicallyDerivedProduct, BodyStructure, Bundle, CapabilityStatement, CarePlan, CareTeam, CatalogEntry, ChargeItem, ChargeItemDefinition, Claim, ClaimResponse, ClinicalImpression, CodeSystem, Communication, CommunicationRequest, CompartmentDefinition, Composition, ConceptMap, Condition, Consent, Contract, Coverage, CoverageEligibilityRequest, CoverageEligibilityResponse, DetectedIssue, Device, DeviceDefinition, DeviceMetric, DeviceRequest, DeviceUseStatement, DiagnosticReport, DocumentManifest, DocumentReference, EffectEvidenceSynthesis, Encounter, Endpoint, EnrollmentRequest, EnrollmentResponse, EpisodeOfCare, EventDefinition, Evidence, EvidenceVariable, ExampleScenario, ExplanationOfBenefit, FamilyMemberHistory, Flag, Goal, GraphDefinition, Group, GuidanceResponse, HealthcareService, ImagingStudy, Immunization, ImmunizationEvaluation, ImmunizationRecommendation, ImplementationGuide, InsurancePlan, Invoice, Library, Linkage, List, Location, MeasureReport, Media, Medication, MedicationAdministration, MedicationDispense, MedicationKnowledge, MedicationRequest, MedicationStatement, MedicinalProduct, MedicinalProductAuthorization, MedicinalProductContraindication, MedicinalProductIndication, MedicinalProductIngredient, MedicinalProductInteraction, MedicinalProductManufactured, MedicinalProductPackaged, MedicinalProductPharmaceutical, MedicinalProductUndesirableEffect, MessageDefinition, MessageHeader, MolecularSequence, NamingSystem, NutritionOrder, Observation, ObservationDefinition, OperationDefinition, OperationOutcome, Organization, OrganizationAffiliation, Parameters, Patient, PaymentNotice, PaymentReconciliation, Person, PlanDefinition, Practitioner, PractitionerRole, Procedure, Provenance, Questionnaire, QuestionnaireResponse, RelatedPerson, RequestGroup, ResearchDefinition, ResearchElementDefinition, ResearchStudy, ResearchSubject, RiskAssessment, RiskEvidenceSynthesis, Schedule, SearchParameter, ServiceRequest, Slot, Specimen, SpecimenDefinition, StructureDefinition, StructureMap, Subscription, Substance, SubstanceNucleicAcid, SubstancePolymer, SubstanceProtein, SubstanceReferenceInformation, SubstanceSourceMaterial, SubstanceSpecification, SupplyDelivery, SupplyRequest, Task, TerminologyCapabilities, TestReport, TestScript, ValueSet, VerificationResult, VisionPrescription, UsageContext } from './index';
import { MeasureStatus_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * The Measure resource provides the definition of a quality measure.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Measure
 */
export class Measure {
  /**
   * This is a Measure resource
   */
     resourceType = "Measure";

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * The metadata about a resource. This is content in the resource that is maintained by the
   * infrastructure. Changes to the content might not always be associated with version changes to the
   * resource.
   */
  @Type(() => Meta)
   meta?: Meta;

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected implicitRules?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _implicitRules?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected language?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _language?: Element;

  /**
   * A human-readable summary of the resource conveying the essential clinical and business information
   * for the resource.
   */
  @Type(() => Narrative)
   text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the resource that contains them -
   * they cannot be identified independently, and nor can they have their own independent transaction
   * scope.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ResourceList, {
          discriminator: {
    property: 'resourceType',
    subTypes: [
      	{ value: Account, name: 'Account'},
      	{ value: ActivityDefinition, name: 'ActivityDefinition'},
      	{ value: AdverseEvent, name: 'AdverseEvent'},
      	{ value: AllergyIntolerance, name: 'AllergyIntolerance'},
      	{ value: Appointment, name: 'Appointment'},
      	{ value: AppointmentResponse, name: 'AppointmentResponse'},
      	{ value: AuditEvent, name: 'AuditEvent'},
      	{ value: Basic, name: 'Basic'},
      	{ value: Binary, name: 'Binary'},
      	{ value: BiologicallyDerivedProduct, name: 'BiologicallyDerivedProduct'},
      	{ value: BodyStructure, name: 'BodyStructure'},
      	{ value: Bundle, name: 'Bundle'},
      	{ value: CapabilityStatement, name: 'CapabilityStatement'},
      	{ value: CarePlan, name: 'CarePlan'},
      	{ value: CareTeam, name: 'CareTeam'},
      	{ value: CatalogEntry, name: 'CatalogEntry'},
      	{ value: ChargeItem, name: 'ChargeItem'},
      	{ value: ChargeItemDefinition, name: 'ChargeItemDefinition'},
      	{ value: Claim, name: 'Claim'},
      	{ value: ClaimResponse, name: 'ClaimResponse'},
      	{ value: ClinicalImpression, name: 'ClinicalImpression'},
      	{ value: CodeSystem, name: 'CodeSystem'},
      	{ value: Communication, name: 'Communication'},
      	{ value: CommunicationRequest, name: 'CommunicationRequest'},
      	{ value: CompartmentDefinition, name: 'CompartmentDefinition'},
      	{ value: Composition, name: 'Composition'},
      	{ value: ConceptMap, name: 'ConceptMap'},
      	{ value: Condition, name: 'Condition'},
      	{ value: Consent, name: 'Consent'},
      	{ value: Contract, name: 'Contract'},
      	{ value: Coverage, name: 'Coverage'},
      	{ value: CoverageEligibilityRequest, name: 'CoverageEligibilityRequest'},
      	{ value: CoverageEligibilityResponse, name: 'CoverageEligibilityResponse'},
      	{ value: DetectedIssue, name: 'DetectedIssue'},
      	{ value: Device, name: 'Device'},
      	{ value: DeviceDefinition, name: 'DeviceDefinition'},
      	{ value: DeviceMetric, name: 'DeviceMetric'},
      	{ value: DeviceRequest, name: 'DeviceRequest'},
      	{ value: DeviceUseStatement, name: 'DeviceUseStatement'},
      	{ value: DiagnosticReport, name: 'DiagnosticReport'},
      	{ value: DocumentManifest, name: 'DocumentManifest'},
      	{ value: DocumentReference, name: 'DocumentReference'},
      	{ value: EffectEvidenceSynthesis, name: 'EffectEvidenceSynthesis'},
      	{ value: Encounter, name: 'Encounter'},
      	{ value: Endpoint, name: 'Endpoint'},
      	{ value: EnrollmentRequest, name: 'EnrollmentRequest'},
      	{ value: EnrollmentResponse, name: 'EnrollmentResponse'},
      	{ value: EpisodeOfCare, name: 'EpisodeOfCare'},
      	{ value: EventDefinition, name: 'EventDefinition'},
      	{ value: Evidence, name: 'Evidence'},
      	{ value: EvidenceVariable, name: 'EvidenceVariable'},
      	{ value: ExampleScenario, name: 'ExampleScenario'},
      	{ value: ExplanationOfBenefit, name: 'ExplanationOfBenefit'},
      	{ value: FamilyMemberHistory, name: 'FamilyMemberHistory'},
      	{ value: Flag, name: 'Flag'},
      	{ value: Goal, name: 'Goal'},
      	{ value: GraphDefinition, name: 'GraphDefinition'},
      	{ value: Group, name: 'Group'},
      	{ value: GuidanceResponse, name: 'GuidanceResponse'},
      	{ value: HealthcareService, name: 'HealthcareService'},
      	{ value: ImagingStudy, name: 'ImagingStudy'},
      	{ value: Immunization, name: 'Immunization'},
      	{ value: ImmunizationEvaluation, name: 'ImmunizationEvaluation'},
      	{ value: ImmunizationRecommendation, name: 'ImmunizationRecommendation'},
      	{ value: ImplementationGuide, name: 'ImplementationGuide'},
      	{ value: InsurancePlan, name: 'InsurancePlan'},
      	{ value: Invoice, name: 'Invoice'},
      	{ value: Library, name: 'Library'},
      	{ value: Linkage, name: 'Linkage'},
      	{ value: List, name: 'List'},
      	{ value: Location, name: 'Location'},
      	{ value: Measure, name: 'Measure'},
      	{ value: MeasureReport, name: 'MeasureReport'},
      	{ value: Media, name: 'Media'},
      	{ value: Medication, name: 'Medication'},
      	{ value: MedicationAdministration, name: 'MedicationAdministration'},
      	{ value: MedicationDispense, name: 'MedicationDispense'},
      	{ value: MedicationKnowledge, name: 'MedicationKnowledge'},
      	{ value: MedicationRequest, name: 'MedicationRequest'},
      	{ value: MedicationStatement, name: 'MedicationStatement'},
      	{ value: MedicinalProduct, name: 'MedicinalProduct'},
      	{ value: MedicinalProductAuthorization, name: 'MedicinalProductAuthorization'},
      	{ value: MedicinalProductContraindication, name: 'MedicinalProductContraindication'},
      	{ value: MedicinalProductIndication, name: 'MedicinalProductIndication'},
      	{ value: MedicinalProductIngredient, name: 'MedicinalProductIngredient'},
      	{ value: MedicinalProductInteraction, name: 'MedicinalProductInteraction'},
      	{ value: MedicinalProductManufactured, name: 'MedicinalProductManufactured'},
      	{ value: MedicinalProductPackaged, name: 'MedicinalProductPackaged'},
      	{ value: MedicinalProductPharmaceutical, name: 'MedicinalProductPharmaceutical'},
      	{ value: MedicinalProductUndesirableEffect, name: 'MedicinalProductUndesirableEffect'},
      	{ value: MessageDefinition, name: 'MessageDefinition'},
      	{ value: MessageHeader, name: 'MessageHeader'},
      	{ value: MolecularSequence, name: 'MolecularSequence'},
      	{ value: NamingSystem, name: 'NamingSystem'},
      	{ value: NutritionOrder, name: 'NutritionOrder'},
      	{ value: Observation, name: 'Observation'},
      	{ value: ObservationDefinition, name: 'ObservationDefinition'},
      	{ value: OperationDefinition, name: 'OperationDefinition'},
      	{ value: OperationOutcome, name: 'OperationOutcome'},
      	{ value: Organization, name: 'Organization'},
      	{ value: OrganizationAffiliation, name: 'OrganizationAffiliation'},
      	{ value: Parameters, name: 'Parameters'},
      	{ value: Patient, name: 'Patient'},
      	{ value: PaymentNotice, name: 'PaymentNotice'},
      	{ value: PaymentReconciliation, name: 'PaymentReconciliation'},
      	{ value: Person, name: 'Person'},
      	{ value: PlanDefinition, name: 'PlanDefinition'},
      	{ value: Practitioner, name: 'Practitioner'},
      	{ value: PractitionerRole, name: 'PractitionerRole'},
      	{ value: Procedure, name: 'Procedure'},
      	{ value: Provenance, name: 'Provenance'},
      	{ value: Questionnaire, name: 'Questionnaire'},
      	{ value: QuestionnaireResponse, name: 'QuestionnaireResponse'},
      	{ value: RelatedPerson, name: 'RelatedPerson'},
      	{ value: RequestGroup, name: 'RequestGroup'},
      	{ value: ResearchDefinition, name: 'ResearchDefinition'},
      	{ value: ResearchElementDefinition, name: 'ResearchElementDefinition'},
      	{ value: ResearchStudy, name: 'ResearchStudy'},
      	{ value: ResearchSubject, name: 'ResearchSubject'},
      	{ value: RiskAssessment, name: 'RiskAssessment'},
      	{ value: RiskEvidenceSynthesis, name: 'RiskEvidenceSynthesis'},
      	{ value: Schedule, name: 'Schedule'},
      	{ value: SearchParameter, name: 'SearchParameter'},
      	{ value: ServiceRequest, name: 'ServiceRequest'},
      	{ value: Slot, name: 'Slot'},
      	{ value: Specimen, name: 'Specimen'},
      	{ value: SpecimenDefinition, name: 'SpecimenDefinition'},
      	{ value: StructureDefinition, name: 'StructureDefinition'},
      	{ value: StructureMap, name: 'StructureMap'},
      	{ value: Subscription, name: 'Subscription'},
      	{ value: Substance, name: 'Substance'},
      	{ value: SubstanceNucleicAcid, name: 'SubstanceNucleicAcid'},
      	{ value: SubstancePolymer, name: 'SubstancePolymer'},
      	{ value: SubstanceProtein, name: 'SubstanceProtein'},
      	{ value: SubstanceReferenceInformation, name: 'SubstanceReferenceInformation'},
      	{ value: SubstanceSourceMaterial, name: 'SubstanceSourceMaterial'},
      	{ value: SubstanceSpecification, name: 'SubstanceSpecification'},
      	{ value: SupplyDelivery, name: 'SupplyDelivery'},
      	{ value: SupplyRequest, name: 'SupplyRequest'},
      	{ value: Task, name: 'Task'},
      	{ value: TerminologyCapabilities, name: 'TerminologyCapabilities'},
      	{ value: TestReport, name: 'TestReport'},
      	{ value: TestScript, name: 'TestScript'},
      	{ value: ValueSet, name: 'ValueSet'},
      	{ value: VerificationResult, name: 'VerificationResult'},
      	{ value: VisionPrescription, name: 'VisionPrescription'}
      ],
    }
  })
  protected contained?: ResourceList[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource and that modifies the understanding of the element that contains it and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met as part of the definition of
   * the extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected url?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _url?: Element;

  /**
   * A formal identifier that is used to identify this measure when it is represented in other formats,
   * or referenced in a specification, model, design or an instance.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected version?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _version?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected title?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _title?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected subtitle?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _subtitle?: Element;

  /**
   * The status of this measure. Enables tracking the life-cycle of the content.
   * Field access restricted because there are specific valid values.
   */
  protected status?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _status?: Element;

  /**
   * Value of "true" or "false"
   */
   experimental?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _experimental?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   subjectCodeableConcept?: CodeableConcept;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   subjectReference?: Reference;

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected date?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _date?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected publisher?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _publisher?: Element;

  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContactDetail)
  protected contact?: ContactDetail[];

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These
   * contexts may be general categories (gender, age, ...) or may be references to specific programs
   * (insurance plans, studies, ...) and may be used to assist with indexing and searching for
   * appropriate measure instances.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => UsageContext)
  protected useContext?: UsageContext[];

  /**
   * A legal or geographic region in which the measure is intended to be used.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected jurisdiction?: CodeableConcept[];

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected purpose?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _purpose?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected usage?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _usage?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected copyright?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _copyright?: Element;

  /**
   * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a
   * union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected approvalDate?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _approvalDate?: Element;

  /**
   * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a
   * union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected lastReviewDate?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _lastReviewDate?: Element;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   effectivePeriod?: Period;

  /**
   * Descriptive topics related to the content of the measure. Topics provide a high-level
   * categorization grouping types of measures that can be useful for filtering and searching.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected topic?: CodeableConcept[];

  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContactDetail)
  protected author?: ContactDetail[];

  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContactDetail)
  protected editor?: ContactDetail[];

  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContactDetail)
  protected reviewer?: ContactDetail[];

  /**
   * An individual or organization responsible for officially endorsing the content for use in some
   * setting.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContactDetail)
  protected endorser?: ContactDetail[];

  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => RelatedArtifact)
  protected relatedArtifact?: RelatedArtifact[];

  /**
   * A reference to a Library resource containing the formal logic used by the measure.
   * Field access restricted because there are specific valid values.
   */
  protected library?: string[];

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected disclaimer?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _disclaimer?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   scoring?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   compositeScoring?: CodeableConcept;

  /**
   * Indicates whether the measure is used to examine a process, an outcome over time, a
   * patient-reported outcome, or a structure measure such as utilization.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected type?: CodeableConcept[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected riskAdjustment?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _riskAdjustment?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected rateAggregation?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _rateAggregation?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected rationale?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _rationale?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected clinicalRecommendationStatement?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _clinicalRecommendationStatement?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   improvementNotation?: CodeableConcept;

  /**
   * Provides a description of an individual term used within the measure.
   * Field access restricted because there are specific valid values.
   */
  protected definition?: string[];

  /**
   * Extensions for definition
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _definition?: Element[];

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected guidance?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _guidance?: Element;

  /**
   * A group of population criteria for the measure.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => MeasureGroup)
  protected group?: MeasureGroup[];

  /**
   * The supplemental data criteria for the measure report, specified as either the name of a valid CQL
   * expression within a referenced library, or a valid FHIR Resource Path.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => MeasureSupplementalData)
  protected supplementalData?: MeasureSupplementalData[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID_000.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID_000.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setImplicitRules(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.implicitRules) !== 'undefined') {
         delete this.implicitRules;
      }
      return;
    }
    
    if (REGEX_IMPLICITRULES.test(newValue)) {
      this.implicitRules = newValue
    } else {
      throw new Error("Invalid value pattern for implicitRules of " + newValue);
    }
  }
  
  public getImplicitRulesPattern(): string {
    return REGEX_IMPLICITRULES.source;
  }
  
  /**
  * Gets the current value of field implicitRules.
  * @returns the value  or undefined
  */
  public getImplicitRules(): string | undefined {
      return this.implicitRules;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLanguage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.language) !== 'undefined') {
         delete this.language;
      }
      return;
    }
    
    if (REGEX_LANGUAGE.test(newValue)) {
      this.language = newValue
    } else {
      throw new Error("Invalid value pattern for language of " + newValue);
    }
  }
  
  public getLanguagePattern(): string {
    return REGEX_LANGUAGE.source;
  }
  
  /**
  * Gets the current value of field language.
  * @returns the value  or undefined
  */
  public getLanguage(): string | undefined {
      return this.language;
  }

  public addContained(newValue: ResourceList) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contained) !== 'undefined') {
         delete this.contained;
      }
      return;
    }
    
    if (typeof(this.contained) === 'undefined') {
      this.contained =  [];
    }
    this.contained.push(newValue);
  }
  /**
  * Removes all elements from the array contained, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteContainedAll(): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       const oldArray = this.contained;
       delete this.contained;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array contained, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteContainedBySplice(start: number, deleteCount?: number): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       return this.contained.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field contained.
  * @returns the value  or undefined
  */
  public getContained(): ResourceList[] | undefined {
      return this.contained;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setUrl(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.url) !== 'undefined') {
         delete this.url;
      }
      return;
    }
    
    if (REGEX_URL.test(newValue)) {
      this.url = newValue
    } else {
      throw new Error("Invalid value pattern for url of " + newValue);
    }
  }
  
  public getUrlPattern(): string {
    return REGEX_URL.source;
  }
  
  /**
  * Gets the current value of field url.
  * @returns the value  or undefined
  */
  public getUrl(): string | undefined {
      return this.url;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }
  /**
  * Removes all elements from the array identifier, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteIdentifierAll(): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       const oldArray = this.identifier;
       delete this.identifier;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array identifier, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteIdentifierBySplice(start: number, deleteCount?: number): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       return this.identifier.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field identifier.
  * @returns the value  or undefined
  */
  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setVersion(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.version) !== 'undefined') {
         delete this.version;
      }
      return;
    }
    
    if (REGEX_VERSION.test(newValue)) {
      this.version = newValue
    } else {
      throw new Error("Invalid value pattern for version of " + newValue);
    }
  }
  
  public getVersionPattern(): string {
    return REGEX_VERSION.source;
  }
  
  /**
  * Gets the current value of field version.
  * @returns the value  or undefined
  */
  public getVersion(): string | undefined {
      return this.version;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME.source;
  }
  
  /**
  * Gets the current value of field name.
  * @returns the value  or undefined
  */
  public getName(): string | undefined {
      return this.name;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTitle(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.title) !== 'undefined') {
         delete this.title;
      }
      return;
    }
    
    if (REGEX_TITLE.test(newValue)) {
      this.title = newValue
    } else {
      throw new Error("Invalid value pattern for title of " + newValue);
    }
  }
  
  public getTitlePattern(): string {
    return REGEX_TITLE.source;
  }
  
  /**
  * Gets the current value of field title.
  * @returns the value  or undefined
  */
  public getTitle(): string | undefined {
      return this.title;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setSubtitle(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.subtitle) !== 'undefined') {
         delete this.subtitle;
      }
      return;
    }
    
    if (REGEX_SUBTITLE.test(newValue)) {
      this.subtitle = newValue
    } else {
      throw new Error("Invalid value pattern for subtitle of " + newValue);
    }
  }
  
  public getSubtitlePattern(): string {
    return REGEX_SUBTITLE.source;
  }
  
  /**
  * Gets the current value of field subtitle.
  * @returns the value  or undefined
  */
  public getSubtitle(): string | undefined {
      return this.subtitle;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setStatus(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.status) !== 'undefined') {
         delete this.status;
      }
      return;
    }
    
    const idx = getValidValueIdx(MeasureStatus_list_ValidValues, newValue);
    if (idx >= 0) {
      this.status = MeasureStatus_list_ValidValues[idx];
    } else {
      throw new Error("Unknown status of " + newValue);
    }
  }
  
  public getMeasureStatusValidValues(): string[] {
    return MeasureStatus_list_ValidValues;
  }
  
  /**
  * Gets the current value of field status.
  * @returns the value  or undefined
  */
  public getStatus(): string | undefined {
      return this.status;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDate(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.date) !== 'undefined') {
         delete this.date;
      }
      return;
    }
    
    if (REGEX_DATE.test(newValue)) {
      this.date = newValue
    } else {
      throw new Error("Invalid value pattern for date of " + newValue);
    }
  }
  
  public getDatePattern(): string {
    return REGEX_DATE.source;
  }
  
  /**
  * Gets the current value of field date.
  * @returns the value  or undefined
  */
  public getDate(): string | undefined {
      return this.date;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPublisher(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.publisher) !== 'undefined') {
         delete this.publisher;
      }
      return;
    }
    
    if (REGEX_PUBLISHER.test(newValue)) {
      this.publisher = newValue
    } else {
      throw new Error("Invalid value pattern for publisher of " + newValue);
    }
  }
  
  public getPublisherPattern(): string {
    return REGEX_PUBLISHER.source;
  }
  
  /**
  * Gets the current value of field publisher.
  * @returns the value  or undefined
  */
  public getPublisher(): string | undefined {
      return this.publisher;
  }

  public addContact(newValue: ContactDetail) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contact) !== 'undefined') {
         delete this.contact;
      }
      return;
    }
    
    if (typeof(this.contact) === 'undefined') {
      this.contact =  [];
    }
    this.contact.push(newValue);
  }
  /**
  * Removes all elements from the array contact, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteContactAll(): ContactDetail[] {
    if (typeof(this.contact) !== 'undefined') {
       const oldArray = this.contact;
       delete this.contact;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array contact, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteContactBySplice(start: number, deleteCount?: number): ContactDetail[] {
    if (typeof(this.contact) !== 'undefined') {
       return this.contact.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field contact.
  * @returns the value  or undefined
  */
  public getContact(): ContactDetail[] | undefined {
      return this.contact;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  
  /**
  * Gets the current value of field description.
  * @returns the value  or undefined
  */
  public getDescription(): string | undefined {
      return this.description;
  }

  public addUseContext(newValue: UsageContext) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.useContext) !== 'undefined') {
         delete this.useContext;
      }
      return;
    }
    
    if (typeof(this.useContext) === 'undefined') {
      this.useContext =  [];
    }
    this.useContext.push(newValue);
  }
  /**
  * Removes all elements from the array useContext, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteUseContextAll(): UsageContext[] {
    if (typeof(this.useContext) !== 'undefined') {
       const oldArray = this.useContext;
       delete this.useContext;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array useContext, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteUseContextBySplice(start: number, deleteCount?: number): UsageContext[] {
    if (typeof(this.useContext) !== 'undefined') {
       return this.useContext.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field useContext.
  * @returns the value  or undefined
  */
  public getUseContext(): UsageContext[] | undefined {
      return this.useContext;
  }

  public addJurisdiction(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.jurisdiction) !== 'undefined') {
         delete this.jurisdiction;
      }
      return;
    }
    
    if (typeof(this.jurisdiction) === 'undefined') {
      this.jurisdiction =  [];
    }
    this.jurisdiction.push(newValue);
  }
  /**
  * Removes all elements from the array jurisdiction, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteJurisdictionAll(): CodeableConcept[] {
    if (typeof(this.jurisdiction) !== 'undefined') {
       const oldArray = this.jurisdiction;
       delete this.jurisdiction;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array jurisdiction, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteJurisdictionBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.jurisdiction) !== 'undefined') {
       return this.jurisdiction.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field jurisdiction.
  * @returns the value  or undefined
  */
  public getJurisdiction(): CodeableConcept[] | undefined {
      return this.jurisdiction;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPurpose(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.purpose) !== 'undefined') {
         delete this.purpose;
      }
      return;
    }
    
    if (REGEX_PURPOSE.test(newValue)) {
      this.purpose = newValue
    } else {
      throw new Error("Invalid value pattern for purpose of " + newValue);
    }
  }
  
  public getPurposePattern(): string {
    return REGEX_PURPOSE.source;
  }
  
  /**
  * Gets the current value of field purpose.
  * @returns the value  or undefined
  */
  public getPurpose(): string | undefined {
      return this.purpose;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setUsage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.usage) !== 'undefined') {
         delete this.usage;
      }
      return;
    }
    
    if (REGEX_USAGE.test(newValue)) {
      this.usage = newValue
    } else {
      throw new Error("Invalid value pattern for usage of " + newValue);
    }
  }
  
  public getUsagePattern(): string {
    return REGEX_USAGE.source;
  }
  
  /**
  * Gets the current value of field usage.
  * @returns the value  or undefined
  */
  public getUsage(): string | undefined {
      return this.usage;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCopyright(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.copyright) !== 'undefined') {
         delete this.copyright;
      }
      return;
    }
    
    if (REGEX_COPYRIGHT.test(newValue)) {
      this.copyright = newValue
    } else {
      throw new Error("Invalid value pattern for copyright of " + newValue);
    }
  }
  
  public getCopyrightPattern(): string {
    return REGEX_COPYRIGHT.source;
  }
  
  /**
  * Gets the current value of field copyright.
  * @returns the value  or undefined
  */
  public getCopyright(): string | undefined {
      return this.copyright;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setApprovalDate(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.approvalDate) !== 'undefined') {
         delete this.approvalDate;
      }
      return;
    }
    
    if (REGEX_APPROVALDATE.test(newValue)) {
      this.approvalDate = newValue
    } else {
      throw new Error("Invalid value pattern for approvalDate of " + newValue);
    }
  }
  
  public getApprovalDatePattern(): string {
    return REGEX_APPROVALDATE.source;
  }
  
  /**
  * Gets the current value of field approvalDate.
  * @returns the value  or undefined
  */
  public getApprovalDate(): string | undefined {
      return this.approvalDate;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLastReviewDate(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.lastReviewDate) !== 'undefined') {
         delete this.lastReviewDate;
      }
      return;
    }
    
    if (REGEX_LASTREVIEWDATE.test(newValue)) {
      this.lastReviewDate = newValue
    } else {
      throw new Error("Invalid value pattern for lastReviewDate of " + newValue);
    }
  }
  
  public getLastReviewDatePattern(): string {
    return REGEX_LASTREVIEWDATE.source;
  }
  
  /**
  * Gets the current value of field lastReviewDate.
  * @returns the value  or undefined
  */
  public getLastReviewDate(): string | undefined {
      return this.lastReviewDate;
  }

  public addTopic(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.topic) !== 'undefined') {
         delete this.topic;
      }
      return;
    }
    
    if (typeof(this.topic) === 'undefined') {
      this.topic =  [];
    }
    this.topic.push(newValue);
  }
  /**
  * Removes all elements from the array topic, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTopicAll(): CodeableConcept[] {
    if (typeof(this.topic) !== 'undefined') {
       const oldArray = this.topic;
       delete this.topic;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array topic, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTopicBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.topic) !== 'undefined') {
       return this.topic.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field topic.
  * @returns the value  or undefined
  */
  public getTopic(): CodeableConcept[] | undefined {
      return this.topic;
  }

  public addAuthor(newValue: ContactDetail) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.author) !== 'undefined') {
         delete this.author;
      }
      return;
    }
    
    if (typeof(this.author) === 'undefined') {
      this.author =  [];
    }
    this.author.push(newValue);
  }
  /**
  * Removes all elements from the array author, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteAuthorAll(): ContactDetail[] {
    if (typeof(this.author) !== 'undefined') {
       const oldArray = this.author;
       delete this.author;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array author, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteAuthorBySplice(start: number, deleteCount?: number): ContactDetail[] {
    if (typeof(this.author) !== 'undefined') {
       return this.author.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field author.
  * @returns the value  or undefined
  */
  public getAuthor(): ContactDetail[] | undefined {
      return this.author;
  }

  public addEditor(newValue: ContactDetail) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.editor) !== 'undefined') {
         delete this.editor;
      }
      return;
    }
    
    if (typeof(this.editor) === 'undefined') {
      this.editor =  [];
    }
    this.editor.push(newValue);
  }
  /**
  * Removes all elements from the array editor, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteEditorAll(): ContactDetail[] {
    if (typeof(this.editor) !== 'undefined') {
       const oldArray = this.editor;
       delete this.editor;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array editor, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteEditorBySplice(start: number, deleteCount?: number): ContactDetail[] {
    if (typeof(this.editor) !== 'undefined') {
       return this.editor.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field editor.
  * @returns the value  or undefined
  */
  public getEditor(): ContactDetail[] | undefined {
      return this.editor;
  }

  public addReviewer(newValue: ContactDetail) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.reviewer) !== 'undefined') {
         delete this.reviewer;
      }
      return;
    }
    
    if (typeof(this.reviewer) === 'undefined') {
      this.reviewer =  [];
    }
    this.reviewer.push(newValue);
  }
  /**
  * Removes all elements from the array reviewer, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReviewerAll(): ContactDetail[] {
    if (typeof(this.reviewer) !== 'undefined') {
       const oldArray = this.reviewer;
       delete this.reviewer;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array reviewer, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReviewerBySplice(start: number, deleteCount?: number): ContactDetail[] {
    if (typeof(this.reviewer) !== 'undefined') {
       return this.reviewer.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field reviewer.
  * @returns the value  or undefined
  */
  public getReviewer(): ContactDetail[] | undefined {
      return this.reviewer;
  }

  public addEndorser(newValue: ContactDetail) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.endorser) !== 'undefined') {
         delete this.endorser;
      }
      return;
    }
    
    if (typeof(this.endorser) === 'undefined') {
      this.endorser =  [];
    }
    this.endorser.push(newValue);
  }
  /**
  * Removes all elements from the array endorser, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteEndorserAll(): ContactDetail[] {
    if (typeof(this.endorser) !== 'undefined') {
       const oldArray = this.endorser;
       delete this.endorser;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array endorser, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteEndorserBySplice(start: number, deleteCount?: number): ContactDetail[] {
    if (typeof(this.endorser) !== 'undefined') {
       return this.endorser.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field endorser.
  * @returns the value  or undefined
  */
  public getEndorser(): ContactDetail[] | undefined {
      return this.endorser;
  }

  public addRelatedArtifact(newValue: RelatedArtifact) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.relatedArtifact) !== 'undefined') {
         delete this.relatedArtifact;
      }
      return;
    }
    
    if (typeof(this.relatedArtifact) === 'undefined') {
      this.relatedArtifact =  [];
    }
    this.relatedArtifact.push(newValue);
  }
  /**
  * Removes all elements from the array relatedArtifact, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteRelatedArtifactAll(): RelatedArtifact[] {
    if (typeof(this.relatedArtifact) !== 'undefined') {
       const oldArray = this.relatedArtifact;
       delete this.relatedArtifact;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array relatedArtifact, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteRelatedArtifactBySplice(start: number, deleteCount?: number): RelatedArtifact[] {
    if (typeof(this.relatedArtifact) !== 'undefined') {
       return this.relatedArtifact.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field relatedArtifact.
  * @returns the value  or undefined
  */
  public getRelatedArtifact(): RelatedArtifact[] | undefined {
      return this.relatedArtifact;
  }

  public addLibrary(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.library) !== 'undefined') {
         delete this.library;
      }
      return;
    }
    
    if (typeof(this.library) === 'undefined') {
      this.library =  [];
    }
    this.library.push(newValue);
  }
  /**
  * Removes all elements from the array library, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteLibraryAll(): string[] {
    if (typeof(this.library) !== 'undefined') {
       const oldArray = this.library;
       delete this.library;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array library, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteLibraryBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.library) !== 'undefined') {
       return this.library.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field library.
  * @returns the value  or undefined
  */
  public getLibrary(): string[] | undefined {
      return this.library;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDisclaimer(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.disclaimer) !== 'undefined') {
         delete this.disclaimer;
      }
      return;
    }
    
    if (REGEX_DISCLAIMER.test(newValue)) {
      this.disclaimer = newValue
    } else {
      throw new Error("Invalid value pattern for disclaimer of " + newValue);
    }
  }
  
  public getDisclaimerPattern(): string {
    return REGEX_DISCLAIMER.source;
  }
  
  /**
  * Gets the current value of field disclaimer.
  * @returns the value  or undefined
  */
  public getDisclaimer(): string | undefined {
      return this.disclaimer;
  }

  public addType(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    if (typeof(this.type) === 'undefined') {
      this.type =  [];
    }
    this.type.push(newValue);
  }
  /**
  * Removes all elements from the array type, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTypeAll(): CodeableConcept[] {
    if (typeof(this.type) !== 'undefined') {
       const oldArray = this.type;
       delete this.type;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array type, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTypeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.type) !== 'undefined') {
       return this.type.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field type.
  * @returns the value  or undefined
  */
  public getType(): CodeableConcept[] | undefined {
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setRiskAdjustment(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.riskAdjustment) !== 'undefined') {
         delete this.riskAdjustment;
      }
      return;
    }
    
    if (REGEX_RISKADJUSTMENT.test(newValue)) {
      this.riskAdjustment = newValue
    } else {
      throw new Error("Invalid value pattern for riskAdjustment of " + newValue);
    }
  }
  
  public getRiskAdjustmentPattern(): string {
    return REGEX_RISKADJUSTMENT.source;
  }
  
  /**
  * Gets the current value of field riskAdjustment.
  * @returns the value  or undefined
  */
  public getRiskAdjustment(): string | undefined {
      return this.riskAdjustment;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setRateAggregation(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.rateAggregation) !== 'undefined') {
         delete this.rateAggregation;
      }
      return;
    }
    
    if (REGEX_RATEAGGREGATION.test(newValue)) {
      this.rateAggregation = newValue
    } else {
      throw new Error("Invalid value pattern for rateAggregation of " + newValue);
    }
  }
  
  public getRateAggregationPattern(): string {
    return REGEX_RATEAGGREGATION.source;
  }
  
  /**
  * Gets the current value of field rateAggregation.
  * @returns the value  or undefined
  */
  public getRateAggregation(): string | undefined {
      return this.rateAggregation;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setRationale(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.rationale) !== 'undefined') {
         delete this.rationale;
      }
      return;
    }
    
    if (REGEX_RATIONALE.test(newValue)) {
      this.rationale = newValue
    } else {
      throw new Error("Invalid value pattern for rationale of " + newValue);
    }
  }
  
  public getRationalePattern(): string {
    return REGEX_RATIONALE.source;
  }
  
  /**
  * Gets the current value of field rationale.
  * @returns the value  or undefined
  */
  public getRationale(): string | undefined {
      return this.rationale;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setClinicalRecommendationStatement(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.clinicalRecommendationStatement) !== 'undefined') {
         delete this.clinicalRecommendationStatement;
      }
      return;
    }
    
    if (REGEX_CLINICALRECOMMENDATIONSTATEMENT.test(newValue)) {
      this.clinicalRecommendationStatement = newValue
    } else {
      throw new Error("Invalid value pattern for clinicalRecommendationStatement of " + newValue);
    }
  }
  
  public getClinicalRecommendationStatementPattern(): string {
    return REGEX_CLINICALRECOMMENDATIONSTATEMENT.source;
  }
  
  /**
  * Gets the current value of field clinicalRecommendationStatement.
  * @returns the value  or undefined
  */
  public getClinicalRecommendationStatement(): string | undefined {
      return this.clinicalRecommendationStatement;
  }

  public addDefinition(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.definition) !== 'undefined') {
         delete this.definition;
      }
      return;
    }
    
    if (typeof(this.definition) === 'undefined') {
      this.definition =  [];
    }
    this.definition.push(newValue);
  }
  /**
  * Removes all elements from the array definition, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDefinitionAll(): string[] {
    if (typeof(this.definition) !== 'undefined') {
       const oldArray = this.definition;
       delete this.definition;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array definition, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDefinitionBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.definition) !== 'undefined') {
       return this.definition.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field definition.
  * @returns the value  or undefined
  */
  public getDefinition(): string[] | undefined {
      return this.definition;
  }

  public add_definition(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._definition) !== 'undefined') {
         delete this._definition;
      }
      return;
    }
    
    if (typeof(this._definition) === 'undefined') {
      this._definition =  [];
    }
    this._definition.push(newValue);
  }
  /**
  * Removes all elements from the array _definition, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_definitionAll(): Element[] {
    if (typeof(this._definition) !== 'undefined') {
       const oldArray = this._definition;
       delete this._definition;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _definition, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_definitionBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._definition) !== 'undefined') {
       return this._definition.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _definition.
  * @returns the value  or undefined
  */
  public get_definition(): Element[] | undefined {
      return this._definition;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setGuidance(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.guidance) !== 'undefined') {
         delete this.guidance;
      }
      return;
    }
    
    if (REGEX_GUIDANCE.test(newValue)) {
      this.guidance = newValue
    } else {
      throw new Error("Invalid value pattern for guidance of " + newValue);
    }
  }
  
  public getGuidancePattern(): string {
    return REGEX_GUIDANCE.source;
  }
  
  /**
  * Gets the current value of field guidance.
  * @returns the value  or undefined
  */
  public getGuidance(): string | undefined {
      return this.guidance;
  }

  public addGroup(newValue: MeasureGroup) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.group) !== 'undefined') {
         delete this.group;
      }
      return;
    }
    
    if (typeof(this.group) === 'undefined') {
      this.group =  [];
    }
    this.group.push(newValue);
  }
  /**
  * Removes all elements from the array group, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteGroupAll(): MeasureGroup[] {
    if (typeof(this.group) !== 'undefined') {
       const oldArray = this.group;
       delete this.group;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array group, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteGroupBySplice(start: number, deleteCount?: number): MeasureGroup[] {
    if (typeof(this.group) !== 'undefined') {
       return this.group.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field group.
  * @returns the value  or undefined
  */
  public getGroup(): MeasureGroup[] | undefined {
      return this.group;
  }

  public addSupplementalData(newValue: MeasureSupplementalData) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.supplementalData) !== 'undefined') {
         delete this.supplementalData;
      }
      return;
    }
    
    if (typeof(this.supplementalData) === 'undefined') {
      this.supplementalData =  [];
    }
    this.supplementalData.push(newValue);
  }
  /**
  * Removes all elements from the array supplementalData, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSupplementalDataAll(): MeasureSupplementalData[] {
    if (typeof(this.supplementalData) !== 'undefined') {
       const oldArray = this.supplementalData;
       delete this.supplementalData;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array supplementalData, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSupplementalDataBySplice(start: number, deleteCount?: number): MeasureSupplementalData[] {
    if (typeof(this.supplementalData) !== 'undefined') {
       return this.supplementalData.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field supplementalData.
  * @returns the value  or undefined
  */
  public getSupplementalData(): MeasureSupplementalData[] | undefined {
      return this.supplementalData;
  }


}


