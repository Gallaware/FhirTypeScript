import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Extension, Identifier, InsurancePlanGeneralCost, InsurancePlanSpecificCost, Reference } from './index';



/**
 * Details of a Health Insurance product/plan provided by an organization.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/InsurancePlan_Plan
 */
export class InsurancePlanPlan {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource
   * is updated and propagates from server to server.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   type?: CodeableConcept;

  /**
   * The geographic region in which a health insurance plan's benefits apply.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected coverageArea?: Reference[];

  /**
   * Reference to the network that providing the type of coverage.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected network?: Reference[];

  /**
   * Overall costs associated with the plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => InsurancePlanGeneralCost)
  protected generalCost?: InsurancePlanGeneralCost[];

  /**
   * Costs associated with the coverage provided by the product.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => InsurancePlanSpecificCost)
  protected specificCost?: InsurancePlanSpecificCost[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }
  /**
  * Removes all elements from the array identifier, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteIdentifierAll(): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       const oldArray = this.identifier;
       delete this.identifier;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array identifier, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteIdentifierBySplice(start: number, deleteCount?: number): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       return this.identifier.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field identifier.
  * @returns the value  or undefined
  */
  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  public addCoverageArea(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.coverageArea) !== 'undefined') {
         delete this.coverageArea;
      }
      return;
    }
    
    if (typeof(this.coverageArea) === 'undefined') {
      this.coverageArea =  [];
    }
    this.coverageArea.push(newValue);
  }
  /**
  * Removes all elements from the array coverageArea, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCoverageAreaAll(): Reference[] {
    if (typeof(this.coverageArea) !== 'undefined') {
       const oldArray = this.coverageArea;
       delete this.coverageArea;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array coverageArea, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCoverageAreaBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.coverageArea) !== 'undefined') {
       return this.coverageArea.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field coverageArea.
  * @returns the value  or undefined
  */
  public getCoverageArea(): Reference[] | undefined {
      return this.coverageArea;
  }

  public addNetwork(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.network) !== 'undefined') {
         delete this.network;
      }
      return;
    }
    
    if (typeof(this.network) === 'undefined') {
      this.network =  [];
    }
    this.network.push(newValue);
  }
  /**
  * Removes all elements from the array network, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNetworkAll(): Reference[] {
    if (typeof(this.network) !== 'undefined') {
       const oldArray = this.network;
       delete this.network;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array network, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNetworkBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.network) !== 'undefined') {
       return this.network.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field network.
  * @returns the value  or undefined
  */
  public getNetwork(): Reference[] | undefined {
      return this.network;
  }

  public addGeneralCost(newValue: InsurancePlanGeneralCost) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.generalCost) !== 'undefined') {
         delete this.generalCost;
      }
      return;
    }
    
    if (typeof(this.generalCost) === 'undefined') {
      this.generalCost =  [];
    }
    this.generalCost.push(newValue);
  }
  /**
  * Removes all elements from the array generalCost, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteGeneralCostAll(): InsurancePlanGeneralCost[] {
    if (typeof(this.generalCost) !== 'undefined') {
       const oldArray = this.generalCost;
       delete this.generalCost;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array generalCost, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteGeneralCostBySplice(start: number, deleteCount?: number): InsurancePlanGeneralCost[] {
    if (typeof(this.generalCost) !== 'undefined') {
       return this.generalCost.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field generalCost.
  * @returns the value  or undefined
  */
  public getGeneralCost(): InsurancePlanGeneralCost[] | undefined {
      return this.generalCost;
  }

  public addSpecificCost(newValue: InsurancePlanSpecificCost) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.specificCost) !== 'undefined') {
         delete this.specificCost;
      }
      return;
    }
    
    if (typeof(this.specificCost) === 'undefined') {
      this.specificCost =  [];
    }
    this.specificCost.push(newValue);
  }
  /**
  * Removes all elements from the array specificCost, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSpecificCostAll(): InsurancePlanSpecificCost[] {
    if (typeof(this.specificCost) !== 'undefined') {
       const oldArray = this.specificCost;
       delete this.specificCost;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array specificCost, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSpecificCostBySplice(start: number, deleteCount?: number): InsurancePlanSpecificCost[] {
    if (typeof(this.specificCost) !== 'undefined') {
       return this.specificCost.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field specificCost.
  * @returns the value  or undefined
  */
  public getSpecificCost(): InsurancePlanSpecificCost[] | undefined {
      return this.specificCost;
  }


}


