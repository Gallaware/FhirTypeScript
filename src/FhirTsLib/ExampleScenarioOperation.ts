import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_NUMBER, REGEX_TYPE_000, REGEX_NAME, REGEX_INITIATOR, REGEX_RECEIVER, REGEX_DESCRIPTION } from '../FhirTsLibValidation/FhirRegex';
import { Element, ExampleScenarioContainedInstance, Extension } from './FhirType';



/**
 * Example of workflow instance.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ExampleScenario_Operation
 */
export class ExampleScenarioOperation {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected number?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _number?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected initiator?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _initiator?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected receiver?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _receiver?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * Value of "true" or "false"
   */
   initiatorActive?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _initiatorActive?: Element;

  /**
   * Value of "true" or "false"
   */
   receiverActive?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _receiverActive?: Element;

  /**
   * Example of workflow instance.
   */
  @Type(() => ExampleScenarioContainedInstance)
   request?: ExampleScenarioContainedInstance;

  /**
   * Example of workflow instance.
   */
  @Type(() => ExampleScenarioContainedInstance)
   response?: ExampleScenarioContainedInstance;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setNumber(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.number) !== 'undefined') {
         delete this.number;
      }
      return;
    }
    
    if (REGEX_NUMBER.test(newValue)) {
      this.number = newValue
    } else {
      throw new Error("Invalid value pattern for number of " + newValue);
    }
  }
  
  public getNumberPattern(): string {
    return REGEX_NUMBER.source;
  }
  

  public getNumber(): string | undefined {
      return this.number;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    if (REGEX_TYPE_000.test(newValue)) {
      this.type = newValue
    } else {
      throw new Error("Invalid value pattern for type of " + newValue);
    }
  }
  
  public getTypePattern(): string {
    return REGEX_TYPE_000.source;
  }
  

  public getType(): string | undefined {
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME.source;
  }
  

  public getName(): string | undefined {
      return this.name;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setInitiator(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.initiator) !== 'undefined') {
         delete this.initiator;
      }
      return;
    }
    
    if (REGEX_INITIATOR.test(newValue)) {
      this.initiator = newValue
    } else {
      throw new Error("Invalid value pattern for initiator of " + newValue);
    }
  }
  
  public getInitiatorPattern(): string {
    return REGEX_INITIATOR.source;
  }
  

  public getInitiator(): string | undefined {
      return this.initiator;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setReceiver(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.receiver) !== 'undefined') {
         delete this.receiver;
      }
      return;
    }
    
    if (REGEX_RECEIVER.test(newValue)) {
      this.receiver = newValue
    } else {
      throw new Error("Invalid value pattern for receiver of " + newValue);
    }
  }
  
  public getReceiverPattern(): string {
    return REGEX_RECEIVER.source;
  }
  

  public getReceiver(): string | undefined {
      return this.receiver;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }


}


