import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension } from './index';



/**
 * Raw data describing a biological sequence.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/MolecularSequence_Roc
 */
export class MolecularSequenceRoc {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Invidual data point representing the GQ (genotype quality) score threshold.
   * Field access restricted because there are specific valid values.
   */
  protected score?: number[];

  /**
   * Extensions for score
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _score?: Element[];

  /**
   * The number of true positives if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected numTP?: number[];

  /**
   * Extensions for numTP
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _numTP?: Element[];

  /**
   * The number of false positives if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected numFP?: number[];

  /**
   * Extensions for numFP
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _numFP?: Element[];

  /**
   * The number of false negatives if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected numFN?: number[];

  /**
   * Extensions for numFN
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _numFN?: Element[];

  /**
   * Calculated precision if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected precision?: number[];

  /**
   * Extensions for precision
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _precision?: Element[];

  /**
   * Calculated sensitivity if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected sensitivity?: number[];

  /**
   * Extensions for sensitivity
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _sensitivity?: Element[];

  /**
   * Calculated fScore if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected fMeasure?: number[];

  /**
   * Extensions for fMeasure
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _fMeasure?: Element[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  public addScore(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.score) !== 'undefined') {
         delete this.score;
      }
      return;
    }
    
    if (typeof(this.score) === 'undefined') {
      this.score =  [];
    }
    this.score.push(newValue);
  }
  /**
  * Removes all elements from the array score, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteScoreAll(): number[] {
    if (typeof(this.score) !== 'undefined') {
       const oldArray = this.score;
       delete this.score;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array score, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteScoreBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.score) !== 'undefined') {
       return this.score.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field score.
  * @returns the value  or undefined
  */
  public getScore(): number[] | undefined {
      return this.score;
  }

  /**
  * Gets the current value of field score if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getScoreOrElse(defaultValue: number[]): number[] {
      if (this.score == undefined || this.score == null ) { return defaultValue; }
      return this.score;
  }

  public add_score(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._score) !== 'undefined') {
         delete this._score;
      }
      return;
    }
    
    if (typeof(this._score) === 'undefined') {
      this._score =  [];
    }
    this._score.push(newValue);
  }
  /**
  * Removes all elements from the array _score, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_scoreAll(): Element[] {
    if (typeof(this._score) !== 'undefined') {
       const oldArray = this._score;
       delete this._score;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _score, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_scoreBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._score) !== 'undefined') {
       return this._score.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _score.
  * @returns the value  or undefined
  */
  public get_score(): Element[] | undefined {
      return this._score;
  }

  /**
  * Gets the current value of field _score if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_scoreOrElse(defaultValue: Element[]): Element[] {
      if (this._score == undefined || this._score == null ) { return defaultValue; }
      return this._score;
  }

  public addNumTP(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.numTP) !== 'undefined') {
         delete this.numTP;
      }
      return;
    }
    
    if (typeof(this.numTP) === 'undefined') {
      this.numTP =  [];
    }
    this.numTP.push(newValue);
  }
  /**
  * Removes all elements from the array numTP, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNumTPAll(): number[] {
    if (typeof(this.numTP) !== 'undefined') {
       const oldArray = this.numTP;
       delete this.numTP;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array numTP, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNumTPBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.numTP) !== 'undefined') {
       return this.numTP.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field numTP.
  * @returns the value  or undefined
  */
  public getNumTP(): number[] | undefined {
      return this.numTP;
  }

  /**
  * Gets the current value of field numTP if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getNumTPOrElse(defaultValue: number[]): number[] {
      if (this.numTP == undefined || this.numTP == null ) { return defaultValue; }
      return this.numTP;
  }

  public add_numTP(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._numTP) !== 'undefined') {
         delete this._numTP;
      }
      return;
    }
    
    if (typeof(this._numTP) === 'undefined') {
      this._numTP =  [];
    }
    this._numTP.push(newValue);
  }
  /**
  * Removes all elements from the array _numTP, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_numTPAll(): Element[] {
    if (typeof(this._numTP) !== 'undefined') {
       const oldArray = this._numTP;
       delete this._numTP;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _numTP, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_numTPBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._numTP) !== 'undefined') {
       return this._numTP.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _numTP.
  * @returns the value  or undefined
  */
  public get_numTP(): Element[] | undefined {
      return this._numTP;
  }

  /**
  * Gets the current value of field _numTP if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_numTPOrElse(defaultValue: Element[]): Element[] {
      if (this._numTP == undefined || this._numTP == null ) { return defaultValue; }
      return this._numTP;
  }

  public addNumFP(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.numFP) !== 'undefined') {
         delete this.numFP;
      }
      return;
    }
    
    if (typeof(this.numFP) === 'undefined') {
      this.numFP =  [];
    }
    this.numFP.push(newValue);
  }
  /**
  * Removes all elements from the array numFP, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNumFPAll(): number[] {
    if (typeof(this.numFP) !== 'undefined') {
       const oldArray = this.numFP;
       delete this.numFP;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array numFP, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNumFPBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.numFP) !== 'undefined') {
       return this.numFP.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field numFP.
  * @returns the value  or undefined
  */
  public getNumFP(): number[] | undefined {
      return this.numFP;
  }

  /**
  * Gets the current value of field numFP if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getNumFPOrElse(defaultValue: number[]): number[] {
      if (this.numFP == undefined || this.numFP == null ) { return defaultValue; }
      return this.numFP;
  }

  public add_numFP(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._numFP) !== 'undefined') {
         delete this._numFP;
      }
      return;
    }
    
    if (typeof(this._numFP) === 'undefined') {
      this._numFP =  [];
    }
    this._numFP.push(newValue);
  }
  /**
  * Removes all elements from the array _numFP, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_numFPAll(): Element[] {
    if (typeof(this._numFP) !== 'undefined') {
       const oldArray = this._numFP;
       delete this._numFP;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _numFP, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_numFPBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._numFP) !== 'undefined') {
       return this._numFP.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _numFP.
  * @returns the value  or undefined
  */
  public get_numFP(): Element[] | undefined {
      return this._numFP;
  }

  /**
  * Gets the current value of field _numFP if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_numFPOrElse(defaultValue: Element[]): Element[] {
      if (this._numFP == undefined || this._numFP == null ) { return defaultValue; }
      return this._numFP;
  }

  public addNumFN(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.numFN) !== 'undefined') {
         delete this.numFN;
      }
      return;
    }
    
    if (typeof(this.numFN) === 'undefined') {
      this.numFN =  [];
    }
    this.numFN.push(newValue);
  }
  /**
  * Removes all elements from the array numFN, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNumFNAll(): number[] {
    if (typeof(this.numFN) !== 'undefined') {
       const oldArray = this.numFN;
       delete this.numFN;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array numFN, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNumFNBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.numFN) !== 'undefined') {
       return this.numFN.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field numFN.
  * @returns the value  or undefined
  */
  public getNumFN(): number[] | undefined {
      return this.numFN;
  }

  /**
  * Gets the current value of field numFN if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getNumFNOrElse(defaultValue: number[]): number[] {
      if (this.numFN == undefined || this.numFN == null ) { return defaultValue; }
      return this.numFN;
  }

  public add_numFN(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._numFN) !== 'undefined') {
         delete this._numFN;
      }
      return;
    }
    
    if (typeof(this._numFN) === 'undefined') {
      this._numFN =  [];
    }
    this._numFN.push(newValue);
  }
  /**
  * Removes all elements from the array _numFN, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_numFNAll(): Element[] {
    if (typeof(this._numFN) !== 'undefined') {
       const oldArray = this._numFN;
       delete this._numFN;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _numFN, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_numFNBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._numFN) !== 'undefined') {
       return this._numFN.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _numFN.
  * @returns the value  or undefined
  */
  public get_numFN(): Element[] | undefined {
      return this._numFN;
  }

  /**
  * Gets the current value of field _numFN if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_numFNOrElse(defaultValue: Element[]): Element[] {
      if (this._numFN == undefined || this._numFN == null ) { return defaultValue; }
      return this._numFN;
  }

  public addPrecision(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.precision) !== 'undefined') {
         delete this.precision;
      }
      return;
    }
    
    if (typeof(this.precision) === 'undefined') {
      this.precision =  [];
    }
    this.precision.push(newValue);
  }
  /**
  * Removes all elements from the array precision, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePrecisionAll(): number[] {
    if (typeof(this.precision) !== 'undefined') {
       const oldArray = this.precision;
       delete this.precision;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array precision, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePrecisionBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.precision) !== 'undefined') {
       return this.precision.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field precision.
  * @returns the value  or undefined
  */
  public getPrecision(): number[] | undefined {
      return this.precision;
  }

  /**
  * Gets the current value of field precision if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getPrecisionOrElse(defaultValue: number[]): number[] {
      if (this.precision == undefined || this.precision == null ) { return defaultValue; }
      return this.precision;
  }

  public add_precision(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._precision) !== 'undefined') {
         delete this._precision;
      }
      return;
    }
    
    if (typeof(this._precision) === 'undefined') {
      this._precision =  [];
    }
    this._precision.push(newValue);
  }
  /**
  * Removes all elements from the array _precision, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_precisionAll(): Element[] {
    if (typeof(this._precision) !== 'undefined') {
       const oldArray = this._precision;
       delete this._precision;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _precision, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_precisionBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._precision) !== 'undefined') {
       return this._precision.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _precision.
  * @returns the value  or undefined
  */
  public get_precision(): Element[] | undefined {
      return this._precision;
  }

  /**
  * Gets the current value of field _precision if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_precisionOrElse(defaultValue: Element[]): Element[] {
      if (this._precision == undefined || this._precision == null ) { return defaultValue; }
      return this._precision;
  }

  public addSensitivity(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sensitivity) !== 'undefined') {
         delete this.sensitivity;
      }
      return;
    }
    
    if (typeof(this.sensitivity) === 'undefined') {
      this.sensitivity =  [];
    }
    this.sensitivity.push(newValue);
  }
  /**
  * Removes all elements from the array sensitivity, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSensitivityAll(): number[] {
    if (typeof(this.sensitivity) !== 'undefined') {
       const oldArray = this.sensitivity;
       delete this.sensitivity;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array sensitivity, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSensitivityBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.sensitivity) !== 'undefined') {
       return this.sensitivity.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field sensitivity.
  * @returns the value  or undefined
  */
  public getSensitivity(): number[] | undefined {
      return this.sensitivity;
  }

  /**
  * Gets the current value of field sensitivity if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getSensitivityOrElse(defaultValue: number[]): number[] {
      if (this.sensitivity == undefined || this.sensitivity == null ) { return defaultValue; }
      return this.sensitivity;
  }

  public add_sensitivity(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._sensitivity) !== 'undefined') {
         delete this._sensitivity;
      }
      return;
    }
    
    if (typeof(this._sensitivity) === 'undefined') {
      this._sensitivity =  [];
    }
    this._sensitivity.push(newValue);
  }
  /**
  * Removes all elements from the array _sensitivity, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_sensitivityAll(): Element[] {
    if (typeof(this._sensitivity) !== 'undefined') {
       const oldArray = this._sensitivity;
       delete this._sensitivity;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _sensitivity, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_sensitivityBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._sensitivity) !== 'undefined') {
       return this._sensitivity.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _sensitivity.
  * @returns the value  or undefined
  */
  public get_sensitivity(): Element[] | undefined {
      return this._sensitivity;
  }

  /**
  * Gets the current value of field _sensitivity if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_sensitivityOrElse(defaultValue: Element[]): Element[] {
      if (this._sensitivity == undefined || this._sensitivity == null ) { return defaultValue; }
      return this._sensitivity;
  }

  public addFMeasure(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.fMeasure) !== 'undefined') {
         delete this.fMeasure;
      }
      return;
    }
    
    if (typeof(this.fMeasure) === 'undefined') {
      this.fMeasure =  [];
    }
    this.fMeasure.push(newValue);
  }
  /**
  * Removes all elements from the array fMeasure, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteFMeasureAll(): number[] {
    if (typeof(this.fMeasure) !== 'undefined') {
       const oldArray = this.fMeasure;
       delete this.fMeasure;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array fMeasure, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteFMeasureBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.fMeasure) !== 'undefined') {
       return this.fMeasure.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field fMeasure.
  * @returns the value  or undefined
  */
  public getFMeasure(): number[] | undefined {
      return this.fMeasure;
  }

  /**
  * Gets the current value of field fMeasure if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getFMeasureOrElse(defaultValue: number[]): number[] {
      if (this.fMeasure == undefined || this.fMeasure == null ) { return defaultValue; }
      return this.fMeasure;
  }

  public add_fMeasure(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._fMeasure) !== 'undefined') {
         delete this._fMeasure;
      }
      return;
    }
    
    if (typeof(this._fMeasure) === 'undefined') {
      this._fMeasure =  [];
    }
    this._fMeasure.push(newValue);
  }
  /**
  * Removes all elements from the array _fMeasure, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_fMeasureAll(): Element[] {
    if (typeof(this._fMeasure) !== 'undefined') {
       const oldArray = this._fMeasure;
       delete this._fMeasure;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _fMeasure, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_fMeasureBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._fMeasure) !== 'undefined') {
       return this._fMeasure.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _fMeasure.
  * @returns the value  or undefined
  */
  public get_fMeasure(): Element[] | undefined {
      return this._fMeasure;
  }

  /**
  * Gets the current value of field _fMeasure if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_fMeasureOrElse(defaultValue: Element[]): Element[] {
      if (this._fMeasure == undefined || this._fMeasure == null ) { return defaultValue; }
      return this._fMeasure;
  }


}


