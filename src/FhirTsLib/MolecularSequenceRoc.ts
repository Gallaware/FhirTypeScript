import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension } from './FhirType';



/**
 * Raw data describing a biological sequence.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/MolecularSequence_Roc
 */
export class MolecularSequenceRoc {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Invidual data point representing the GQ (genotype quality) score threshold.
   * Field access restricted because there are specific valid values.
   */
  protected score?: number[];

  /**
   * Extensions for score
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _score?: Element[];

  /**
   * The number of true positives if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected numTP?: number[];

  /**
   * Extensions for numTP
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _numTP?: Element[];

  /**
   * The number of false positives if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected numFP?: number[];

  /**
   * Extensions for numFP
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _numFP?: Element[];

  /**
   * The number of false negatives if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected numFN?: number[];

  /**
   * Extensions for numFN
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _numFN?: Element[];

  /**
   * Calculated precision if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected precision?: number[];

  /**
   * Extensions for precision
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _precision?: Element[];

  /**
   * Calculated sensitivity if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected sensitivity?: number[];

  /**
   * Extensions for sensitivity
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _sensitivity?: Element[];

  /**
   * Calculated fScore if the GQ score threshold was set to "score" field value.
   * Field access restricted because there are specific valid values.
   */
  protected fMeasure?: number[];

  /**
   * Extensions for fMeasure
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _fMeasure?: Element[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addScore(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.score) !== 'undefined') {
         delete this.score;
      }
      return;
    }
    
    if (typeof(this.score) === 'undefined') {
      this.score =  [];
    }
    this.score.push(newValue);
  }

  public getScore(): number[] | undefined {
      return this.score;
  }

  public add_score(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._score) !== 'undefined') {
         delete this._score;
      }
      return;
    }
    
    if (typeof(this._score) === 'undefined') {
      this._score =  [];
    }
    this._score.push(newValue);
  }

  public get_score(): Element[] | undefined {
      return this._score;
  }

  public addNumTP(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.numTP) !== 'undefined') {
         delete this.numTP;
      }
      return;
    }
    
    if (typeof(this.numTP) === 'undefined') {
      this.numTP =  [];
    }
    this.numTP.push(newValue);
  }

  public getNumTP(): number[] | undefined {
      return this.numTP;
  }

  public add_numTP(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._numTP) !== 'undefined') {
         delete this._numTP;
      }
      return;
    }
    
    if (typeof(this._numTP) === 'undefined') {
      this._numTP =  [];
    }
    this._numTP.push(newValue);
  }

  public get_numTP(): Element[] | undefined {
      return this._numTP;
  }

  public addNumFP(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.numFP) !== 'undefined') {
         delete this.numFP;
      }
      return;
    }
    
    if (typeof(this.numFP) === 'undefined') {
      this.numFP =  [];
    }
    this.numFP.push(newValue);
  }

  public getNumFP(): number[] | undefined {
      return this.numFP;
  }

  public add_numFP(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._numFP) !== 'undefined') {
         delete this._numFP;
      }
      return;
    }
    
    if (typeof(this._numFP) === 'undefined') {
      this._numFP =  [];
    }
    this._numFP.push(newValue);
  }

  public get_numFP(): Element[] | undefined {
      return this._numFP;
  }

  public addNumFN(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.numFN) !== 'undefined') {
         delete this.numFN;
      }
      return;
    }
    
    if (typeof(this.numFN) === 'undefined') {
      this.numFN =  [];
    }
    this.numFN.push(newValue);
  }

  public getNumFN(): number[] | undefined {
      return this.numFN;
  }

  public add_numFN(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._numFN) !== 'undefined') {
         delete this._numFN;
      }
      return;
    }
    
    if (typeof(this._numFN) === 'undefined') {
      this._numFN =  [];
    }
    this._numFN.push(newValue);
  }

  public get_numFN(): Element[] | undefined {
      return this._numFN;
  }

  public addPrecision(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.precision) !== 'undefined') {
         delete this.precision;
      }
      return;
    }
    
    if (typeof(this.precision) === 'undefined') {
      this.precision =  [];
    }
    this.precision.push(newValue);
  }

  public getPrecision(): number[] | undefined {
      return this.precision;
  }

  public add_precision(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._precision) !== 'undefined') {
         delete this._precision;
      }
      return;
    }
    
    if (typeof(this._precision) === 'undefined') {
      this._precision =  [];
    }
    this._precision.push(newValue);
  }

  public get_precision(): Element[] | undefined {
      return this._precision;
  }

  public addSensitivity(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sensitivity) !== 'undefined') {
         delete this.sensitivity;
      }
      return;
    }
    
    if (typeof(this.sensitivity) === 'undefined') {
      this.sensitivity =  [];
    }
    this.sensitivity.push(newValue);
  }

  public getSensitivity(): number[] | undefined {
      return this.sensitivity;
  }

  public add_sensitivity(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._sensitivity) !== 'undefined') {
         delete this._sensitivity;
      }
      return;
    }
    
    if (typeof(this._sensitivity) === 'undefined') {
      this._sensitivity =  [];
    }
    this._sensitivity.push(newValue);
  }

  public get_sensitivity(): Element[] | undefined {
      return this._sensitivity;
  }

  public addFMeasure(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.fMeasure) !== 'undefined') {
         delete this.fMeasure;
      }
      return;
    }
    
    if (typeof(this.fMeasure) === 'undefined') {
      this.fMeasure =  [];
    }
    this.fMeasure.push(newValue);
  }

  public getFMeasure(): number[] | undefined {
      return this.fMeasure;
  }

  public add_fMeasure(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._fMeasure) !== 'undefined') {
         delete this._fMeasure;
      }
      return;
    }
    
    if (typeof(this._fMeasure) === 'undefined') {
      this._fMeasure =  [];
    }
    this._fMeasure.push(newValue);
  }

  public get_fMeasure(): Element[] | undefined {
      return this._fMeasure;
  }


}


