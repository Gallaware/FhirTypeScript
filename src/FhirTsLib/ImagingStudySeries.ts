import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_UID, REGEX_DESCRIPTION, REGEX_STARTED } from '../FhirTsLibValidation/FhirRegex';
import { Coding, Element, Extension, ImagingStudyInstance, ImagingStudyPerformer, Reference } from './FhirType';



/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series,
 * each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other
 * data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT,
 * MR, ultrasound), but a study may have multiple series of different modalities.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ImagingStudy_Series
 */
export class ImagingStudySeries {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected uid?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _uid?: Element;

  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
   number?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _number?: Element;

  /**
   * A reference to a code defined by a terminology system.
   */
  @Type(() => Coding)
   modality?: Coding;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
   numberOfInstances?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _numberOfInstances?: Element;

  /**
   * The network service providing access (e.g., query, view, or retrieval) for this series. See
   * implementation notes for information about using DICOM endpoints. A series-level endpoint, if
   * present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected endpoint?: Reference[];

  /**
   * A reference to a code defined by a terminology system.
   */
  @Type(() => Coding)
   bodySite?: Coding;

  /**
   * A reference to a code defined by a terminology system.
   */
  @Type(() => Coding)
   laterality?: Coding;

  /**
   * The specimen imaged, e.g., for whole slide imaging of a biopsy.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected specimen?: Reference[];

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected started?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _started?: Element;

  /**
   * Indicates who or what performed the series and how they were involved.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImagingStudyPerformer)
  protected performer?: ImagingStudyPerformer[];

  /**
   * A single SOP instance within the series, e.g. an image, or presentation state.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImagingStudyInstance)
  protected instance?: ImagingStudyInstance[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setUid(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.uid) !== 'undefined') {
         delete this.uid;
      }
      return;
    }
    
    if (REGEX_UID.test(newValue)) {
      this.uid = newValue
    } else {
      throw new Error("Invalid value pattern for uid of " + newValue);
    }
  }
  
  public getUidPattern(): string {
    return REGEX_UID.source;
  }
  

  public getUid(): string | undefined {
      return this.uid;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }

  public addEndpoint(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.endpoint) !== 'undefined') {
         delete this.endpoint;
      }
      return;
    }
    
    if (typeof(this.endpoint) === 'undefined') {
      this.endpoint =  [];
    }
    this.endpoint.push(newValue);
  }

  public getEndpoint(): Reference[] | undefined {
      return this.endpoint;
  }

  public addSpecimen(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.specimen) !== 'undefined') {
         delete this.specimen;
      }
      return;
    }
    
    if (typeof(this.specimen) === 'undefined') {
      this.specimen =  [];
    }
    this.specimen.push(newValue);
  }

  public getSpecimen(): Reference[] | undefined {
      return this.specimen;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setStarted(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.started) !== 'undefined') {
         delete this.started;
      }
      return;
    }
    
    if (REGEX_STARTED.test(newValue)) {
      this.started = newValue
    } else {
      throw new Error("Invalid value pattern for started of " + newValue);
    }
  }
  
  public getStartedPattern(): string {
    return REGEX_STARTED.source;
  }
  

  public getStarted(): string | undefined {
      return this.started;
  }

  public addPerformer(newValue: ImagingStudyPerformer) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.performer) !== 'undefined') {
         delete this.performer;
      }
      return;
    }
    
    if (typeof(this.performer) === 'undefined') {
      this.performer =  [];
    }
    this.performer.push(newValue);
  }

  public getPerformer(): ImagingStudyPerformer[] | undefined {
      return this.performer;
  }

  public addInstance(newValue: ImagingStudyInstance) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.instance) !== 'undefined') {
         delete this.instance;
      }
      return;
    }
    
    if (typeof(this.instance) === 'undefined') {
      this.instance =  [];
    }
    this.instance.push(newValue);
  }

  public getInstance(): ImagingStudyInstance[] | undefined {
      return this.instance;
  }


}


