import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_MESSAGE_000, REGEX_DETAIL_000 } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension } from './FhirType';
import { TestReportOperationResult_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A summary of information based on the results of executing a TestScript.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/TestReport_Operation
 */
export class TestReportOperation {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * The result of this operation.
   * Field access restricted because there are specific valid values.
   */
  protected result?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _result?: Element;

  /**
   * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down
   * presentation engine
   * Field access restricted because there are specific valid values.
   */
  protected message?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _message?: Element;

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected detail?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _detail?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setResult(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.result) !== 'undefined') {
         delete this.result;
      }
      return;
    }
    
    const idx = getValidValueIdx(TestReportOperationResult_list_ValidValues, newValue);
    if (idx >= 0) {
      this.result = TestReportOperationResult_list_ValidValues[idx];
    } else {
      throw new Error("Unknown result of " + newValue);
    }
  }
  
  public getTestReportOperationResultValidValues(): string[] {
    return TestReportOperationResult_list_ValidValues;
  }
  

  public getResult(): string | undefined {
      return this.result;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setMessage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.message) !== 'undefined') {
         delete this.message;
      }
      return;
    }
    
    if (REGEX_MESSAGE_000.test(newValue)) {
      this.message = newValue
    } else {
      throw new Error("Invalid value pattern for message of " + newValue);
    }
  }
  
  public getMessagePattern(): string {
    return REGEX_MESSAGE_000.source;
  }
  

  public getMessage(): string | undefined {
      return this.message;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDetail(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.detail) !== 'undefined') {
         delete this.detail;
      }
      return;
    }
    
    if (REGEX_DETAIL_000.test(newValue)) {
      this.detail = newValue
    } else {
      throw new Error("Invalid value pattern for detail of " + newValue);
    }
  }
  
  public getDetailPattern(): string {
    return REGEX_DETAIL_000.source;
  }
  

  public getDetail(): string | undefined {
      return this.detail;
  }


}


