import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_REPEATUNIT } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Element, Extension, SubstanceAmount, SubstancePolymerDegreeOfPolymerisation, SubstancePolymerStructuralRepresentation } from './index';



/**
 * Todo.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/SubstancePolymer_RepeatUnit
 */
export class SubstancePolymerRepeatUnit {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   orientationOfPolymerisation?: CodeableConcept;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected repeatUnit?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _repeatUnit?: Element;

  /**
   * Chemical substances are a single substance type whose primary defining element is the molecular
   * structure. Chemical substances shall be defined on the basis of their complete covalent molecular
   * structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also
   * captured. Purity, grade, physical form or particle size are not taken into account in the
   * definition of a chemical substance or in the assignment of a Substance ID.
   */
  @Type(() => SubstanceAmount)
   amount?: SubstanceAmount;

  /**
   * Todo.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => SubstancePolymerDegreeOfPolymerisation)
  protected degreeOfPolymerisation?: SubstancePolymerDegreeOfPolymerisation[];

  /**
   * Todo.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => SubstancePolymerStructuralRepresentation)
  protected structuralRepresentation?: SubstancePolymerStructuralRepresentation[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setRepeatUnit(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.repeatUnit) !== 'undefined') {
         delete this.repeatUnit;
      }
      return;
    }
    
    if (REGEX_REPEATUNIT.test(newValue)) {
      this.repeatUnit = newValue
    } else {
      throw new Error("Invalid value pattern for repeatUnit of " + newValue);
    }
  }
  
  public getRepeatUnitPattern(): string {
    return REGEX_REPEATUNIT.source;
  }
  
  /**
  * Gets the current value of field repeatUnit.
  * @returns the value  or undefined
  */
  public getRepeatUnit(): string | undefined {
      return this.repeatUnit;
  }

  /**
  * Gets the current value of field repeatUnit if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getRepeatUnitOrElse(defaultValue: string): string {
      if (this.repeatUnit == undefined || this.repeatUnit == null ) { return defaultValue; }
      return this.repeatUnit;
  }

  public addDegreeOfPolymerisation(newValue: SubstancePolymerDegreeOfPolymerisation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.degreeOfPolymerisation) !== 'undefined') {
         delete this.degreeOfPolymerisation;
      }
      return;
    }
    
    if (typeof(this.degreeOfPolymerisation) === 'undefined') {
      this.degreeOfPolymerisation =  [];
    }
    this.degreeOfPolymerisation.push(newValue);
  }
  /**
  * Removes all elements from the array degreeOfPolymerisation, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDegreeOfPolymerisationAll(): SubstancePolymerDegreeOfPolymerisation[] {
    if (typeof(this.degreeOfPolymerisation) !== 'undefined') {
       const oldArray = this.degreeOfPolymerisation;
       delete this.degreeOfPolymerisation;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array degreeOfPolymerisation, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDegreeOfPolymerisationBySplice(start: number, deleteCount?: number): SubstancePolymerDegreeOfPolymerisation[] {
    if (typeof(this.degreeOfPolymerisation) !== 'undefined') {
       return this.degreeOfPolymerisation.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field degreeOfPolymerisation.
  * @returns the value  or undefined
  */
  public getDegreeOfPolymerisation(): SubstancePolymerDegreeOfPolymerisation[] | undefined {
      return this.degreeOfPolymerisation;
  }

  /**
  * Gets the current value of field degreeOfPolymerisation if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDegreeOfPolymerisationOrElse(defaultValue: SubstancePolymerDegreeOfPolymerisation[]): SubstancePolymerDegreeOfPolymerisation[] {
      if (this.degreeOfPolymerisation == undefined || this.degreeOfPolymerisation == null ) { return defaultValue; }
      return this.degreeOfPolymerisation;
  }

  public addStructuralRepresentation(newValue: SubstancePolymerStructuralRepresentation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.structuralRepresentation) !== 'undefined') {
         delete this.structuralRepresentation;
      }
      return;
    }
    
    if (typeof(this.structuralRepresentation) === 'undefined') {
      this.structuralRepresentation =  [];
    }
    this.structuralRepresentation.push(newValue);
  }
  /**
  * Removes all elements from the array structuralRepresentation, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteStructuralRepresentationAll(): SubstancePolymerStructuralRepresentation[] {
    if (typeof(this.structuralRepresentation) !== 'undefined') {
       const oldArray = this.structuralRepresentation;
       delete this.structuralRepresentation;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array structuralRepresentation, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteStructuralRepresentationBySplice(start: number, deleteCount?: number): SubstancePolymerStructuralRepresentation[] {
    if (typeof(this.structuralRepresentation) !== 'undefined') {
       return this.structuralRepresentation.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field structuralRepresentation.
  * @returns the value  or undefined
  */
  public getStructuralRepresentation(): SubstancePolymerStructuralRepresentation[] | undefined {
      return this.structuralRepresentation;
  }

  /**
  * Gets the current value of field structuralRepresentation if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getStructuralRepresentationOrElse(defaultValue: SubstancePolymerStructuralRepresentation[]): SubstancePolymerStructuralRepresentation[] {
      if (this.structuralRepresentation == undefined || this.structuralRepresentation == null ) { return defaultValue; }
      return this.structuralRepresentation;
  }


}


