import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_COMMENT } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension } from './index';



/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using
 * the search interaction).
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/OperationDefinition_Overload
 */
export class OperationDefinitionOverload {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Name of parameter to include in overload.
   * Field access restricted because there are specific valid values.
   */
  protected parameterName?: string[];

  /**
   * Extensions for parameterName
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _parameterName?: Element[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected comment?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _comment?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addParameterName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.parameterName) !== 'undefined') {
         delete this.parameterName;
      }
      return;
    }
    
    if (typeof(this.parameterName) === 'undefined') {
      this.parameterName =  [];
    }
    this.parameterName.push(newValue);
  }
  /**
  * Removes all elements from the array parameterName, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteParameterNameAll(): string[] {
    if (typeof(this.parameterName) !== 'undefined') {
       const oldArray = this.parameterName;
       delete this.parameterName;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array parameterName, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteParameterNameBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.parameterName) !== 'undefined') {
       return this.parameterName.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field parameterName.
  * @returns the value  or undefined
  */
  public getParameterName(): string[] | undefined {
      return this.parameterName;
  }

  public add_parameterName(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._parameterName) !== 'undefined') {
         delete this._parameterName;
      }
      return;
    }
    
    if (typeof(this._parameterName) === 'undefined') {
      this._parameterName =  [];
    }
    this._parameterName.push(newValue);
  }
  /**
  * Removes all elements from the array _parameterName, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_parameterNameAll(): Element[] {
    if (typeof(this._parameterName) !== 'undefined') {
       const oldArray = this._parameterName;
       delete this._parameterName;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _parameterName, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_parameterNameBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._parameterName) !== 'undefined') {
       return this._parameterName.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _parameterName.
  * @returns the value  or undefined
  */
  public get_parameterName(): Element[] | undefined {
      return this._parameterName;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setComment(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.comment) !== 'undefined') {
         delete this.comment;
      }
      return;
    }
    
    if (REGEX_COMMENT.test(newValue)) {
      this.comment = newValue
    } else {
      throw new Error("Invalid value pattern for comment of " + newValue);
    }
  }
  
  public getCommentPattern(): string {
    return REGEX_COMMENT.source;
  }
  
  /**
  * Gets the current value of field comment.
  * @returns the value  or undefined
  */
  public getComment(): string | undefined {
      return this.comment;
  }


}


