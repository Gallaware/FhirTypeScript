import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_TEXT } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, ContractAnswer, ContractParty, Element, Extension, Identifier, Reference } from './index';



/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or
 * agreement.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Contract_Offer
 */
export class ContractOffer {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Unique identifier for this particular Contract Provision.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * Offer Recipient.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContractParty)
  protected party?: ContractParty[];

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   topic?: Reference;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   type?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   decision?: CodeableConcept;

  /**
   * How the decision about a Contract was conveyed.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected decisionMode?: CodeableConcept[];

  /**
   * Response to offer text.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContractAnswer)
  protected answer?: ContractAnswer[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected text?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _text?: Element;

  /**
   * The id of the clause or question text of the offer in the referenced questionnaire/response.
   * Field access restricted because there are specific valid values.
   */
  protected linkId?: string[];

  /**
   * Extensions for linkId
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _linkId?: Element[];

  /**
   * Security labels that protects the offer.
   * Field access restricted because there are specific valid values.
   */
  protected securityLabelNumber?: number[];

  /**
   * Extensions for securityLabelNumber
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _securityLabelNumber?: Element[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }
  /**
  * Removes all elements from the array identifier, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteIdentifierAll(): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       const oldArray = this.identifier;
       delete this.identifier;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array identifier, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteIdentifierBySplice(start: number, deleteCount?: number): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       return this.identifier.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field identifier.
  * @returns the value  or undefined
  */
  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  public addParty(newValue: ContractParty) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.party) !== 'undefined') {
         delete this.party;
      }
      return;
    }
    
    if (typeof(this.party) === 'undefined') {
      this.party =  [];
    }
    this.party.push(newValue);
  }
  /**
  * Removes all elements from the array party, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePartyAll(): ContractParty[] {
    if (typeof(this.party) !== 'undefined') {
       const oldArray = this.party;
       delete this.party;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array party, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePartyBySplice(start: number, deleteCount?: number): ContractParty[] {
    if (typeof(this.party) !== 'undefined') {
       return this.party.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field party.
  * @returns the value  or undefined
  */
  public getParty(): ContractParty[] | undefined {
      return this.party;
  }

  public addDecisionMode(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.decisionMode) !== 'undefined') {
         delete this.decisionMode;
      }
      return;
    }
    
    if (typeof(this.decisionMode) === 'undefined') {
      this.decisionMode =  [];
    }
    this.decisionMode.push(newValue);
  }
  /**
  * Removes all elements from the array decisionMode, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDecisionModeAll(): CodeableConcept[] {
    if (typeof(this.decisionMode) !== 'undefined') {
       const oldArray = this.decisionMode;
       delete this.decisionMode;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array decisionMode, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDecisionModeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.decisionMode) !== 'undefined') {
       return this.decisionMode.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field decisionMode.
  * @returns the value  or undefined
  */
  public getDecisionMode(): CodeableConcept[] | undefined {
      return this.decisionMode;
  }

  public addAnswer(newValue: ContractAnswer) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.answer) !== 'undefined') {
         delete this.answer;
      }
      return;
    }
    
    if (typeof(this.answer) === 'undefined') {
      this.answer =  [];
    }
    this.answer.push(newValue);
  }
  /**
  * Removes all elements from the array answer, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteAnswerAll(): ContractAnswer[] {
    if (typeof(this.answer) !== 'undefined') {
       const oldArray = this.answer;
       delete this.answer;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array answer, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteAnswerBySplice(start: number, deleteCount?: number): ContractAnswer[] {
    if (typeof(this.answer) !== 'undefined') {
       return this.answer.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field answer.
  * @returns the value  or undefined
  */
  public getAnswer(): ContractAnswer[] | undefined {
      return this.answer;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setText(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.text) !== 'undefined') {
         delete this.text;
      }
      return;
    }
    
    if (REGEX_TEXT.test(newValue)) {
      this.text = newValue
    } else {
      throw new Error("Invalid value pattern for text of " + newValue);
    }
  }
  
  public getTextPattern(): string {
    return REGEX_TEXT.source;
  }
  
  /**
  * Gets the current value of field text.
  * @returns the value  or undefined
  */
  public getText(): string | undefined {
      return this.text;
  }

  public addLinkId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.linkId) !== 'undefined') {
         delete this.linkId;
      }
      return;
    }
    
    if (typeof(this.linkId) === 'undefined') {
      this.linkId =  [];
    }
    this.linkId.push(newValue);
  }
  /**
  * Removes all elements from the array linkId, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteLinkIdAll(): string[] {
    if (typeof(this.linkId) !== 'undefined') {
       const oldArray = this.linkId;
       delete this.linkId;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array linkId, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteLinkIdBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.linkId) !== 'undefined') {
       return this.linkId.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field linkId.
  * @returns the value  or undefined
  */
  public getLinkId(): string[] | undefined {
      return this.linkId;
  }

  public add_linkId(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._linkId) !== 'undefined') {
         delete this._linkId;
      }
      return;
    }
    
    if (typeof(this._linkId) === 'undefined') {
      this._linkId =  [];
    }
    this._linkId.push(newValue);
  }
  /**
  * Removes all elements from the array _linkId, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_linkIdAll(): Element[] {
    if (typeof(this._linkId) !== 'undefined') {
       const oldArray = this._linkId;
       delete this._linkId;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _linkId, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_linkIdBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._linkId) !== 'undefined') {
       return this._linkId.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _linkId.
  * @returns the value  or undefined
  */
  public get_linkId(): Element[] | undefined {
      return this._linkId;
  }

  public addSecurityLabelNumber(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.securityLabelNumber) !== 'undefined') {
         delete this.securityLabelNumber;
      }
      return;
    }
    
    if (typeof(this.securityLabelNumber) === 'undefined') {
      this.securityLabelNumber =  [];
    }
    this.securityLabelNumber.push(newValue);
  }
  /**
  * Removes all elements from the array securityLabelNumber, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSecurityLabelNumberAll(): number[] {
    if (typeof(this.securityLabelNumber) !== 'undefined') {
       const oldArray = this.securityLabelNumber;
       delete this.securityLabelNumber;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array securityLabelNumber, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSecurityLabelNumberBySplice(start: number, deleteCount?: number): number[] {
    if (typeof(this.securityLabelNumber) !== 'undefined') {
       return this.securityLabelNumber.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field securityLabelNumber.
  * @returns the value  or undefined
  */
  public getSecurityLabelNumber(): number[] | undefined {
      return this.securityLabelNumber;
  }

  public add_securityLabelNumber(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._securityLabelNumber) !== 'undefined') {
         delete this._securityLabelNumber;
      }
      return;
    }
    
    if (typeof(this._securityLabelNumber) === 'undefined') {
      this._securityLabelNumber =  [];
    }
    this._securityLabelNumber.push(newValue);
  }
  /**
  * Removes all elements from the array _securityLabelNumber, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_securityLabelNumberAll(): Element[] {
    if (typeof(this._securityLabelNumber) !== 'undefined') {
       const oldArray = this._securityLabelNumber;
       delete this._securityLabelNumber;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _securityLabelNumber, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_securityLabelNumberBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._securityLabelNumber) !== 'undefined') {
       return this._securityLabelNumber.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _securityLabelNumber.
  * @returns the value  or undefined
  */
  public get_securityLabelNumber(): Element[] | undefined {
      return this._securityLabelNumber;
  }


}


