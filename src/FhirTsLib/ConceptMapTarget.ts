import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_CODE, REGEX_DISPLAY, REGEX_COMMENT } from '../FhirTsLibValidation/FhirRegex';
import { ConceptMapDependsOn, Element, Extension } from './FhirType';
import { ConceptMapTargetEquivalence_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A statement of relationships from one set of concepts to one or more other concepts - either
 * concepts in code systems, or data element/data element concepts, or classes in class models.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ConceptMap_Target
 */
export class ConceptMapTarget {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected code?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _code?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected display?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _display?: Element;

  /**
   * The equivalence between the source and target concepts (counting for the dependencies and
   * products). The equivalence is read from target to source (e.g. the target is 'wider' than the
   * source).
   * Field access restricted because there are specific valid values.
   */
  protected equivalence?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _equivalence?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected comment?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _comment?: Element;

  /**
   * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the
   * specified element can be resolved, and it has the specified value.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ConceptMapDependsOn)
  protected dependsOn?: ConceptMapDependsOn[];

  /**
   * A set of additional outcomes from this mapping to other elements. To properly execute this mapping,
   * the specified element must be mapped to some data element or source that is in context. The mapping
   * may still be useful without a place for the additional data elements, but the equivalence cannot be
   * relied on.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ConceptMapDependsOn)
  protected product?: ConceptMapDependsOn[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCode(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.code) !== 'undefined') {
         delete this.code;
      }
      return;
    }
    
    if (REGEX_CODE.test(newValue)) {
      this.code = newValue
    } else {
      throw new Error("Invalid value pattern for code of " + newValue);
    }
  }
  
  public getCodePattern(): string {
    return REGEX_CODE.source;
  }
  

  public getCode(): string | undefined {
      return this.code;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDisplay(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.display) !== 'undefined') {
         delete this.display;
      }
      return;
    }
    
    if (REGEX_DISPLAY.test(newValue)) {
      this.display = newValue
    } else {
      throw new Error("Invalid value pattern for display of " + newValue);
    }
  }
  
  public getDisplayPattern(): string {
    return REGEX_DISPLAY.source;
  }
  

  public getDisplay(): string | undefined {
      return this.display;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setEquivalence(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.equivalence) !== 'undefined') {
         delete this.equivalence;
      }
      return;
    }
    
    const idx = getValidValueIdx(ConceptMapTargetEquivalence_list_ValidValues, newValue);
    if (idx >= 0) {
      this.equivalence = ConceptMapTargetEquivalence_list_ValidValues[idx];
    } else {
      throw new Error("Unknown equivalence of " + newValue);
    }
  }
  
  public getConceptMapTargetEquivalenceValidValues(): string[] {
    return ConceptMapTargetEquivalence_list_ValidValues;
  }
  

  public getEquivalence(): string | undefined {
      return this.equivalence;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setComment(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.comment) !== 'undefined') {
         delete this.comment;
      }
      return;
    }
    
    if (REGEX_COMMENT.test(newValue)) {
      this.comment = newValue
    } else {
      throw new Error("Invalid value pattern for comment of " + newValue);
    }
  }
  
  public getCommentPattern(): string {
    return REGEX_COMMENT.source;
  }
  

  public getComment(): string | undefined {
      return this.comment;
  }

  public addDependsOn(newValue: ConceptMapDependsOn) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.dependsOn) !== 'undefined') {
         delete this.dependsOn;
      }
      return;
    }
    
    if (typeof(this.dependsOn) === 'undefined') {
      this.dependsOn =  [];
    }
    this.dependsOn.push(newValue);
  }

  public getDependsOn(): ConceptMapDependsOn[] | undefined {
      return this.dependsOn;
  }

  public addProduct(newValue: ConceptMapDependsOn) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.product) !== 'undefined') {
         delete this.product;
      }
      return;
    }
    
    if (typeof(this.product) === 'undefined') {
      this.product =  [];
    }
    this.product.push(newValue);
  }

  public getProduct(): ConceptMapDependsOn[] | undefined {
      return this.product;
  }


}


