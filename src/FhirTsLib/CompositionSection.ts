import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_TITLE, REGEX_MODE } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Element, Extension, Narrative, Reference } from './FhirType';



/**
 * A set of healthcare-related information that is assembled together into a single logical package
 * that provides a single coherent statement of meaning, establishes its own context and that has
 * clinical attestation with regard to who is making the statement. A Composition defines the
 * structure and narrative content necessary for a document. However, a Composition alone does not
 * constitute a document. Rather, the Composition must be the first entry in a Bundle where
 * Bundle.type=document, and any other resources referenced from Composition must be included as
 * subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Composition_Section
 */
export class CompositionSection {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected title?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _title?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   code?: CodeableConcept;

  /**
   * Identifies who is responsible for the information in this section, not necessarily who typed it in.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected author?: Reference[];

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   focus?: Reference;

  /**
   * A human-readable summary of the resource conveying the essential clinical and business information
   * for the resource.
   */
  @Type(() => Narrative)
   text?: Narrative;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected mode?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _mode?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   orderedBy?: CodeableConcept;

  /**
   * A reference to the actual resource from which the narrative in the section is derived.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected entry?: Reference[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   emptyReason?: CodeableConcept;

  /**
   * A nested sub-section within this section.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CompositionSection)
  protected section?: CompositionSection[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTitle(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.title) !== 'undefined') {
         delete this.title;
      }
      return;
    }
    
    if (REGEX_TITLE.test(newValue)) {
      this.title = newValue
    } else {
      throw new Error("Invalid value pattern for title of " + newValue);
    }
  }
  
  public getTitlePattern(): string {
    return REGEX_TITLE.source;
  }
  

  public getTitle(): string | undefined {
      return this.title;
  }

  public addAuthor(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.author) !== 'undefined') {
         delete this.author;
      }
      return;
    }
    
    if (typeof(this.author) === 'undefined') {
      this.author =  [];
    }
    this.author.push(newValue);
  }

  public getAuthor(): Reference[] | undefined {
      return this.author;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setMode(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.mode) !== 'undefined') {
         delete this.mode;
      }
      return;
    }
    
    if (REGEX_MODE.test(newValue)) {
      this.mode = newValue
    } else {
      throw new Error("Invalid value pattern for mode of " + newValue);
    }
  }
  
  public getModePattern(): string {
    return REGEX_MODE.source;
  }
  

  public getMode(): string | undefined {
      return this.mode;
  }

  public addEntry(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.entry) !== 'undefined') {
         delete this.entry;
      }
      return;
    }
    
    if (typeof(this.entry) === 'undefined') {
      this.entry =  [];
    }
    this.entry.push(newValue);
  }

  public getEntry(): Reference[] | undefined {
      return this.entry;
  }

  public addSection(newValue: CompositionSection) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.section) !== 'undefined') {
         delete this.section;
      }
      return;
    }
    
    if (typeof(this.section) === 'undefined') {
      this.section =  [];
    }
    this.section.push(newValue);
  }

  public getSection(): CompositionSection[] | undefined {
      return this.section;
  }


}


