import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Annotation, CarePlanDetail, CodeableConcept, Extension, Reference } from './FhirType';



/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular
 * patient, group or community for a period of time, possibly limited to care for a specific
 * condition or set of conditions.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/CarePlan_Activity
 */
export class CarePlanActivity {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Identifies the outcome at the point when the status of the activity is assessed.  For example, the
   * outcome of an education activity could be patient understands (or not).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected outcomeCodeableConcept?: CodeableConcept[];

  /**
   * Details of the outcome or action resulting from the activity.  The reference to an "event"
   * resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity
   * itself.  The activity can be conveyed using CarePlan.activity.detail OR using the
   * CarePlan.activity.reference (a reference to a “request” resource).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected outcomeReference?: Reference[];

  /**
   * Notes about the adherence/status/progress of the activity.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Annotation)
  protected progress?: Annotation[];

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   reference?: Reference;

  /**
   * Describes the intention of how one or more practitioners intend to deliver care for a particular
   * patient, group or community for a period of time, possibly limited to care for a specific
   * condition or set of conditions.
   */
  @Type(() => CarePlanDetail)
   detail?: CarePlanDetail;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addOutcomeCodeableConcept(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.outcomeCodeableConcept) !== 'undefined') {
         delete this.outcomeCodeableConcept;
      }
      return;
    }
    
    if (typeof(this.outcomeCodeableConcept) === 'undefined') {
      this.outcomeCodeableConcept =  [];
    }
    this.outcomeCodeableConcept.push(newValue);
  }

  public getOutcomeCodeableConcept(): CodeableConcept[] | undefined {
      return this.outcomeCodeableConcept;
  }

  public addOutcomeReference(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.outcomeReference) !== 'undefined') {
         delete this.outcomeReference;
      }
      return;
    }
    
    if (typeof(this.outcomeReference) === 'undefined') {
      this.outcomeReference =  [];
    }
    this.outcomeReference.push(newValue);
  }

  public getOutcomeReference(): Reference[] | undefined {
      return this.outcomeReference;
  }

  public addProgress(newValue: Annotation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.progress) !== 'undefined') {
         delete this.progress;
      }
      return;
    }
    
    if (typeof(this.progress) === 'undefined') {
      this.progress =  [];
    }
    this.progress.push(newValue);
  }

  public getProgress(): Annotation[] | undefined {
      return this.progress;
  }


}


