import { Type } from 'class-transformer';
import { REGEX_ID_000, REGEX_IMPLICITRULES, REGEX_LANGUAGE, REGEX_STATUS_000, REGEX_INTENT, REGEX_TITLE, REGEX_DESCRIPTION, REGEX_CREATED } from '../FhirTsLibValidation/FhirRegex';
import { Annotation, CarePlanActivity, CodeableConcept, Element, Extension, Identifier, Meta, Narrative, Period, Reference, ResourceList, Account, ActivityDefinition, AdverseEvent, AllergyIntolerance, Appointment, AppointmentResponse, AuditEvent, Basic, Binary, BiologicallyDerivedProduct, BodyStructure, Bundle, CapabilityStatement, CareTeam, CatalogEntry, ChargeItem, ChargeItemDefinition, Claim, ClaimResponse, ClinicalImpression, CodeSystem, Communication, CommunicationRequest, CompartmentDefinition, Composition, ConceptMap, Condition, Consent, Contract, Coverage, CoverageEligibilityRequest, CoverageEligibilityResponse, DetectedIssue, Device, DeviceDefinition, DeviceMetric, DeviceRequest, DeviceUseStatement, DiagnosticReport, DocumentManifest, DocumentReference, EffectEvidenceSynthesis, Encounter, Endpoint, EnrollmentRequest, EnrollmentResponse, EpisodeOfCare, EventDefinition, Evidence, EvidenceVariable, ExampleScenario, ExplanationOfBenefit, FamilyMemberHistory, Flag, Goal, GraphDefinition, Group, GuidanceResponse, HealthcareService, ImagingStudy, Immunization, ImmunizationEvaluation, ImmunizationRecommendation, ImplementationGuide, InsurancePlan, Invoice, Library, Linkage, List, Location, Measure, MeasureReport, Media, Medication, MedicationAdministration, MedicationDispense, MedicationKnowledge, MedicationRequest, MedicationStatement, MedicinalProduct, MedicinalProductAuthorization, MedicinalProductContraindication, MedicinalProductIndication, MedicinalProductIngredient, MedicinalProductInteraction, MedicinalProductManufactured, MedicinalProductPackaged, MedicinalProductPharmaceutical, MedicinalProductUndesirableEffect, MessageDefinition, MessageHeader, MolecularSequence, NamingSystem, NutritionOrder, Observation, ObservationDefinition, OperationDefinition, OperationOutcome, Organization, OrganizationAffiliation, Parameters, Patient, PaymentNotice, PaymentReconciliation, Person, PlanDefinition, Practitioner, PractitionerRole, Procedure, Provenance, Questionnaire, QuestionnaireResponse, RelatedPerson, RequestGroup, ResearchDefinition, ResearchElementDefinition, ResearchStudy, ResearchSubject, RiskAssessment, RiskEvidenceSynthesis, Schedule, SearchParameter, ServiceRequest, Slot, Specimen, SpecimenDefinition, StructureDefinition, StructureMap, Subscription, Substance, SubstanceNucleicAcid, SubstancePolymer, SubstanceProtein, SubstanceReferenceInformation, SubstanceSourceMaterial, SubstanceSpecification, SupplyDelivery, SupplyRequest, Task, TerminologyCapabilities, TestReport, TestScript, ValueSet, VerificationResult, VisionPrescription } from './index';



/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular
 * patient, group or community for a period of time, possibly limited to care for a specific
 * condition or set of conditions.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/CarePlan
 */
export class CarePlan {
  /**
   * This is a CarePlan resource
   */
     resourceType = "CarePlan";

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * The metadata about a resource. This is content in the resource that is maintained by the
   * infrastructure. Changes to the content might not always be associated with version changes to the
   * resource.
   */
  @Type(() => Meta)
   meta?: Meta;

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected implicitRules?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _implicitRules?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected language?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _language?: Element;

  /**
   * A human-readable summary of the resource conveying the essential clinical and business information
   * for the resource.
   */
  @Type(() => Narrative)
   text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the resource that contains them -
   * they cannot be identified independently, and nor can they have their own independent transaction
   * scope.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ResourceList, {
          discriminator: {
    property: 'resourceType',
    subTypes: [
      	{ value: Account, name: 'Account'},
      	{ value: ActivityDefinition, name: 'ActivityDefinition'},
      	{ value: AdverseEvent, name: 'AdverseEvent'},
      	{ value: AllergyIntolerance, name: 'AllergyIntolerance'},
      	{ value: Appointment, name: 'Appointment'},
      	{ value: AppointmentResponse, name: 'AppointmentResponse'},
      	{ value: AuditEvent, name: 'AuditEvent'},
      	{ value: Basic, name: 'Basic'},
      	{ value: Binary, name: 'Binary'},
      	{ value: BiologicallyDerivedProduct, name: 'BiologicallyDerivedProduct'},
      	{ value: BodyStructure, name: 'BodyStructure'},
      	{ value: Bundle, name: 'Bundle'},
      	{ value: CapabilityStatement, name: 'CapabilityStatement'},
      	{ value: CarePlan, name: 'CarePlan'},
      	{ value: CareTeam, name: 'CareTeam'},
      	{ value: CatalogEntry, name: 'CatalogEntry'},
      	{ value: ChargeItem, name: 'ChargeItem'},
      	{ value: ChargeItemDefinition, name: 'ChargeItemDefinition'},
      	{ value: Claim, name: 'Claim'},
      	{ value: ClaimResponse, name: 'ClaimResponse'},
      	{ value: ClinicalImpression, name: 'ClinicalImpression'},
      	{ value: CodeSystem, name: 'CodeSystem'},
      	{ value: Communication, name: 'Communication'},
      	{ value: CommunicationRequest, name: 'CommunicationRequest'},
      	{ value: CompartmentDefinition, name: 'CompartmentDefinition'},
      	{ value: Composition, name: 'Composition'},
      	{ value: ConceptMap, name: 'ConceptMap'},
      	{ value: Condition, name: 'Condition'},
      	{ value: Consent, name: 'Consent'},
      	{ value: Contract, name: 'Contract'},
      	{ value: Coverage, name: 'Coverage'},
      	{ value: CoverageEligibilityRequest, name: 'CoverageEligibilityRequest'},
      	{ value: CoverageEligibilityResponse, name: 'CoverageEligibilityResponse'},
      	{ value: DetectedIssue, name: 'DetectedIssue'},
      	{ value: Device, name: 'Device'},
      	{ value: DeviceDefinition, name: 'DeviceDefinition'},
      	{ value: DeviceMetric, name: 'DeviceMetric'},
      	{ value: DeviceRequest, name: 'DeviceRequest'},
      	{ value: DeviceUseStatement, name: 'DeviceUseStatement'},
      	{ value: DiagnosticReport, name: 'DiagnosticReport'},
      	{ value: DocumentManifest, name: 'DocumentManifest'},
      	{ value: DocumentReference, name: 'DocumentReference'},
      	{ value: EffectEvidenceSynthesis, name: 'EffectEvidenceSynthesis'},
      	{ value: Encounter, name: 'Encounter'},
      	{ value: Endpoint, name: 'Endpoint'},
      	{ value: EnrollmentRequest, name: 'EnrollmentRequest'},
      	{ value: EnrollmentResponse, name: 'EnrollmentResponse'},
      	{ value: EpisodeOfCare, name: 'EpisodeOfCare'},
      	{ value: EventDefinition, name: 'EventDefinition'},
      	{ value: Evidence, name: 'Evidence'},
      	{ value: EvidenceVariable, name: 'EvidenceVariable'},
      	{ value: ExampleScenario, name: 'ExampleScenario'},
      	{ value: ExplanationOfBenefit, name: 'ExplanationOfBenefit'},
      	{ value: FamilyMemberHistory, name: 'FamilyMemberHistory'},
      	{ value: Flag, name: 'Flag'},
      	{ value: Goal, name: 'Goal'},
      	{ value: GraphDefinition, name: 'GraphDefinition'},
      	{ value: Group, name: 'Group'},
      	{ value: GuidanceResponse, name: 'GuidanceResponse'},
      	{ value: HealthcareService, name: 'HealthcareService'},
      	{ value: ImagingStudy, name: 'ImagingStudy'},
      	{ value: Immunization, name: 'Immunization'},
      	{ value: ImmunizationEvaluation, name: 'ImmunizationEvaluation'},
      	{ value: ImmunizationRecommendation, name: 'ImmunizationRecommendation'},
      	{ value: ImplementationGuide, name: 'ImplementationGuide'},
      	{ value: InsurancePlan, name: 'InsurancePlan'},
      	{ value: Invoice, name: 'Invoice'},
      	{ value: Library, name: 'Library'},
      	{ value: Linkage, name: 'Linkage'},
      	{ value: List, name: 'List'},
      	{ value: Location, name: 'Location'},
      	{ value: Measure, name: 'Measure'},
      	{ value: MeasureReport, name: 'MeasureReport'},
      	{ value: Media, name: 'Media'},
      	{ value: Medication, name: 'Medication'},
      	{ value: MedicationAdministration, name: 'MedicationAdministration'},
      	{ value: MedicationDispense, name: 'MedicationDispense'},
      	{ value: MedicationKnowledge, name: 'MedicationKnowledge'},
      	{ value: MedicationRequest, name: 'MedicationRequest'},
      	{ value: MedicationStatement, name: 'MedicationStatement'},
      	{ value: MedicinalProduct, name: 'MedicinalProduct'},
      	{ value: MedicinalProductAuthorization, name: 'MedicinalProductAuthorization'},
      	{ value: MedicinalProductContraindication, name: 'MedicinalProductContraindication'},
      	{ value: MedicinalProductIndication, name: 'MedicinalProductIndication'},
      	{ value: MedicinalProductIngredient, name: 'MedicinalProductIngredient'},
      	{ value: MedicinalProductInteraction, name: 'MedicinalProductInteraction'},
      	{ value: MedicinalProductManufactured, name: 'MedicinalProductManufactured'},
      	{ value: MedicinalProductPackaged, name: 'MedicinalProductPackaged'},
      	{ value: MedicinalProductPharmaceutical, name: 'MedicinalProductPharmaceutical'},
      	{ value: MedicinalProductUndesirableEffect, name: 'MedicinalProductUndesirableEffect'},
      	{ value: MessageDefinition, name: 'MessageDefinition'},
      	{ value: MessageHeader, name: 'MessageHeader'},
      	{ value: MolecularSequence, name: 'MolecularSequence'},
      	{ value: NamingSystem, name: 'NamingSystem'},
      	{ value: NutritionOrder, name: 'NutritionOrder'},
      	{ value: Observation, name: 'Observation'},
      	{ value: ObservationDefinition, name: 'ObservationDefinition'},
      	{ value: OperationDefinition, name: 'OperationDefinition'},
      	{ value: OperationOutcome, name: 'OperationOutcome'},
      	{ value: Organization, name: 'Organization'},
      	{ value: OrganizationAffiliation, name: 'OrganizationAffiliation'},
      	{ value: Parameters, name: 'Parameters'},
      	{ value: Patient, name: 'Patient'},
      	{ value: PaymentNotice, name: 'PaymentNotice'},
      	{ value: PaymentReconciliation, name: 'PaymentReconciliation'},
      	{ value: Person, name: 'Person'},
      	{ value: PlanDefinition, name: 'PlanDefinition'},
      	{ value: Practitioner, name: 'Practitioner'},
      	{ value: PractitionerRole, name: 'PractitionerRole'},
      	{ value: Procedure, name: 'Procedure'},
      	{ value: Provenance, name: 'Provenance'},
      	{ value: Questionnaire, name: 'Questionnaire'},
      	{ value: QuestionnaireResponse, name: 'QuestionnaireResponse'},
      	{ value: RelatedPerson, name: 'RelatedPerson'},
      	{ value: RequestGroup, name: 'RequestGroup'},
      	{ value: ResearchDefinition, name: 'ResearchDefinition'},
      	{ value: ResearchElementDefinition, name: 'ResearchElementDefinition'},
      	{ value: ResearchStudy, name: 'ResearchStudy'},
      	{ value: ResearchSubject, name: 'ResearchSubject'},
      	{ value: RiskAssessment, name: 'RiskAssessment'},
      	{ value: RiskEvidenceSynthesis, name: 'RiskEvidenceSynthesis'},
      	{ value: Schedule, name: 'Schedule'},
      	{ value: SearchParameter, name: 'SearchParameter'},
      	{ value: ServiceRequest, name: 'ServiceRequest'},
      	{ value: Slot, name: 'Slot'},
      	{ value: Specimen, name: 'Specimen'},
      	{ value: SpecimenDefinition, name: 'SpecimenDefinition'},
      	{ value: StructureDefinition, name: 'StructureDefinition'},
      	{ value: StructureMap, name: 'StructureMap'},
      	{ value: Subscription, name: 'Subscription'},
      	{ value: Substance, name: 'Substance'},
      	{ value: SubstanceNucleicAcid, name: 'SubstanceNucleicAcid'},
      	{ value: SubstancePolymer, name: 'SubstancePolymer'},
      	{ value: SubstanceProtein, name: 'SubstanceProtein'},
      	{ value: SubstanceReferenceInformation, name: 'SubstanceReferenceInformation'},
      	{ value: SubstanceSourceMaterial, name: 'SubstanceSourceMaterial'},
      	{ value: SubstanceSpecification, name: 'SubstanceSpecification'},
      	{ value: SupplyDelivery, name: 'SupplyDelivery'},
      	{ value: SupplyRequest, name: 'SupplyRequest'},
      	{ value: Task, name: 'Task'},
      	{ value: TerminologyCapabilities, name: 'TerminologyCapabilities'},
      	{ value: TestReport, name: 'TestReport'},
      	{ value: TestScript, name: 'TestScript'},
      	{ value: ValueSet, name: 'ValueSet'},
      	{ value: VerificationResult, name: 'VerificationResult'},
      	{ value: VisionPrescription, name: 'VisionPrescription'}
      ],
    }
  })
  protected contained?: ResourceList[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource and that modifies the understanding of the element that contains it and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met as part of the definition of
   * the extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Business identifiers assigned to this care plan by the performer or other systems which remain
   * constant as the resource is updated and propagates from server to server.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is
   * adhered to in whole or in part by this CarePlan.
   * Field access restricted because there are specific valid values.
   */
  protected instantiatesCanonical?: string[];

  /**
   * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition
   * that is adhered to in whole or in part by this CarePlan.
   * Field access restricted because there are specific valid values.
   */
  protected instantiatesUri?: string[];

  /**
   * Extensions for instantiatesUri
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _instantiatesUri?: Element[];

  /**
   * A care plan that is fulfilled in whole or in part by this care plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected basedOn?: Reference[];

  /**
   * Completed or terminated care plan whose function is taken by this new care plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected replaces?: Reference[];

  /**
   * A larger care plan of which this particular care plan is a component or step.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected partOf?: Reference[];

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected status?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _status?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected intent?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _intent?: Element;

  /**
   * Identifies what "kind" of plan this is to support differentiation between multiple co-existing
   * plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected category?: CodeableConcept[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected title?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _title?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   subject?: Reference;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   encounter?: Reference;

  /**
   * A time period defined by a start and end date and optionally time.
   */
  @Type(() => Period)
   period?: Period;

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected created?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _created?: Element;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   author?: Reference;

  /**
   * Identifies the individual(s) or organization who provided the contents of the care plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected contributor?: Reference[];

  /**
   * Identifies all people and organizations who are expected to be involved in the care envisioned by
   * this plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected careTeam?: Reference[];

  /**
   * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are
   * handled by this plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected addresses?: Reference[];

  /**
   * Identifies portions of the patient's record that specifically influenced the formation of the plan.
   * These might include comorbidities, recent procedures, limitations, recent assessments, etc.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected supportingInfo?: Reference[];

  /**
   * Describes the intended objective(s) of carrying out the care plan.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected goal?: Reference[];

  /**
   * Identifies a planned action to occur as part of the plan.  For example, a medication to be used,
   * lab tests to perform, self-monitoring, education, etc.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CarePlanActivity)
  protected activity?: CarePlanActivity[];

  /**
   * General notes about the care plan not covered elsewhere.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Annotation)
  protected note?: Annotation[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID_000.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID_000.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setImplicitRules(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.implicitRules) !== 'undefined') {
         delete this.implicitRules;
      }
      return;
    }
    
    if (REGEX_IMPLICITRULES.test(newValue)) {
      this.implicitRules = newValue
    } else {
      throw new Error("Invalid value pattern for implicitRules of " + newValue);
    }
  }
  
  public getImplicitRulesPattern(): string {
    return REGEX_IMPLICITRULES.source;
  }
  
  /**
  * Gets the current value of field implicitRules.
  * @returns the value  or undefined
  */
  public getImplicitRules(): string | undefined {
      return this.implicitRules;
  }

  /**
  * Gets the current value of field implicitRules if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getImplicitRulesOrElse(defaultValue: string): string {
      if (this.implicitRules == undefined || this.implicitRules == null ) { return defaultValue; }
      return this.implicitRules;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLanguage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.language) !== 'undefined') {
         delete this.language;
      }
      return;
    }
    
    if (REGEX_LANGUAGE.test(newValue)) {
      this.language = newValue
    } else {
      throw new Error("Invalid value pattern for language of " + newValue);
    }
  }
  
  public getLanguagePattern(): string {
    return REGEX_LANGUAGE.source;
  }
  
  /**
  * Gets the current value of field language.
  * @returns the value  or undefined
  */
  public getLanguage(): string | undefined {
      return this.language;
  }

  /**
  * Gets the current value of field language if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getLanguageOrElse(defaultValue: string): string {
      if (this.language == undefined || this.language == null ) { return defaultValue; }
      return this.language;
  }

  public addContained(newValue: ResourceList) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contained) !== 'undefined') {
         delete this.contained;
      }
      return;
    }
    
    if (typeof(this.contained) === 'undefined') {
      this.contained =  [];
    }
    this.contained.push(newValue);
  }
  /**
  * Removes all elements from the array contained, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteContainedAll(): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       const oldArray = this.contained;
       delete this.contained;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array contained, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteContainedBySplice(start: number, deleteCount?: number): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       return this.contained.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field contained.
  * @returns the value  or undefined
  */
  public getContained(): ResourceList[] | undefined {
      return this.contained;
  }

  /**
  * Gets the current value of field contained if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getContainedOrElse(defaultValue: ResourceList[]): ResourceList[] {
      if (this.contained == undefined || this.contained == null ) { return defaultValue; }
      return this.contained;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }
  /**
  * Removes all elements from the array identifier, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteIdentifierAll(): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       const oldArray = this.identifier;
       delete this.identifier;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array identifier, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteIdentifierBySplice(start: number, deleteCount?: number): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       return this.identifier.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field identifier.
  * @returns the value  or undefined
  */
  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  /**
  * Gets the current value of field identifier if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdentifierOrElse(defaultValue: Identifier[]): Identifier[] {
      if (this.identifier == undefined || this.identifier == null ) { return defaultValue; }
      return this.identifier;
  }

  public addInstantiatesCanonical(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.instantiatesCanonical) !== 'undefined') {
         delete this.instantiatesCanonical;
      }
      return;
    }
    
    if (typeof(this.instantiatesCanonical) === 'undefined') {
      this.instantiatesCanonical =  [];
    }
    this.instantiatesCanonical.push(newValue);
  }
  /**
  * Removes all elements from the array instantiatesCanonical, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteInstantiatesCanonicalAll(): string[] {
    if (typeof(this.instantiatesCanonical) !== 'undefined') {
       const oldArray = this.instantiatesCanonical;
       delete this.instantiatesCanonical;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array instantiatesCanonical, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteInstantiatesCanonicalBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.instantiatesCanonical) !== 'undefined') {
       return this.instantiatesCanonical.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field instantiatesCanonical.
  * @returns the value  or undefined
  */
  public getInstantiatesCanonical(): string[] | undefined {
      return this.instantiatesCanonical;
  }

  /**
  * Gets the current value of field instantiatesCanonical if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getInstantiatesCanonicalOrElse(defaultValue: string[]): string[] {
      if (this.instantiatesCanonical == undefined || this.instantiatesCanonical == null ) { return defaultValue; }
      return this.instantiatesCanonical;
  }

  public addInstantiatesUri(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.instantiatesUri) !== 'undefined') {
         delete this.instantiatesUri;
      }
      return;
    }
    
    if (typeof(this.instantiatesUri) === 'undefined') {
      this.instantiatesUri =  [];
    }
    this.instantiatesUri.push(newValue);
  }
  /**
  * Removes all elements from the array instantiatesUri, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteInstantiatesUriAll(): string[] {
    if (typeof(this.instantiatesUri) !== 'undefined') {
       const oldArray = this.instantiatesUri;
       delete this.instantiatesUri;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array instantiatesUri, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteInstantiatesUriBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.instantiatesUri) !== 'undefined') {
       return this.instantiatesUri.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field instantiatesUri.
  * @returns the value  or undefined
  */
  public getInstantiatesUri(): string[] | undefined {
      return this.instantiatesUri;
  }

  /**
  * Gets the current value of field instantiatesUri if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getInstantiatesUriOrElse(defaultValue: string[]): string[] {
      if (this.instantiatesUri == undefined || this.instantiatesUri == null ) { return defaultValue; }
      return this.instantiatesUri;
  }

  public add_instantiatesUri(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._instantiatesUri) !== 'undefined') {
         delete this._instantiatesUri;
      }
      return;
    }
    
    if (typeof(this._instantiatesUri) === 'undefined') {
      this._instantiatesUri =  [];
    }
    this._instantiatesUri.push(newValue);
  }
  /**
  * Removes all elements from the array _instantiatesUri, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_instantiatesUriAll(): Element[] {
    if (typeof(this._instantiatesUri) !== 'undefined') {
       const oldArray = this._instantiatesUri;
       delete this._instantiatesUri;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _instantiatesUri, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_instantiatesUriBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._instantiatesUri) !== 'undefined') {
       return this._instantiatesUri.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _instantiatesUri.
  * @returns the value  or undefined
  */
  public get_instantiatesUri(): Element[] | undefined {
      return this._instantiatesUri;
  }

  /**
  * Gets the current value of field _instantiatesUri if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public get_instantiatesUriOrElse(defaultValue: Element[]): Element[] {
      if (this._instantiatesUri == undefined || this._instantiatesUri == null ) { return defaultValue; }
      return this._instantiatesUri;
  }

  public addBasedOn(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.basedOn) !== 'undefined') {
         delete this.basedOn;
      }
      return;
    }
    
    if (typeof(this.basedOn) === 'undefined') {
      this.basedOn =  [];
    }
    this.basedOn.push(newValue);
  }
  /**
  * Removes all elements from the array basedOn, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteBasedOnAll(): Reference[] {
    if (typeof(this.basedOn) !== 'undefined') {
       const oldArray = this.basedOn;
       delete this.basedOn;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array basedOn, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteBasedOnBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.basedOn) !== 'undefined') {
       return this.basedOn.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field basedOn.
  * @returns the value  or undefined
  */
  public getBasedOn(): Reference[] | undefined {
      return this.basedOn;
  }

  /**
  * Gets the current value of field basedOn if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getBasedOnOrElse(defaultValue: Reference[]): Reference[] {
      if (this.basedOn == undefined || this.basedOn == null ) { return defaultValue; }
      return this.basedOn;
  }

  public addReplaces(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.replaces) !== 'undefined') {
         delete this.replaces;
      }
      return;
    }
    
    if (typeof(this.replaces) === 'undefined') {
      this.replaces =  [];
    }
    this.replaces.push(newValue);
  }
  /**
  * Removes all elements from the array replaces, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReplacesAll(): Reference[] {
    if (typeof(this.replaces) !== 'undefined') {
       const oldArray = this.replaces;
       delete this.replaces;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array replaces, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReplacesBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.replaces) !== 'undefined') {
       return this.replaces.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field replaces.
  * @returns the value  or undefined
  */
  public getReplaces(): Reference[] | undefined {
      return this.replaces;
  }

  /**
  * Gets the current value of field replaces if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getReplacesOrElse(defaultValue: Reference[]): Reference[] {
      if (this.replaces == undefined || this.replaces == null ) { return defaultValue; }
      return this.replaces;
  }

  public addPartOf(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.partOf) !== 'undefined') {
         delete this.partOf;
      }
      return;
    }
    
    if (typeof(this.partOf) === 'undefined') {
      this.partOf =  [];
    }
    this.partOf.push(newValue);
  }
  /**
  * Removes all elements from the array partOf, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePartOfAll(): Reference[] {
    if (typeof(this.partOf) !== 'undefined') {
       const oldArray = this.partOf;
       delete this.partOf;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array partOf, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePartOfBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.partOf) !== 'undefined') {
       return this.partOf.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field partOf.
  * @returns the value  or undefined
  */
  public getPartOf(): Reference[] | undefined {
      return this.partOf;
  }

  /**
  * Gets the current value of field partOf if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getPartOfOrElse(defaultValue: Reference[]): Reference[] {
      if (this.partOf == undefined || this.partOf == null ) { return defaultValue; }
      return this.partOf;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setStatus(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.status) !== 'undefined') {
         delete this.status;
      }
      return;
    }
    
    if (REGEX_STATUS_000.test(newValue)) {
      this.status = newValue
    } else {
      throw new Error("Invalid value pattern for status of " + newValue);
    }
  }
  
  public getStatusPattern(): string {
    return REGEX_STATUS_000.source;
  }
  
  /**
  * Gets the current value of field status.
  * @returns the value  or undefined
  */
  public getStatus(): string | undefined {
      return this.status;
  }

  /**
  * Gets the current value of field status if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getStatusOrElse(defaultValue: string): string {
      if (this.status == undefined || this.status == null ) { return defaultValue; }
      return this.status;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setIntent(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.intent) !== 'undefined') {
         delete this.intent;
      }
      return;
    }
    
    if (REGEX_INTENT.test(newValue)) {
      this.intent = newValue
    } else {
      throw new Error("Invalid value pattern for intent of " + newValue);
    }
  }
  
  public getIntentPattern(): string {
    return REGEX_INTENT.source;
  }
  
  /**
  * Gets the current value of field intent.
  * @returns the value  or undefined
  */
  public getIntent(): string | undefined {
      return this.intent;
  }

  /**
  * Gets the current value of field intent if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIntentOrElse(defaultValue: string): string {
      if (this.intent == undefined || this.intent == null ) { return defaultValue; }
      return this.intent;
  }

  public addCategory(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.category) !== 'undefined') {
         delete this.category;
      }
      return;
    }
    
    if (typeof(this.category) === 'undefined') {
      this.category =  [];
    }
    this.category.push(newValue);
  }
  /**
  * Removes all elements from the array category, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCategoryAll(): CodeableConcept[] {
    if (typeof(this.category) !== 'undefined') {
       const oldArray = this.category;
       delete this.category;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array category, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCategoryBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.category) !== 'undefined') {
       return this.category.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field category.
  * @returns the value  or undefined
  */
  public getCategory(): CodeableConcept[] | undefined {
      return this.category;
  }

  /**
  * Gets the current value of field category if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getCategoryOrElse(defaultValue: CodeableConcept[]): CodeableConcept[] {
      if (this.category == undefined || this.category == null ) { return defaultValue; }
      return this.category;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTitle(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.title) !== 'undefined') {
         delete this.title;
      }
      return;
    }
    
    if (REGEX_TITLE.test(newValue)) {
      this.title = newValue
    } else {
      throw new Error("Invalid value pattern for title of " + newValue);
    }
  }
  
  public getTitlePattern(): string {
    return REGEX_TITLE.source;
  }
  
  /**
  * Gets the current value of field title.
  * @returns the value  or undefined
  */
  public getTitle(): string | undefined {
      return this.title;
  }

  /**
  * Gets the current value of field title if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getTitleOrElse(defaultValue: string): string {
      if (this.title == undefined || this.title == null ) { return defaultValue; }
      return this.title;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  
  /**
  * Gets the current value of field description.
  * @returns the value  or undefined
  */
  public getDescription(): string | undefined {
      return this.description;
  }

  /**
  * Gets the current value of field description if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getDescriptionOrElse(defaultValue: string): string {
      if (this.description == undefined || this.description == null ) { return defaultValue; }
      return this.description;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCreated(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.created) !== 'undefined') {
         delete this.created;
      }
      return;
    }
    
    if (REGEX_CREATED.test(newValue)) {
      this.created = newValue
    } else {
      throw new Error("Invalid value pattern for created of " + newValue);
    }
  }
  
  public getCreatedPattern(): string {
    return REGEX_CREATED.source;
  }
  
  /**
  * Gets the current value of field created.
  * @returns the value  or undefined
  */
  public getCreated(): string | undefined {
      return this.created;
  }

  /**
  * Gets the current value of field created if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getCreatedOrElse(defaultValue: string): string {
      if (this.created == undefined || this.created == null ) { return defaultValue; }
      return this.created;
  }

  public addContributor(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contributor) !== 'undefined') {
         delete this.contributor;
      }
      return;
    }
    
    if (typeof(this.contributor) === 'undefined') {
      this.contributor =  [];
    }
    this.contributor.push(newValue);
  }
  /**
  * Removes all elements from the array contributor, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteContributorAll(): Reference[] {
    if (typeof(this.contributor) !== 'undefined') {
       const oldArray = this.contributor;
       delete this.contributor;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array contributor, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteContributorBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.contributor) !== 'undefined') {
       return this.contributor.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field contributor.
  * @returns the value  or undefined
  */
  public getContributor(): Reference[] | undefined {
      return this.contributor;
  }

  /**
  * Gets the current value of field contributor if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getContributorOrElse(defaultValue: Reference[]): Reference[] {
      if (this.contributor == undefined || this.contributor == null ) { return defaultValue; }
      return this.contributor;
  }

  public addCareTeam(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.careTeam) !== 'undefined') {
         delete this.careTeam;
      }
      return;
    }
    
    if (typeof(this.careTeam) === 'undefined') {
      this.careTeam =  [];
    }
    this.careTeam.push(newValue);
  }
  /**
  * Removes all elements from the array careTeam, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteCareTeamAll(): Reference[] {
    if (typeof(this.careTeam) !== 'undefined') {
       const oldArray = this.careTeam;
       delete this.careTeam;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array careTeam, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteCareTeamBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.careTeam) !== 'undefined') {
       return this.careTeam.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field careTeam.
  * @returns the value  or undefined
  */
  public getCareTeam(): Reference[] | undefined {
      return this.careTeam;
  }

  /**
  * Gets the current value of field careTeam if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getCareTeamOrElse(defaultValue: Reference[]): Reference[] {
      if (this.careTeam == undefined || this.careTeam == null ) { return defaultValue; }
      return this.careTeam;
  }

  public addAddresses(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.addresses) !== 'undefined') {
         delete this.addresses;
      }
      return;
    }
    
    if (typeof(this.addresses) === 'undefined') {
      this.addresses =  [];
    }
    this.addresses.push(newValue);
  }
  /**
  * Removes all elements from the array addresses, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteAddressesAll(): Reference[] {
    if (typeof(this.addresses) !== 'undefined') {
       const oldArray = this.addresses;
       delete this.addresses;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array addresses, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteAddressesBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.addresses) !== 'undefined') {
       return this.addresses.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field addresses.
  * @returns the value  or undefined
  */
  public getAddresses(): Reference[] | undefined {
      return this.addresses;
  }

  /**
  * Gets the current value of field addresses if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getAddressesOrElse(defaultValue: Reference[]): Reference[] {
      if (this.addresses == undefined || this.addresses == null ) { return defaultValue; }
      return this.addresses;
  }

  public addSupportingInfo(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.supportingInfo) !== 'undefined') {
         delete this.supportingInfo;
      }
      return;
    }
    
    if (typeof(this.supportingInfo) === 'undefined') {
      this.supportingInfo =  [];
    }
    this.supportingInfo.push(newValue);
  }
  /**
  * Removes all elements from the array supportingInfo, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSupportingInfoAll(): Reference[] {
    if (typeof(this.supportingInfo) !== 'undefined') {
       const oldArray = this.supportingInfo;
       delete this.supportingInfo;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array supportingInfo, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSupportingInfoBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.supportingInfo) !== 'undefined') {
       return this.supportingInfo.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field supportingInfo.
  * @returns the value  or undefined
  */
  public getSupportingInfo(): Reference[] | undefined {
      return this.supportingInfo;
  }

  /**
  * Gets the current value of field supportingInfo if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getSupportingInfoOrElse(defaultValue: Reference[]): Reference[] {
      if (this.supportingInfo == undefined || this.supportingInfo == null ) { return defaultValue; }
      return this.supportingInfo;
  }

  public addGoal(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.goal) !== 'undefined') {
         delete this.goal;
      }
      return;
    }
    
    if (typeof(this.goal) === 'undefined') {
      this.goal =  [];
    }
    this.goal.push(newValue);
  }
  /**
  * Removes all elements from the array goal, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteGoalAll(): Reference[] {
    if (typeof(this.goal) !== 'undefined') {
       const oldArray = this.goal;
       delete this.goal;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array goal, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteGoalBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.goal) !== 'undefined') {
       return this.goal.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field goal.
  * @returns the value  or undefined
  */
  public getGoal(): Reference[] | undefined {
      return this.goal;
  }

  /**
  * Gets the current value of field goal if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getGoalOrElse(defaultValue: Reference[]): Reference[] {
      if (this.goal == undefined || this.goal == null ) { return defaultValue; }
      return this.goal;
  }

  public addActivity(newValue: CarePlanActivity) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.activity) !== 'undefined') {
         delete this.activity;
      }
      return;
    }
    
    if (typeof(this.activity) === 'undefined') {
      this.activity =  [];
    }
    this.activity.push(newValue);
  }
  /**
  * Removes all elements from the array activity, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteActivityAll(): CarePlanActivity[] {
    if (typeof(this.activity) !== 'undefined') {
       const oldArray = this.activity;
       delete this.activity;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array activity, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteActivityBySplice(start: number, deleteCount?: number): CarePlanActivity[] {
    if (typeof(this.activity) !== 'undefined') {
       return this.activity.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field activity.
  * @returns the value  or undefined
  */
  public getActivity(): CarePlanActivity[] | undefined {
      return this.activity;
  }

  /**
  * Gets the current value of field activity if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getActivityOrElse(defaultValue: CarePlanActivity[]): CarePlanActivity[] {
      if (this.activity == undefined || this.activity == null ) { return defaultValue; }
      return this.activity;
  }

  public addNote(newValue: Annotation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.note) !== 'undefined') {
         delete this.note;
      }
      return;
    }
    
    if (typeof(this.note) === 'undefined') {
      this.note =  [];
    }
    this.note.push(newValue);
  }
  /**
  * Removes all elements from the array note, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteNoteAll(): Annotation[] {
    if (typeof(this.note) !== 'undefined') {
       const oldArray = this.note;
       delete this.note;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array note, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteNoteBySplice(start: number, deleteCount?: number): Annotation[] {
    if (typeof(this.note) !== 'undefined') {
       return this.note.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field note.
  * @returns the value  or undefined
  */
  public getNote(): Annotation[] | undefined {
      return this.note;
  }

  /**
  * Gets the current value of field note if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getNoteOrElse(defaultValue: Annotation[]): Annotation[] {
      if (this.note == undefined || this.note == null ) { return defaultValue; }
      return this.note;
  }


}


