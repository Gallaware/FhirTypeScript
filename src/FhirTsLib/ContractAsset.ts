import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_CONDITION, REGEX_TEXT } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Coding, ContractAnswer, ContractContext, ContractValuedItem, Element, Extension, Period, Reference } from './FhirType';



/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or
 * agreement.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Contract_Asset
 */
export class ContractAsset {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   scope?: CodeableConcept;

  /**
   * Target entity type about which the term may be concerned.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected type?: CodeableConcept[];

  /**
   * Associated entities.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected typeReference?: Reference[];

  /**
   * May be a subtype or part of an offered asset.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected subtype?: CodeableConcept[];

  /**
   * A reference to a code defined by a terminology system.
   */
  @Type(() => Coding)
   relationship?: Coding;

  /**
   * Circumstance of the asset.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContractContext)
  protected context?: ContractContext[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected condition?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _condition?: Element;

  /**
   * Type of Asset availability for use or ownership.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected periodType?: CodeableConcept[];

  /**
   * Asset relevant contractual time period.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Period)
  protected period?: Period[];

  /**
   * Time period of asset use.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Period)
  protected usePeriod?: Period[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected text?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _text?: Element;

  /**
   * Id [identifier??] of the clause or question text about the asset in the referenced form or
   * QuestionnaireResponse.
   * Field access restricted because there are specific valid values.
   */
  protected linkId?: string[];

  /**
   * Extensions for linkId
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _linkId?: Element[];

  /**
   * Response to assets.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContractAnswer)
  protected answer?: ContractAnswer[];

  /**
   * Security labels that protects the asset.
   * Field access restricted because there are specific valid values.
   */
  protected securityLabelNumber?: number[];

  /**
   * Extensions for securityLabelNumber
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _securityLabelNumber?: Element[];

  /**
   * Contract Valued Item List.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ContractValuedItem)
  protected valuedItem?: ContractValuedItem[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addType(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    if (typeof(this.type) === 'undefined') {
      this.type =  [];
    }
    this.type.push(newValue);
  }

  public getType(): CodeableConcept[] | undefined {
      return this.type;
  }

  public addTypeReference(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.typeReference) !== 'undefined') {
         delete this.typeReference;
      }
      return;
    }
    
    if (typeof(this.typeReference) === 'undefined') {
      this.typeReference =  [];
    }
    this.typeReference.push(newValue);
  }

  public getTypeReference(): Reference[] | undefined {
      return this.typeReference;
  }

  public addSubtype(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.subtype) !== 'undefined') {
         delete this.subtype;
      }
      return;
    }
    
    if (typeof(this.subtype) === 'undefined') {
      this.subtype =  [];
    }
    this.subtype.push(newValue);
  }

  public getSubtype(): CodeableConcept[] | undefined {
      return this.subtype;
  }

  public addContext(newValue: ContractContext) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.context) !== 'undefined') {
         delete this.context;
      }
      return;
    }
    
    if (typeof(this.context) === 'undefined') {
      this.context =  [];
    }
    this.context.push(newValue);
  }

  public getContext(): ContractContext[] | undefined {
      return this.context;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCondition(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.condition) !== 'undefined') {
         delete this.condition;
      }
      return;
    }
    
    if (REGEX_CONDITION.test(newValue)) {
      this.condition = newValue
    } else {
      throw new Error("Invalid value pattern for condition of " + newValue);
    }
  }
  
  public getConditionPattern(): string {
    return REGEX_CONDITION.source;
  }
  

  public getCondition(): string | undefined {
      return this.condition;
  }

  public addPeriodType(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.periodType) !== 'undefined') {
         delete this.periodType;
      }
      return;
    }
    
    if (typeof(this.periodType) === 'undefined') {
      this.periodType =  [];
    }
    this.periodType.push(newValue);
  }

  public getPeriodType(): CodeableConcept[] | undefined {
      return this.periodType;
  }

  public addPeriod(newValue: Period) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.period) !== 'undefined') {
         delete this.period;
      }
      return;
    }
    
    if (typeof(this.period) === 'undefined') {
      this.period =  [];
    }
    this.period.push(newValue);
  }

  public getPeriod(): Period[] | undefined {
      return this.period;
  }

  public addUsePeriod(newValue: Period) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.usePeriod) !== 'undefined') {
         delete this.usePeriod;
      }
      return;
    }
    
    if (typeof(this.usePeriod) === 'undefined') {
      this.usePeriod =  [];
    }
    this.usePeriod.push(newValue);
  }

  public getUsePeriod(): Period[] | undefined {
      return this.usePeriod;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setText(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.text) !== 'undefined') {
         delete this.text;
      }
      return;
    }
    
    if (REGEX_TEXT.test(newValue)) {
      this.text = newValue
    } else {
      throw new Error("Invalid value pattern for text of " + newValue);
    }
  }
  
  public getTextPattern(): string {
    return REGEX_TEXT.source;
  }
  

  public getText(): string | undefined {
      return this.text;
  }

  public addLinkId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.linkId) !== 'undefined') {
         delete this.linkId;
      }
      return;
    }
    
    if (typeof(this.linkId) === 'undefined') {
      this.linkId =  [];
    }
    this.linkId.push(newValue);
  }

  public getLinkId(): string[] | undefined {
      return this.linkId;
  }

  public add_linkId(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._linkId) !== 'undefined') {
         delete this._linkId;
      }
      return;
    }
    
    if (typeof(this._linkId) === 'undefined') {
      this._linkId =  [];
    }
    this._linkId.push(newValue);
  }

  public get_linkId(): Element[] | undefined {
      return this._linkId;
  }

  public addAnswer(newValue: ContractAnswer) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.answer) !== 'undefined') {
         delete this.answer;
      }
      return;
    }
    
    if (typeof(this.answer) === 'undefined') {
      this.answer =  [];
    }
    this.answer.push(newValue);
  }

  public getAnswer(): ContractAnswer[] | undefined {
      return this.answer;
  }

  public addSecurityLabelNumber(newValue: number) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.securityLabelNumber) !== 'undefined') {
         delete this.securityLabelNumber;
      }
      return;
    }
    
    if (typeof(this.securityLabelNumber) === 'undefined') {
      this.securityLabelNumber =  [];
    }
    this.securityLabelNumber.push(newValue);
  }

  public getSecurityLabelNumber(): number[] | undefined {
      return this.securityLabelNumber;
  }

  public add_securityLabelNumber(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._securityLabelNumber) !== 'undefined') {
         delete this._securityLabelNumber;
      }
      return;
    }
    
    if (typeof(this._securityLabelNumber) === 'undefined') {
      this._securityLabelNumber =  [];
    }
    this._securityLabelNumber.push(newValue);
  }

  public get_securityLabelNumber(): Element[] | undefined {
      return this._securityLabelNumber;
  }

  public addValuedItem(newValue: ContractValuedItem) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.valuedItem) !== 'undefined') {
         delete this.valuedItem;
      }
      return;
    }
    
    if (typeof(this.valuedItem) === 'undefined') {
      this.valuedItem =  [];
    }
    this.valuedItem.push(newValue);
  }

  public getValuedItem(): ContractValuedItem[] | undefined {
      return this.valuedItem;
  }


}


