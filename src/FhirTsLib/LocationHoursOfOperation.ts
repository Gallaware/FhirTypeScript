import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_OPENINGTIME, REGEX_CLOSINGTIME } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension } from './index';



/**
 * Details and position information for a physical place where services are provided and resources and
 * participants may be stored, found, contained, or accommodated.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Location_HoursOfOperation
 */
export class LocationHoursOfOperation {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Indicates which days of the week are available between the start and end Times.
   * Field access restricted because there are specific valid values.
   */
  protected daysOfWeek?: string[];

  /**
   * Extensions for daysOfWeek
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _daysOfWeek?: Element[];

  /**
   * Value of "true" or "false"
   */
   allDay?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _allDay?: Element;

  /**
   * A time during the day, with no date specified
   * Field access restricted because there are specific valid values.
   */
  protected openingTime?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _openingTime?: Element;

  /**
   * A time during the day, with no date specified
   * Field access restricted because there are specific valid values.
   */
  protected closingTime?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _closingTime?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addDaysOfWeek(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.daysOfWeek) !== 'undefined') {
         delete this.daysOfWeek;
      }
      return;
    }
    
    if (typeof(this.daysOfWeek) === 'undefined') {
      this.daysOfWeek =  [];
    }
    this.daysOfWeek.push(newValue);
  }
  /**
  * Removes all elements from the array daysOfWeek, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDaysOfWeekAll(): string[] {
    if (typeof(this.daysOfWeek) !== 'undefined') {
       const oldArray = this.daysOfWeek;
       delete this.daysOfWeek;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array daysOfWeek, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDaysOfWeekBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.daysOfWeek) !== 'undefined') {
       return this.daysOfWeek.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field daysOfWeek.
  * @returns the value  or undefined
  */
  public getDaysOfWeek(): string[] | undefined {
      return this.daysOfWeek;
  }

  public add_daysOfWeek(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._daysOfWeek) !== 'undefined') {
         delete this._daysOfWeek;
      }
      return;
    }
    
    if (typeof(this._daysOfWeek) === 'undefined') {
      this._daysOfWeek =  [];
    }
    this._daysOfWeek.push(newValue);
  }
  /**
  * Removes all elements from the array _daysOfWeek, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_daysOfWeekAll(): Element[] {
    if (typeof(this._daysOfWeek) !== 'undefined') {
       const oldArray = this._daysOfWeek;
       delete this._daysOfWeek;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _daysOfWeek, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_daysOfWeekBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._daysOfWeek) !== 'undefined') {
       return this._daysOfWeek.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _daysOfWeek.
  * @returns the value  or undefined
  */
  public get_daysOfWeek(): Element[] | undefined {
      return this._daysOfWeek;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setOpeningTime(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.openingTime) !== 'undefined') {
         delete this.openingTime;
      }
      return;
    }
    
    if (REGEX_OPENINGTIME.test(newValue)) {
      this.openingTime = newValue
    } else {
      throw new Error("Invalid value pattern for openingTime of " + newValue);
    }
  }
  
  public getOpeningTimePattern(): string {
    return REGEX_OPENINGTIME.source;
  }
  
  /**
  * Gets the current value of field openingTime.
  * @returns the value  or undefined
  */
  public getOpeningTime(): string | undefined {
      return this.openingTime;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setClosingTime(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.closingTime) !== 'undefined') {
         delete this.closingTime;
      }
      return;
    }
    
    if (REGEX_CLOSINGTIME.test(newValue)) {
      this.closingTime = newValue
    } else {
      throw new Error("Invalid value pattern for closingTime of " + newValue);
    }
  }
  
  public getClosingTimePattern(): string {
    return REGEX_CLOSINGTIME.source;
  }
  
  /**
  * Gets the current value of field closingTime.
  * @returns the value  or undefined
  */
  public getClosingTime(): string | undefined {
      return this.closingTime;
  }


}


