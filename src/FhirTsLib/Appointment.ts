import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID_000, REGEX_IMPLICITRULES, REGEX_LANGUAGE, REGEX_DESCRIPTION, REGEX_START_000, REGEX_END_000, REGEX_CREATED, REGEX_COMMENT, REGEX_PATIENTINSTRUCTION } from '../FhirTsLibValidation/FhirRegex';
import { AppointmentParticipant, CodeableConcept, Element, Extension, Identifier, Meta, Narrative, Period, Reference, ResourceList, Account, ActivityDefinition, AdverseEvent, AllergyIntolerance, AppointmentResponse, AuditEvent, Basic, Binary, BiologicallyDerivedProduct, BodyStructure, Bundle, CapabilityStatement, CarePlan, CareTeam, CatalogEntry, ChargeItem, ChargeItemDefinition, Claim, ClaimResponse, ClinicalImpression, CodeSystem, Communication, CommunicationRequest, CompartmentDefinition, Composition, ConceptMap, Condition, Consent, Contract, Coverage, CoverageEligibilityRequest, CoverageEligibilityResponse, DetectedIssue, Device, DeviceDefinition, DeviceMetric, DeviceRequest, DeviceUseStatement, DiagnosticReport, DocumentManifest, DocumentReference, EffectEvidenceSynthesis, Encounter, Endpoint, EnrollmentRequest, EnrollmentResponse, EpisodeOfCare, EventDefinition, Evidence, EvidenceVariable, ExampleScenario, ExplanationOfBenefit, FamilyMemberHistory, Flag, Goal, GraphDefinition, Group, GuidanceResponse, HealthcareService, ImagingStudy, Immunization, ImmunizationEvaluation, ImmunizationRecommendation, ImplementationGuide, InsurancePlan, Invoice, Library, Linkage, List, Location, Measure, MeasureReport, Media, Medication, MedicationAdministration, MedicationDispense, MedicationKnowledge, MedicationRequest, MedicationStatement, MedicinalProduct, MedicinalProductAuthorization, MedicinalProductContraindication, MedicinalProductIndication, MedicinalProductIngredient, MedicinalProductInteraction, MedicinalProductManufactured, MedicinalProductPackaged, MedicinalProductPharmaceutical, MedicinalProductUndesirableEffect, MessageDefinition, MessageHeader, MolecularSequence, NamingSystem, NutritionOrder, Observation, ObservationDefinition, OperationDefinition, OperationOutcome, Organization, OrganizationAffiliation, Parameters, Patient, PaymentNotice, PaymentReconciliation, Person, PlanDefinition, Practitioner, PractitionerRole, Procedure, Provenance, Questionnaire, QuestionnaireResponse, RelatedPerson, RequestGroup, ResearchDefinition, ResearchElementDefinition, ResearchStudy, ResearchSubject, RiskAssessment, RiskEvidenceSynthesis, Schedule, SearchParameter, ServiceRequest, Slot, Specimen, SpecimenDefinition, StructureDefinition, StructureMap, Subscription, Substance, SubstanceNucleicAcid, SubstancePolymer, SubstanceProtein, SubstanceReferenceInformation, SubstanceSourceMaterial, SubstanceSpecification, SupplyDelivery, SupplyRequest, Task, TerminologyCapabilities, TestReport, TestScript, ValueSet, VerificationResult, VisionPrescription } from './index';
import { AppointmentStatus_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or
 * device(s) for a specific date/time. This may result in one or more Encounter(s).
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Appointment
 */
export class Appointment {
  /**
   * This is a Appointment resource
   */
     resourceType = "Appointment";

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * The metadata about a resource. This is content in the resource that is maintained by the
   * infrastructure. Changes to the content might not always be associated with version changes to the
   * resource.
   */
  @Type(() => Meta)
   meta?: Meta;

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected implicitRules?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _implicitRules?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected language?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _language?: Element;

  /**
   * A human-readable summary of the resource conveying the essential clinical and business information
   * for the resource.
   */
  @Type(() => Narrative)
   text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the resource that contains them -
   * they cannot be identified independently, and nor can they have their own independent transaction
   * scope.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ResourceList, {
          discriminator: {
    property: 'resourceType',
    subTypes: [
      	{ value: Account, name: 'Account'},
      	{ value: ActivityDefinition, name: 'ActivityDefinition'},
      	{ value: AdverseEvent, name: 'AdverseEvent'},
      	{ value: AllergyIntolerance, name: 'AllergyIntolerance'},
      	{ value: Appointment, name: 'Appointment'},
      	{ value: AppointmentResponse, name: 'AppointmentResponse'},
      	{ value: AuditEvent, name: 'AuditEvent'},
      	{ value: Basic, name: 'Basic'},
      	{ value: Binary, name: 'Binary'},
      	{ value: BiologicallyDerivedProduct, name: 'BiologicallyDerivedProduct'},
      	{ value: BodyStructure, name: 'BodyStructure'},
      	{ value: Bundle, name: 'Bundle'},
      	{ value: CapabilityStatement, name: 'CapabilityStatement'},
      	{ value: CarePlan, name: 'CarePlan'},
      	{ value: CareTeam, name: 'CareTeam'},
      	{ value: CatalogEntry, name: 'CatalogEntry'},
      	{ value: ChargeItem, name: 'ChargeItem'},
      	{ value: ChargeItemDefinition, name: 'ChargeItemDefinition'},
      	{ value: Claim, name: 'Claim'},
      	{ value: ClaimResponse, name: 'ClaimResponse'},
      	{ value: ClinicalImpression, name: 'ClinicalImpression'},
      	{ value: CodeSystem, name: 'CodeSystem'},
      	{ value: Communication, name: 'Communication'},
      	{ value: CommunicationRequest, name: 'CommunicationRequest'},
      	{ value: CompartmentDefinition, name: 'CompartmentDefinition'},
      	{ value: Composition, name: 'Composition'},
      	{ value: ConceptMap, name: 'ConceptMap'},
      	{ value: Condition, name: 'Condition'},
      	{ value: Consent, name: 'Consent'},
      	{ value: Contract, name: 'Contract'},
      	{ value: Coverage, name: 'Coverage'},
      	{ value: CoverageEligibilityRequest, name: 'CoverageEligibilityRequest'},
      	{ value: CoverageEligibilityResponse, name: 'CoverageEligibilityResponse'},
      	{ value: DetectedIssue, name: 'DetectedIssue'},
      	{ value: Device, name: 'Device'},
      	{ value: DeviceDefinition, name: 'DeviceDefinition'},
      	{ value: DeviceMetric, name: 'DeviceMetric'},
      	{ value: DeviceRequest, name: 'DeviceRequest'},
      	{ value: DeviceUseStatement, name: 'DeviceUseStatement'},
      	{ value: DiagnosticReport, name: 'DiagnosticReport'},
      	{ value: DocumentManifest, name: 'DocumentManifest'},
      	{ value: DocumentReference, name: 'DocumentReference'},
      	{ value: EffectEvidenceSynthesis, name: 'EffectEvidenceSynthesis'},
      	{ value: Encounter, name: 'Encounter'},
      	{ value: Endpoint, name: 'Endpoint'},
      	{ value: EnrollmentRequest, name: 'EnrollmentRequest'},
      	{ value: EnrollmentResponse, name: 'EnrollmentResponse'},
      	{ value: EpisodeOfCare, name: 'EpisodeOfCare'},
      	{ value: EventDefinition, name: 'EventDefinition'},
      	{ value: Evidence, name: 'Evidence'},
      	{ value: EvidenceVariable, name: 'EvidenceVariable'},
      	{ value: ExampleScenario, name: 'ExampleScenario'},
      	{ value: ExplanationOfBenefit, name: 'ExplanationOfBenefit'},
      	{ value: FamilyMemberHistory, name: 'FamilyMemberHistory'},
      	{ value: Flag, name: 'Flag'},
      	{ value: Goal, name: 'Goal'},
      	{ value: GraphDefinition, name: 'GraphDefinition'},
      	{ value: Group, name: 'Group'},
      	{ value: GuidanceResponse, name: 'GuidanceResponse'},
      	{ value: HealthcareService, name: 'HealthcareService'},
      	{ value: ImagingStudy, name: 'ImagingStudy'},
      	{ value: Immunization, name: 'Immunization'},
      	{ value: ImmunizationEvaluation, name: 'ImmunizationEvaluation'},
      	{ value: ImmunizationRecommendation, name: 'ImmunizationRecommendation'},
      	{ value: ImplementationGuide, name: 'ImplementationGuide'},
      	{ value: InsurancePlan, name: 'InsurancePlan'},
      	{ value: Invoice, name: 'Invoice'},
      	{ value: Library, name: 'Library'},
      	{ value: Linkage, name: 'Linkage'},
      	{ value: List, name: 'List'},
      	{ value: Location, name: 'Location'},
      	{ value: Measure, name: 'Measure'},
      	{ value: MeasureReport, name: 'MeasureReport'},
      	{ value: Media, name: 'Media'},
      	{ value: Medication, name: 'Medication'},
      	{ value: MedicationAdministration, name: 'MedicationAdministration'},
      	{ value: MedicationDispense, name: 'MedicationDispense'},
      	{ value: MedicationKnowledge, name: 'MedicationKnowledge'},
      	{ value: MedicationRequest, name: 'MedicationRequest'},
      	{ value: MedicationStatement, name: 'MedicationStatement'},
      	{ value: MedicinalProduct, name: 'MedicinalProduct'},
      	{ value: MedicinalProductAuthorization, name: 'MedicinalProductAuthorization'},
      	{ value: MedicinalProductContraindication, name: 'MedicinalProductContraindication'},
      	{ value: MedicinalProductIndication, name: 'MedicinalProductIndication'},
      	{ value: MedicinalProductIngredient, name: 'MedicinalProductIngredient'},
      	{ value: MedicinalProductInteraction, name: 'MedicinalProductInteraction'},
      	{ value: MedicinalProductManufactured, name: 'MedicinalProductManufactured'},
      	{ value: MedicinalProductPackaged, name: 'MedicinalProductPackaged'},
      	{ value: MedicinalProductPharmaceutical, name: 'MedicinalProductPharmaceutical'},
      	{ value: MedicinalProductUndesirableEffect, name: 'MedicinalProductUndesirableEffect'},
      	{ value: MessageDefinition, name: 'MessageDefinition'},
      	{ value: MessageHeader, name: 'MessageHeader'},
      	{ value: MolecularSequence, name: 'MolecularSequence'},
      	{ value: NamingSystem, name: 'NamingSystem'},
      	{ value: NutritionOrder, name: 'NutritionOrder'},
      	{ value: Observation, name: 'Observation'},
      	{ value: ObservationDefinition, name: 'ObservationDefinition'},
      	{ value: OperationDefinition, name: 'OperationDefinition'},
      	{ value: OperationOutcome, name: 'OperationOutcome'},
      	{ value: Organization, name: 'Organization'},
      	{ value: OrganizationAffiliation, name: 'OrganizationAffiliation'},
      	{ value: Parameters, name: 'Parameters'},
      	{ value: Patient, name: 'Patient'},
      	{ value: PaymentNotice, name: 'PaymentNotice'},
      	{ value: PaymentReconciliation, name: 'PaymentReconciliation'},
      	{ value: Person, name: 'Person'},
      	{ value: PlanDefinition, name: 'PlanDefinition'},
      	{ value: Practitioner, name: 'Practitioner'},
      	{ value: PractitionerRole, name: 'PractitionerRole'},
      	{ value: Procedure, name: 'Procedure'},
      	{ value: Provenance, name: 'Provenance'},
      	{ value: Questionnaire, name: 'Questionnaire'},
      	{ value: QuestionnaireResponse, name: 'QuestionnaireResponse'},
      	{ value: RelatedPerson, name: 'RelatedPerson'},
      	{ value: RequestGroup, name: 'RequestGroup'},
      	{ value: ResearchDefinition, name: 'ResearchDefinition'},
      	{ value: ResearchElementDefinition, name: 'ResearchElementDefinition'},
      	{ value: ResearchStudy, name: 'ResearchStudy'},
      	{ value: ResearchSubject, name: 'ResearchSubject'},
      	{ value: RiskAssessment, name: 'RiskAssessment'},
      	{ value: RiskEvidenceSynthesis, name: 'RiskEvidenceSynthesis'},
      	{ value: Schedule, name: 'Schedule'},
      	{ value: SearchParameter, name: 'SearchParameter'},
      	{ value: ServiceRequest, name: 'ServiceRequest'},
      	{ value: Slot, name: 'Slot'},
      	{ value: Specimen, name: 'Specimen'},
      	{ value: SpecimenDefinition, name: 'SpecimenDefinition'},
      	{ value: StructureDefinition, name: 'StructureDefinition'},
      	{ value: StructureMap, name: 'StructureMap'},
      	{ value: Subscription, name: 'Subscription'},
      	{ value: Substance, name: 'Substance'},
      	{ value: SubstanceNucleicAcid, name: 'SubstanceNucleicAcid'},
      	{ value: SubstancePolymer, name: 'SubstancePolymer'},
      	{ value: SubstanceProtein, name: 'SubstanceProtein'},
      	{ value: SubstanceReferenceInformation, name: 'SubstanceReferenceInformation'},
      	{ value: SubstanceSourceMaterial, name: 'SubstanceSourceMaterial'},
      	{ value: SubstanceSpecification, name: 'SubstanceSpecification'},
      	{ value: SupplyDelivery, name: 'SupplyDelivery'},
      	{ value: SupplyRequest, name: 'SupplyRequest'},
      	{ value: Task, name: 'Task'},
      	{ value: TerminologyCapabilities, name: 'TerminologyCapabilities'},
      	{ value: TestReport, name: 'TestReport'},
      	{ value: TestScript, name: 'TestScript'},
      	{ value: ValueSet, name: 'ValueSet'},
      	{ value: VerificationResult, name: 'VerificationResult'},
      	{ value: VisionPrescription, name: 'VisionPrescription'}
      ],
    }
  })
  protected contained?: ResourceList[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * resource and that modifies the understanding of the element that contains it and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met as part of the definition of
   * the extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * This records identifiers associated with this appointment concern that are defined by business
   * processes and/or used to refer to it when a direct URL reference to the resource itself is not
   * appropriate (e.g. in CDA documents, or in written / printed documentation).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * The overall status of the Appointment. Each of the participants has their own participation status
   * which indicates their involvement in the process, however this status indicates the shared status.
   * Field access restricted because there are specific valid values.
   */
  protected status?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _status?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   cancelationReason?: CodeableConcept;

  /**
   * A broad categorization of the service that is to be performed during this appointment.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected serviceCategory?: CodeableConcept[];

  /**
   * The specific service that is to be performed during this appointment.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected serviceType?: CodeableConcept[];

  /**
   * The specialty of a practitioner that would be required to perform the service requested in this
   * appointment.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected specialty?: CodeableConcept[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   appointmentType?: CodeableConcept;

  /**
   * The coded reason that this appointment is being scheduled. This is more clinical than
   * administrative.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected reasonCode?: CodeableConcept[];

  /**
   * Reason the appointment has been scheduled to take place, as specified using information from
   * another resource. When the patient arrives and the encounter begins it may be used as the
   * admission diagnosis. The indication will typically be a Condition (with other resources referenced
   * in the evidence.detail), or a Procedure.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected reasonReference?: Reference[];

  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
   priority?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _priority?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * Additional information to support the appointment provided when making the appointment.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected supportingInformation?: Reference[];

  /**
   * An instant in time - known at least to the second
   * Field access restricted because there are specific valid values.
   */
  protected start?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _start?: Element;

  /**
   * An instant in time - known at least to the second
   * Field access restricted because there are specific valid values.
   */
  protected end?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _end?: Element;

  /**
   * An integer with a value that is positive (e.g. >0)
   */
   minutesDuration?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _minutesDuration?: Element;

  /**
   * The slots from the participants' schedules that will be filled by the appointment.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected slot?: Reference[];

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected created?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _created?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected comment?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _comment?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected patientInstruction?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _patientInstruction?: Element;

  /**
   * The service request this appointment is allocated to assess (e.g. incoming referral or procedure
   * request).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected basedOn?: Reference[];

  /**
   * List of participants involved in the appointment.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => AppointmentParticipant)
  protected participant?: AppointmentParticipant[];

  /**
   * A set of date ranges (potentially including times) that the appointment is preferred to be
   * scheduled within.
   * 
   * The duration (usually in minutes) could also be provided to indicate the length of the appointment
   * to fill and populate the start/end times for the actual allocated time. However, in other
   * situations the duration may be calculated by the scheduling system.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Period)
  protected requestedPeriod?: Period[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID_000.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID_000.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setImplicitRules(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.implicitRules) !== 'undefined') {
         delete this.implicitRules;
      }
      return;
    }
    
    if (REGEX_IMPLICITRULES.test(newValue)) {
      this.implicitRules = newValue
    } else {
      throw new Error("Invalid value pattern for implicitRules of " + newValue);
    }
  }
  
  public getImplicitRulesPattern(): string {
    return REGEX_IMPLICITRULES.source;
  }
  
  /**
  * Gets the current value of field implicitRules.
  * @returns the value  or undefined
  */
  public getImplicitRules(): string | undefined {
      return this.implicitRules;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLanguage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.language) !== 'undefined') {
         delete this.language;
      }
      return;
    }
    
    if (REGEX_LANGUAGE.test(newValue)) {
      this.language = newValue
    } else {
      throw new Error("Invalid value pattern for language of " + newValue);
    }
  }
  
  public getLanguagePattern(): string {
    return REGEX_LANGUAGE.source;
  }
  
  /**
  * Gets the current value of field language.
  * @returns the value  or undefined
  */
  public getLanguage(): string | undefined {
      return this.language;
  }

  public addContained(newValue: ResourceList) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contained) !== 'undefined') {
         delete this.contained;
      }
      return;
    }
    
    if (typeof(this.contained) === 'undefined') {
      this.contained =  [];
    }
    this.contained.push(newValue);
  }
  /**
  * Removes all elements from the array contained, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteContainedAll(): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       const oldArray = this.contained;
       delete this.contained;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array contained, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteContainedBySplice(start: number, deleteCount?: number): ResourceList[] {
    if (typeof(this.contained) !== 'undefined') {
       return this.contained.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field contained.
  * @returns the value  or undefined
  */
  public getContained(): ResourceList[] | undefined {
      return this.contained;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }
  /**
  * Removes all elements from the array identifier, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteIdentifierAll(): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       const oldArray = this.identifier;
       delete this.identifier;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array identifier, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteIdentifierBySplice(start: number, deleteCount?: number): Identifier[] {
    if (typeof(this.identifier) !== 'undefined') {
       return this.identifier.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field identifier.
  * @returns the value  or undefined
  */
  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setStatus(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.status) !== 'undefined') {
         delete this.status;
      }
      return;
    }
    
    const idx = getValidValueIdx(AppointmentStatus_list_ValidValues, newValue);
    if (idx >= 0) {
      this.status = AppointmentStatus_list_ValidValues[idx];
    } else {
      throw new Error("Unknown status of " + newValue);
    }
  }
  
  public getAppointmentStatusValidValues(): string[] {
    return AppointmentStatus_list_ValidValues;
  }
  
  /**
  * Gets the current value of field status.
  * @returns the value  or undefined
  */
  public getStatus(): string | undefined {
      return this.status;
  }

  public addServiceCategory(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.serviceCategory) !== 'undefined') {
         delete this.serviceCategory;
      }
      return;
    }
    
    if (typeof(this.serviceCategory) === 'undefined') {
      this.serviceCategory =  [];
    }
    this.serviceCategory.push(newValue);
  }
  /**
  * Removes all elements from the array serviceCategory, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteServiceCategoryAll(): CodeableConcept[] {
    if (typeof(this.serviceCategory) !== 'undefined') {
       const oldArray = this.serviceCategory;
       delete this.serviceCategory;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array serviceCategory, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteServiceCategoryBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.serviceCategory) !== 'undefined') {
       return this.serviceCategory.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field serviceCategory.
  * @returns the value  or undefined
  */
  public getServiceCategory(): CodeableConcept[] | undefined {
      return this.serviceCategory;
  }

  public addServiceType(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.serviceType) !== 'undefined') {
         delete this.serviceType;
      }
      return;
    }
    
    if (typeof(this.serviceType) === 'undefined') {
      this.serviceType =  [];
    }
    this.serviceType.push(newValue);
  }
  /**
  * Removes all elements from the array serviceType, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteServiceTypeAll(): CodeableConcept[] {
    if (typeof(this.serviceType) !== 'undefined') {
       const oldArray = this.serviceType;
       delete this.serviceType;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array serviceType, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteServiceTypeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.serviceType) !== 'undefined') {
       return this.serviceType.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field serviceType.
  * @returns the value  or undefined
  */
  public getServiceType(): CodeableConcept[] | undefined {
      return this.serviceType;
  }

  public addSpecialty(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.specialty) !== 'undefined') {
         delete this.specialty;
      }
      return;
    }
    
    if (typeof(this.specialty) === 'undefined') {
      this.specialty =  [];
    }
    this.specialty.push(newValue);
  }
  /**
  * Removes all elements from the array specialty, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSpecialtyAll(): CodeableConcept[] {
    if (typeof(this.specialty) !== 'undefined') {
       const oldArray = this.specialty;
       delete this.specialty;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array specialty, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSpecialtyBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.specialty) !== 'undefined') {
       return this.specialty.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field specialty.
  * @returns the value  or undefined
  */
  public getSpecialty(): CodeableConcept[] | undefined {
      return this.specialty;
  }

  public addReasonCode(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.reasonCode) !== 'undefined') {
         delete this.reasonCode;
      }
      return;
    }
    
    if (typeof(this.reasonCode) === 'undefined') {
      this.reasonCode =  [];
    }
    this.reasonCode.push(newValue);
  }
  /**
  * Removes all elements from the array reasonCode, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReasonCodeAll(): CodeableConcept[] {
    if (typeof(this.reasonCode) !== 'undefined') {
       const oldArray = this.reasonCode;
       delete this.reasonCode;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array reasonCode, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReasonCodeBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.reasonCode) !== 'undefined') {
       return this.reasonCode.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field reasonCode.
  * @returns the value  or undefined
  */
  public getReasonCode(): CodeableConcept[] | undefined {
      return this.reasonCode;
  }

  public addReasonReference(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.reasonReference) !== 'undefined') {
         delete this.reasonReference;
      }
      return;
    }
    
    if (typeof(this.reasonReference) === 'undefined') {
      this.reasonReference =  [];
    }
    this.reasonReference.push(newValue);
  }
  /**
  * Removes all elements from the array reasonReference, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteReasonReferenceAll(): Reference[] {
    if (typeof(this.reasonReference) !== 'undefined') {
       const oldArray = this.reasonReference;
       delete this.reasonReference;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array reasonReference, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteReasonReferenceBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.reasonReference) !== 'undefined') {
       return this.reasonReference.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field reasonReference.
  * @returns the value  or undefined
  */
  public getReasonReference(): Reference[] | undefined {
      return this.reasonReference;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  
  /**
  * Gets the current value of field description.
  * @returns the value  or undefined
  */
  public getDescription(): string | undefined {
      return this.description;
  }

  public addSupportingInformation(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.supportingInformation) !== 'undefined') {
         delete this.supportingInformation;
      }
      return;
    }
    
    if (typeof(this.supportingInformation) === 'undefined') {
      this.supportingInformation =  [];
    }
    this.supportingInformation.push(newValue);
  }
  /**
  * Removes all elements from the array supportingInformation, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSupportingInformationAll(): Reference[] {
    if (typeof(this.supportingInformation) !== 'undefined') {
       const oldArray = this.supportingInformation;
       delete this.supportingInformation;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array supportingInformation, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSupportingInformationBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.supportingInformation) !== 'undefined') {
       return this.supportingInformation.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field supportingInformation.
  * @returns the value  or undefined
  */
  public getSupportingInformation(): Reference[] | undefined {
      return this.supportingInformation;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setStart(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.start) !== 'undefined') {
         delete this.start;
      }
      return;
    }
    
    if (REGEX_START_000.test(newValue)) {
      this.start = newValue
    } else {
      throw new Error("Invalid value pattern for start of " + newValue);
    }
  }
  
  public getStartPattern(): string {
    return REGEX_START_000.source;
  }
  
  /**
  * Gets the current value of field start.
  * @returns the value  or undefined
  */
  public getStart(): string | undefined {
      return this.start;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setEnd(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.end) !== 'undefined') {
         delete this.end;
      }
      return;
    }
    
    if (REGEX_END_000.test(newValue)) {
      this.end = newValue
    } else {
      throw new Error("Invalid value pattern for end of " + newValue);
    }
  }
  
  public getEndPattern(): string {
    return REGEX_END_000.source;
  }
  
  /**
  * Gets the current value of field end.
  * @returns the value  or undefined
  */
  public getEnd(): string | undefined {
      return this.end;
  }

  public addSlot(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.slot) !== 'undefined') {
         delete this.slot;
      }
      return;
    }
    
    if (typeof(this.slot) === 'undefined') {
      this.slot =  [];
    }
    this.slot.push(newValue);
  }
  /**
  * Removes all elements from the array slot, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSlotAll(): Reference[] {
    if (typeof(this.slot) !== 'undefined') {
       const oldArray = this.slot;
       delete this.slot;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array slot, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSlotBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.slot) !== 'undefined') {
       return this.slot.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field slot.
  * @returns the value  or undefined
  */
  public getSlot(): Reference[] | undefined {
      return this.slot;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCreated(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.created) !== 'undefined') {
         delete this.created;
      }
      return;
    }
    
    if (REGEX_CREATED.test(newValue)) {
      this.created = newValue
    } else {
      throw new Error("Invalid value pattern for created of " + newValue);
    }
  }
  
  public getCreatedPattern(): string {
    return REGEX_CREATED.source;
  }
  
  /**
  * Gets the current value of field created.
  * @returns the value  or undefined
  */
  public getCreated(): string | undefined {
      return this.created;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setComment(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.comment) !== 'undefined') {
         delete this.comment;
      }
      return;
    }
    
    if (REGEX_COMMENT.test(newValue)) {
      this.comment = newValue
    } else {
      throw new Error("Invalid value pattern for comment of " + newValue);
    }
  }
  
  public getCommentPattern(): string {
    return REGEX_COMMENT.source;
  }
  
  /**
  * Gets the current value of field comment.
  * @returns the value  or undefined
  */
  public getComment(): string | undefined {
      return this.comment;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setPatientInstruction(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.patientInstruction) !== 'undefined') {
         delete this.patientInstruction;
      }
      return;
    }
    
    if (REGEX_PATIENTINSTRUCTION.test(newValue)) {
      this.patientInstruction = newValue
    } else {
      throw new Error("Invalid value pattern for patientInstruction of " + newValue);
    }
  }
  
  public getPatientInstructionPattern(): string {
    return REGEX_PATIENTINSTRUCTION.source;
  }
  
  /**
  * Gets the current value of field patientInstruction.
  * @returns the value  or undefined
  */
  public getPatientInstruction(): string | undefined {
      return this.patientInstruction;
  }

  public addBasedOn(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.basedOn) !== 'undefined') {
         delete this.basedOn;
      }
      return;
    }
    
    if (typeof(this.basedOn) === 'undefined') {
      this.basedOn =  [];
    }
    this.basedOn.push(newValue);
  }
  /**
  * Removes all elements from the array basedOn, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteBasedOnAll(): Reference[] {
    if (typeof(this.basedOn) !== 'undefined') {
       const oldArray = this.basedOn;
       delete this.basedOn;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array basedOn, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteBasedOnBySplice(start: number, deleteCount?: number): Reference[] {
    if (typeof(this.basedOn) !== 'undefined') {
       return this.basedOn.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field basedOn.
  * @returns the value  or undefined
  */
  public getBasedOn(): Reference[] | undefined {
      return this.basedOn;
  }

  public addParticipant(newValue: AppointmentParticipant) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.participant) !== 'undefined') {
         delete this.participant;
      }
      return;
    }
    
    if (typeof(this.participant) === 'undefined') {
      this.participant =  [];
    }
    this.participant.push(newValue);
  }
  /**
  * Removes all elements from the array participant, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteParticipantAll(): AppointmentParticipant[] {
    if (typeof(this.participant) !== 'undefined') {
       const oldArray = this.participant;
       delete this.participant;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array participant, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteParticipantBySplice(start: number, deleteCount?: number): AppointmentParticipant[] {
    if (typeof(this.participant) !== 'undefined') {
       return this.participant.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field participant.
  * @returns the value  or undefined
  */
  public getParticipant(): AppointmentParticipant[] | undefined {
      return this.participant;
  }

  public addRequestedPeriod(newValue: Period) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.requestedPeriod) !== 'undefined') {
         delete this.requestedPeriod;
      }
      return;
    }
    
    if (typeof(this.requestedPeriod) === 'undefined') {
      this.requestedPeriod =  [];
    }
    this.requestedPeriod.push(newValue);
  }
  /**
  * Removes all elements from the array requestedPeriod, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteRequestedPeriodAll(): Period[] {
    if (typeof(this.requestedPeriod) !== 'undefined') {
       const oldArray = this.requestedPeriod;
       delete this.requestedPeriod;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array requestedPeriod, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteRequestedPeriodBySplice(start: number, deleteCount?: number): Period[] {
    if (typeof(this.requestedPeriod) !== 'undefined') {
       return this.requestedPeriod.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field requestedPeriod.
  * @returns the value  or undefined
  */
  public getRequestedPeriod(): Period[] | undefined {
      return this.requestedPeriod;
  }


}


