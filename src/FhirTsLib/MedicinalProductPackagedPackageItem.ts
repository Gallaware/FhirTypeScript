import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Extension, Identifier, ProdCharacteristic, ProductShelfLife, Quantity, Reference } from './FhirType';



/**
 * A medicinal product in a container or package.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/MedicinalProductPackaged_PackageItem
 */
export class MedicinalProductPackagedPackageItem {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Including possibly Data Carrier Identifier.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Identifier)
  protected identifier?: Identifier[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   type?: CodeableConcept;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   quantity?: Quantity;

  /**
   * Material type of the package item.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected material?: CodeableConcept[];

  /**
   * A possible alternate material for the packaging.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected alternateMaterial?: CodeableConcept[];

  /**
   * A device accompanying a medicinal product.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected device?: Reference[];

  /**
   * The manufactured item as contained in the packaged medicinal product.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected manufacturedItem?: Reference[];

  /**
   * Allows containers within containers.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => MedicinalProductPackagedPackageItem)
  protected packageItem?: MedicinalProductPackagedPackageItem[];

  /**
   * The marketing status describes the date when a medicinal product is actually put on the market or
   * the date as of which it is no longer available.
   */
  @Type(() => ProdCharacteristic)
   physicalCharacteristics?: ProdCharacteristic;

  /**
   * Other codeable characteristics.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected otherCharacteristics?: CodeableConcept[];

  /**
   * Shelf Life and storage information.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ProductShelfLife)
  protected shelfLifeStorage?: ProductShelfLife[];

  /**
   * Manufacturer of this Package Item.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Reference)
  protected manufacturer?: Reference[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addIdentifier(newValue: Identifier) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.identifier) !== 'undefined') {
         delete this.identifier;
      }
      return;
    }
    
    if (typeof(this.identifier) === 'undefined') {
      this.identifier =  [];
    }
    this.identifier.push(newValue);
  }

  public getIdentifier(): Identifier[] | undefined {
      return this.identifier;
  }

  public addMaterial(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.material) !== 'undefined') {
         delete this.material;
      }
      return;
    }
    
    if (typeof(this.material) === 'undefined') {
      this.material =  [];
    }
    this.material.push(newValue);
  }

  public getMaterial(): CodeableConcept[] | undefined {
      return this.material;
  }

  public addAlternateMaterial(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.alternateMaterial) !== 'undefined') {
         delete this.alternateMaterial;
      }
      return;
    }
    
    if (typeof(this.alternateMaterial) === 'undefined') {
      this.alternateMaterial =  [];
    }
    this.alternateMaterial.push(newValue);
  }

  public getAlternateMaterial(): CodeableConcept[] | undefined {
      return this.alternateMaterial;
  }

  public addDevice(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.device) !== 'undefined') {
         delete this.device;
      }
      return;
    }
    
    if (typeof(this.device) === 'undefined') {
      this.device =  [];
    }
    this.device.push(newValue);
  }

  public getDevice(): Reference[] | undefined {
      return this.device;
  }

  public addManufacturedItem(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.manufacturedItem) !== 'undefined') {
         delete this.manufacturedItem;
      }
      return;
    }
    
    if (typeof(this.manufacturedItem) === 'undefined') {
      this.manufacturedItem =  [];
    }
    this.manufacturedItem.push(newValue);
  }

  public getManufacturedItem(): Reference[] | undefined {
      return this.manufacturedItem;
  }

  public addPackageItem(newValue: MedicinalProductPackagedPackageItem) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.packageItem) !== 'undefined') {
         delete this.packageItem;
      }
      return;
    }
    
    if (typeof(this.packageItem) === 'undefined') {
      this.packageItem =  [];
    }
    this.packageItem.push(newValue);
  }

  public getPackageItem(): MedicinalProductPackagedPackageItem[] | undefined {
      return this.packageItem;
  }

  public addOtherCharacteristics(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.otherCharacteristics) !== 'undefined') {
         delete this.otherCharacteristics;
      }
      return;
    }
    
    if (typeof(this.otherCharacteristics) === 'undefined') {
      this.otherCharacteristics =  [];
    }
    this.otherCharacteristics.push(newValue);
  }

  public getOtherCharacteristics(): CodeableConcept[] | undefined {
      return this.otherCharacteristics;
  }

  public addShelfLifeStorage(newValue: ProductShelfLife) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.shelfLifeStorage) !== 'undefined') {
         delete this.shelfLifeStorage;
      }
      return;
    }
    
    if (typeof(this.shelfLifeStorage) === 'undefined') {
      this.shelfLifeStorage =  [];
    }
    this.shelfLifeStorage.push(newValue);
  }

  public getShelfLifeStorage(): ProductShelfLife[] | undefined {
      return this.shelfLifeStorage;
  }

  public addManufacturer(newValue: Reference) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.manufacturer) !== 'undefined') {
         delete this.manufacturer;
      }
      return;
    }
    
    if (typeof(this.manufacturer) === 'undefined') {
      this.manufacturer =  [];
    }
    this.manufacturer.push(newValue);
  }

  public getManufacturer(): Reference[] | undefined {
      return this.manufacturer;
  }


}


