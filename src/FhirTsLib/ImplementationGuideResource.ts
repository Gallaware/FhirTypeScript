import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_NAME, REGEX_DESCRIPTION, REGEX_EXAMPLECANONICAL, REGEX_GROUPINGID } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, Reference } from './FhirType';



/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically
 * through the use of FHIR resources. This resource is used to gather all the parts of an
 * implementation guide into a logical whole and to publish a computable definition of all the parts.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ImplementationGuide_Resource
 */
export class ImplementationGuideResource {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   reference?: Reference;

  /**
   * Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified,
   * the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
   * Field access restricted because there are specific valid values.
   */
  protected fhirVersion?: string[];

  /**
   * Extensions for fhirVersion
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _fhirVersion?: Element[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * If true or a reference, indicates the resource is an example instance.  If a reference is present,
   * indicates that the example is an example of the specified profile.
   */
   exampleBoolean?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _exampleBoolean?: Element;

  /**
   * If true or a reference, indicates the resource is an example instance.  If a reference is present,
   * indicates that the example is an example of the specified profile.
   * Field access restricted because there are specific valid values.
   */
  protected exampleCanonical?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _exampleCanonical?: Element;

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected groupingId?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _groupingId?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addFhirVersion(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.fhirVersion) !== 'undefined') {
         delete this.fhirVersion;
      }
      return;
    }
    
    if (typeof(this.fhirVersion) === 'undefined') {
      this.fhirVersion =  [];
    }
    this.fhirVersion.push(newValue);
  }

  public getFhirVersion(): string[] | undefined {
      return this.fhirVersion;
  }

  public add_fhirVersion(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._fhirVersion) !== 'undefined') {
         delete this._fhirVersion;
      }
      return;
    }
    
    if (typeof(this._fhirVersion) === 'undefined') {
      this._fhirVersion =  [];
    }
    this._fhirVersion.push(newValue);
  }

  public get_fhirVersion(): Element[] | undefined {
      return this._fhirVersion;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME.source;
  }
  

  public getName(): string | undefined {
      return this.name;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setExampleCanonical(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.exampleCanonical) !== 'undefined') {
         delete this.exampleCanonical;
      }
      return;
    }
    
    if (REGEX_EXAMPLECANONICAL.test(newValue)) {
      this.exampleCanonical = newValue
    } else {
      throw new Error("Invalid value pattern for exampleCanonical of " + newValue);
    }
  }
  
  public getExampleCanonicalPattern(): string {
    return REGEX_EXAMPLECANONICAL.source;
  }
  

  public getExampleCanonical(): string | undefined {
      return this.exampleCanonical;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setGroupingId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.groupingId) !== 'undefined') {
         delete this.groupingId;
      }
      return;
    }
    
    if (REGEX_GROUPINGID.test(newValue)) {
      this.groupingId = newValue
    } else {
      throw new Error("Invalid value pattern for groupingId of " + newValue);
    }
  }
  
  public getGroupingIdPattern(): string {
    return REGEX_GROUPINGID.source;
  }
  

  public getGroupingId(): string | undefined {
      return this.groupingId;
  }


}


