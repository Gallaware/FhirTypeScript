import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_SOURCE, REGEX_SOURCEVERSION, REGEX_TARGET, REGEX_TARGETVERSION } from '../FhirTsLibValidation/FhirRegex';
import { ConceptMapElement, ConceptMapUnmapped, Element, Extension } from './FhirType';



/**
 * A statement of relationships from one set of concepts to one or more other concepts - either
 * concepts in code systems, or data element/data element concepts, or classes in class models.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ConceptMap_Group
 */
export class ConceptMapGroup {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected source?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _source?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected sourceVersion?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _sourceVersion?: Element;

  /**
   * String of characters used to identify a name or a resource
   * Field access restricted because there are specific valid values.
   */
  protected target?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _target?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected targetVersion?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _targetVersion?: Element;

  /**
   * Mappings for an individual concept in the source to one or more concepts in the target.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ConceptMapElement)
  protected element?: ConceptMapElement[];

  /**
   * A statement of relationships from one set of concepts to one or more other concepts - either
   * concepts in code systems, or data element/data element concepts, or classes in class models.
   */
  @Type(() => ConceptMapUnmapped)
   unmapped?: ConceptMapUnmapped;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setSource(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.source) !== 'undefined') {
         delete this.source;
      }
      return;
    }
    
    if (REGEX_SOURCE.test(newValue)) {
      this.source = newValue
    } else {
      throw new Error("Invalid value pattern for source of " + newValue);
    }
  }
  
  public getSourcePattern(): string {
    return REGEX_SOURCE.source;
  }
  

  public getSource(): string | undefined {
      return this.source;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setSourceVersion(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sourceVersion) !== 'undefined') {
         delete this.sourceVersion;
      }
      return;
    }
    
    if (REGEX_SOURCEVERSION.test(newValue)) {
      this.sourceVersion = newValue
    } else {
      throw new Error("Invalid value pattern for sourceVersion of " + newValue);
    }
  }
  
  public getSourceVersionPattern(): string {
    return REGEX_SOURCEVERSION.source;
  }
  

  public getSourceVersion(): string | undefined {
      return this.sourceVersion;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTarget(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.target) !== 'undefined') {
         delete this.target;
      }
      return;
    }
    
    if (REGEX_TARGET.test(newValue)) {
      this.target = newValue
    } else {
      throw new Error("Invalid value pattern for target of " + newValue);
    }
  }
  
  public getTargetPattern(): string {
    return REGEX_TARGET.source;
  }
  

  public getTarget(): string | undefined {
      return this.target;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTargetVersion(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.targetVersion) !== 'undefined') {
         delete this.targetVersion;
      }
      return;
    }
    
    if (REGEX_TARGETVERSION.test(newValue)) {
      this.targetVersion = newValue
    } else {
      throw new Error("Invalid value pattern for targetVersion of " + newValue);
    }
  }
  
  public getTargetVersionPattern(): string {
    return REGEX_TARGETVERSION.source;
  }
  

  public getTargetVersion(): string | undefined {
      return this.targetVersion;
  }

  public addElement(newValue: ConceptMapElement) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.element) !== 'undefined') {
         delete this.element;
      }
      return;
    }
    
    if (typeof(this.element) === 'undefined') {
      this.element =  [];
    }
    this.element.push(newValue);
  }

  public getElement(): ConceptMapElement[] | undefined {
      return this.element;
  }


}


