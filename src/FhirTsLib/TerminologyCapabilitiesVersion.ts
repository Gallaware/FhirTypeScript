import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_CODE_001 } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, TerminologyCapabilitiesFilter } from './index';



/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR
 * Terminology Server that may be used as a statement of actual server functionality or a statement
 * of required or desired server implementation.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/TerminologyCapabilities_Version
 */
export class TerminologyCapabilitiesVersion {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected code?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _code?: Element;

  /**
   * Value of "true" or "false"
   */
   isDefault?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _isDefault?: Element;

  /**
   * Value of "true" or "false"
   */
   compositional?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _compositional?: Element;

  /**
   * Language Displays supported.
   * Field access restricted because there are specific valid values.
   */
  protected language?: string[];

  /**
   * Extensions for language
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _language?: Element[];

  /**
   * Filter Properties supported.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => TerminologyCapabilitiesFilter)
  protected filter?: TerminologyCapabilitiesFilter[];

  /**
   * Properties supported for $lookup.
   * Field access restricted because there are specific valid values.
   */
  protected property?: string[];

  /**
   * Extensions for property
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Element)
  protected _property?: Element[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setCode(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.code) !== 'undefined') {
         delete this.code;
      }
      return;
    }
    
    if (REGEX_CODE_001.test(newValue)) {
      this.code = newValue
    } else {
      throw new Error("Invalid value pattern for code of " + newValue);
    }
  }
  
  public getCodePattern(): string {
    return REGEX_CODE_001.source;
  }
  
  /**
  * Gets the current value of field code.
  * @returns the value  or undefined
  */
  public getCode(): string | undefined {
      return this.code;
  }

  public addLanguage(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.language) !== 'undefined') {
         delete this.language;
      }
      return;
    }
    
    if (typeof(this.language) === 'undefined') {
      this.language =  [];
    }
    this.language.push(newValue);
  }
  /**
  * Removes all elements from the array language, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteLanguageAll(): string[] {
    if (typeof(this.language) !== 'undefined') {
       const oldArray = this.language;
       delete this.language;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array language, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteLanguageBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.language) !== 'undefined') {
       return this.language.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field language.
  * @returns the value  or undefined
  */
  public getLanguage(): string[] | undefined {
      return this.language;
  }

  public add_language(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._language) !== 'undefined') {
         delete this._language;
      }
      return;
    }
    
    if (typeof(this._language) === 'undefined') {
      this._language =  [];
    }
    this._language.push(newValue);
  }
  /**
  * Removes all elements from the array _language, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_languageAll(): Element[] {
    if (typeof(this._language) !== 'undefined') {
       const oldArray = this._language;
       delete this._language;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _language, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_languageBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._language) !== 'undefined') {
       return this._language.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _language.
  * @returns the value  or undefined
  */
  public get_language(): Element[] | undefined {
      return this._language;
  }

  public addFilter(newValue: TerminologyCapabilitiesFilter) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.filter) !== 'undefined') {
         delete this.filter;
      }
      return;
    }
    
    if (typeof(this.filter) === 'undefined') {
      this.filter =  [];
    }
    this.filter.push(newValue);
  }
  /**
  * Removes all elements from the array filter, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteFilterAll(): TerminologyCapabilitiesFilter[] {
    if (typeof(this.filter) !== 'undefined') {
       const oldArray = this.filter;
       delete this.filter;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array filter, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteFilterBySplice(start: number, deleteCount?: number): TerminologyCapabilitiesFilter[] {
    if (typeof(this.filter) !== 'undefined') {
       return this.filter.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field filter.
  * @returns the value  or undefined
  */
  public getFilter(): TerminologyCapabilitiesFilter[] | undefined {
      return this.filter;
  }

  public addProperty(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.property) !== 'undefined') {
         delete this.property;
      }
      return;
    }
    
    if (typeof(this.property) === 'undefined') {
      this.property =  [];
    }
    this.property.push(newValue);
  }
  /**
  * Removes all elements from the array property, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deletePropertyAll(): string[] {
    if (typeof(this.property) !== 'undefined') {
       const oldArray = this.property;
       delete this.property;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array property, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deletePropertyBySplice(start: number, deleteCount?: number): string[] {
    if (typeof(this.property) !== 'undefined') {
       return this.property.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field property.
  * @returns the value  or undefined
  */
  public getProperty(): string[] | undefined {
      return this.property;
  }

  public add_property(newValue: Element) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this._property) !== 'undefined') {
         delete this._property;
      }
      return;
    }
    
    if (typeof(this._property) === 'undefined') {
      this._property =  [];
    }
    this._property.push(newValue);
  }
  /**
  * Removes all elements from the array _property, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public delete_propertyAll(): Element[] {
    if (typeof(this._property) !== 'undefined') {
       const oldArray = this._property;
       delete this._property;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array _property, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public delete_propertyBySplice(start: number, deleteCount?: number): Element[] {
    if (typeof(this._property) !== 'undefined') {
       return this._property.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field _property.
  * @returns the value  or undefined
  */
  public get_property(): Element[] | undefined {
      return this._property;
  }


}


