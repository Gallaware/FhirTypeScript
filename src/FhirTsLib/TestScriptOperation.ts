import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_RESOURCE_000, REGEX_LABEL, REGEX_DESCRIPTION, REGEX_ACCEPT, REGEX_CONTENTTYPE, REGEX_PARAMS, REGEX_REQUESTID, REGEX_RESPONSEID, REGEX_SOURCEID_000, REGEX_TARGETID, REGEX_URL_000 } from '../FhirTsLibValidation/FhirRegex';
import { Coding, Element, Extension, TestScriptRequestHeader } from './FhirType';
import { TestScriptOperationMethod_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance
 * against the FHIR specification.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/TestScript_Operation
 */
export class TestScriptOperation {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A reference to a code defined by a terminology system.
   */
  @Type(() => Coding)
   type?: Coding;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected resource?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _resource?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected label?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _label?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected accept?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _accept?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected contentType?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _contentType?: Element;

  /**
   * A whole number
   */
   destination?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _destination?: Element;

  /**
   * Value of "true" or "false"
   */
   encodeRequestUrl?: boolean;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _encodeRequestUrl?: Element;

  /**
   * The HTTP method the test engine MUST use for this operation regardless of any other operation
   * details.
   * Field access restricted because there are specific valid values.
   */
  protected method?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _method?: Element;

  /**
   * A whole number
   */
   origin?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _origin?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected params?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _params?: Element;

  /**
   * Header elements would be used to set HTTP headers.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => TestScriptRequestHeader)
  protected requestHeader?: TestScriptRequestHeader[];

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected requestId?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _requestId?: Element;

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected responseId?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _responseId?: Element;

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected sourceId?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _sourceId?: Element;

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected targetId?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _targetId?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected url?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _url?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setResource(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.resource) !== 'undefined') {
         delete this.resource;
      }
      return;
    }
    
    if (REGEX_RESOURCE_000.test(newValue)) {
      this.resource = newValue
    } else {
      throw new Error("Invalid value pattern for resource of " + newValue);
    }
  }
  
  public getResourcePattern(): string {
    return REGEX_RESOURCE_000.source;
  }
  

  public getResource(): string | undefined {
      return this.resource;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setLabel(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.label) !== 'undefined') {
         delete this.label;
      }
      return;
    }
    
    if (REGEX_LABEL.test(newValue)) {
      this.label = newValue
    } else {
      throw new Error("Invalid value pattern for label of " + newValue);
    }
  }
  
  public getLabelPattern(): string {
    return REGEX_LABEL.source;
  }
  

  public getLabel(): string | undefined {
      return this.label;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setAccept(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.accept) !== 'undefined') {
         delete this.accept;
      }
      return;
    }
    
    if (REGEX_ACCEPT.test(newValue)) {
      this.accept = newValue
    } else {
      throw new Error("Invalid value pattern for accept of " + newValue);
    }
  }
  
  public getAcceptPattern(): string {
    return REGEX_ACCEPT.source;
  }
  

  public getAccept(): string | undefined {
      return this.accept;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setContentType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.contentType) !== 'undefined') {
         delete this.contentType;
      }
      return;
    }
    
    if (REGEX_CONTENTTYPE.test(newValue)) {
      this.contentType = newValue
    } else {
      throw new Error("Invalid value pattern for contentType of " + newValue);
    }
  }
  
  public getContentTypePattern(): string {
    return REGEX_CONTENTTYPE.source;
  }
  

  public getContentType(): string | undefined {
      return this.contentType;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setMethod(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.method) !== 'undefined') {
         delete this.method;
      }
      return;
    }
    
    const idx = getValidValueIdx(TestScriptOperationMethod_list_ValidValues, newValue);
    if (idx >= 0) {
      this.method = TestScriptOperationMethod_list_ValidValues[idx];
    } else {
      throw new Error("Unknown method of " + newValue);
    }
  }
  
  public getTestScriptOperationMethodValidValues(): string[] {
    return TestScriptOperationMethod_list_ValidValues;
  }
  

  public getMethod(): string | undefined {
      return this.method;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setParams(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.params) !== 'undefined') {
         delete this.params;
      }
      return;
    }
    
    if (REGEX_PARAMS.test(newValue)) {
      this.params = newValue
    } else {
      throw new Error("Invalid value pattern for params of " + newValue);
    }
  }
  
  public getParamsPattern(): string {
    return REGEX_PARAMS.source;
  }
  

  public getParams(): string | undefined {
      return this.params;
  }

  public addRequestHeader(newValue: TestScriptRequestHeader) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.requestHeader) !== 'undefined') {
         delete this.requestHeader;
      }
      return;
    }
    
    if (typeof(this.requestHeader) === 'undefined') {
      this.requestHeader =  [];
    }
    this.requestHeader.push(newValue);
  }

  public getRequestHeader(): TestScriptRequestHeader[] | undefined {
      return this.requestHeader;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setRequestId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.requestId) !== 'undefined') {
         delete this.requestId;
      }
      return;
    }
    
    if (REGEX_REQUESTID.test(newValue)) {
      this.requestId = newValue
    } else {
      throw new Error("Invalid value pattern for requestId of " + newValue);
    }
  }
  
  public getRequestIdPattern(): string {
    return REGEX_REQUESTID.source;
  }
  

  public getRequestId(): string | undefined {
      return this.requestId;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setResponseId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.responseId) !== 'undefined') {
         delete this.responseId;
      }
      return;
    }
    
    if (REGEX_RESPONSEID.test(newValue)) {
      this.responseId = newValue
    } else {
      throw new Error("Invalid value pattern for responseId of " + newValue);
    }
  }
  
  public getResponseIdPattern(): string {
    return REGEX_RESPONSEID.source;
  }
  

  public getResponseId(): string | undefined {
      return this.responseId;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setSourceId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sourceId) !== 'undefined') {
         delete this.sourceId;
      }
      return;
    }
    
    if (REGEX_SOURCEID_000.test(newValue)) {
      this.sourceId = newValue
    } else {
      throw new Error("Invalid value pattern for sourceId of " + newValue);
    }
  }
  
  public getSourceIdPattern(): string {
    return REGEX_SOURCEID_000.source;
  }
  

  public getSourceId(): string | undefined {
      return this.sourceId;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTargetId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.targetId) !== 'undefined') {
         delete this.targetId;
      }
      return;
    }
    
    if (REGEX_TARGETID.test(newValue)) {
      this.targetId = newValue
    } else {
      throw new Error("Invalid value pattern for targetId of " + newValue);
    }
  }
  
  public getTargetIdPattern(): string {
    return REGEX_TARGETID.source;
  }
  

  public getTargetId(): string | undefined {
      return this.targetId;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setUrl(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.url) !== 'undefined') {
         delete this.url;
      }
      return;
    }
    
    if (REGEX_URL_000.test(newValue)) {
      this.url = newValue
    } else {
      throw new Error("Invalid value pattern for url of " + newValue);
    }
  }
  
  public getUrlPattern(): string {
    return REGEX_URL_000.source;
  }
  

  public getUrl(): string | undefined {
      return this.url;
  }


}


