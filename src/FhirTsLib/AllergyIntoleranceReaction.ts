import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_DESCRIPTION, REGEX_ONSET } from '../FhirTsLibValidation/FhirRegex';
import { Annotation, CodeableConcept, Element, Extension } from './FhirType';
import { AllergyIntoleranceReactionSeverity_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and
 * associated with exposure to a substance.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/AllergyIntolerance_Reaction
 */
export class AllergyIntoleranceReaction {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   substance?: CodeableConcept;

  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected manifestation?: CodeableConcept[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected description?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _description?: Element;

  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are
   * specified, a time zone SHALL be populated. The format is a union of the schema types gYear,
   * gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be
   * zero-filled and may be ignored.                 Dates SHALL be valid dates.
   * Field access restricted because there are specific valid values.
   */
  protected onset?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _onset?: Element;

  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering
   * multiple different manifestations.
   * Field access restricted because there are specific valid values.
   */
  protected severity?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _severity?: Element;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   exposureRoute?: CodeableConcept;

  /**
   * Additional text about the adverse reaction event not captured in other fields.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Annotation)
  protected note?: Annotation[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addManifestation(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.manifestation) !== 'undefined') {
         delete this.manifestation;
      }
      return;
    }
    
    if (typeof(this.manifestation) === 'undefined') {
      this.manifestation =  [];
    }
    this.manifestation.push(newValue);
  }

  public getManifestation(): CodeableConcept[] | undefined {
      return this.manifestation;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDescription(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.description) !== 'undefined') {
         delete this.description;
      }
      return;
    }
    
    if (REGEX_DESCRIPTION.test(newValue)) {
      this.description = newValue
    } else {
      throw new Error("Invalid value pattern for description of " + newValue);
    }
  }
  
  public getDescriptionPattern(): string {
    return REGEX_DESCRIPTION.source;
  }
  

  public getDescription(): string | undefined {
      return this.description;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setOnset(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.onset) !== 'undefined') {
         delete this.onset;
      }
      return;
    }
    
    if (REGEX_ONSET.test(newValue)) {
      this.onset = newValue
    } else {
      throw new Error("Invalid value pattern for onset of " + newValue);
    }
  }
  
  public getOnsetPattern(): string {
    return REGEX_ONSET.source;
  }
  

  public getOnset(): string | undefined {
      return this.onset;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setSeverity(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.severity) !== 'undefined') {
         delete this.severity;
      }
      return;
    }
    
    const idx = getValidValueIdx(AllergyIntoleranceReactionSeverity_list_ValidValues, newValue);
    if (idx >= 0) {
      this.severity = AllergyIntoleranceReactionSeverity_list_ValidValues[idx];
    } else {
      throw new Error("Unknown severity of " + newValue);
    }
  }
  
  public getAllergyIntoleranceReactionSeverityValidValues(): string[] {
    return AllergyIntoleranceReactionSeverity_list_ValidValues;
  }
  

  public getSeverity(): string | undefined {
      return this.severity;
  }

  public addNote(newValue: Annotation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.note) !== 'undefined') {
         delete this.note;
      }
      return;
    }
    
    if (typeof(this.note) === 'undefined') {
      this.note =  [];
    }
    this.note.push(newValue);
  }

  public getNote(): Annotation[] | undefined {
      return this.note;
  }


}


