import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_WHEN, REGEX_TARGETFORMAT, REGEX_SIGFORMAT } from '../FhirTsLibValidation/FhirRegex';
import { Coding, Element, Extension, Reference } from './FhirType';



/**
 * A signature along with supporting context. The signature may be a digital signature that is
 * cryptographic in nature, or some other signature acceptable to the domain. This other signature
 * may be as simple as a graphical image representing a hand-written signature, or a signature
 * ceremony Different signature approaches have different utilities.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/Signature
 */
export class Signature {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * An indication of the reason that the entity signed this document. This may be explicitly included
   * as part of the signature information and can be used when determining accountability for various
   * actions concerning the document.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Coding)
  protected type?: Coding[];

  /**
   * An instant in time - known at least to the second
   * Field access restricted because there are specific valid values.
   */
  protected when?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _when?: Element;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   who?: Reference;

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   onBehalfOf?: Reference;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected targetFormat?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _targetFormat?: Element;

  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is
   * no whitespace other than single spaces in the contents
   * Field access restricted because there are specific valid values.
   */
  protected sigFormat?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _sigFormat?: Element;

  /**
   * A stream of bytes
   */
   data?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _data?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addType(newValue: Coding) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    if (typeof(this.type) === 'undefined') {
      this.type =  [];
    }
    this.type.push(newValue);
  }

  public getType(): Coding[] | undefined {
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setWhen(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.when) !== 'undefined') {
         delete this.when;
      }
      return;
    }
    
    if (REGEX_WHEN.test(newValue)) {
      this.when = newValue
    } else {
      throw new Error("Invalid value pattern for when of " + newValue);
    }
  }
  
  public getWhenPattern(): string {
    return REGEX_WHEN.source;
  }
  

  public getWhen(): string | undefined {
      return this.when;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTargetFormat(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.targetFormat) !== 'undefined') {
         delete this.targetFormat;
      }
      return;
    }
    
    if (REGEX_TARGETFORMAT.test(newValue)) {
      this.targetFormat = newValue
    } else {
      throw new Error("Invalid value pattern for targetFormat of " + newValue);
    }
  }
  
  public getTargetFormatPattern(): string {
    return REGEX_TARGETFORMAT.source;
  }
  

  public getTargetFormat(): string | undefined {
      return this.targetFormat;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setSigFormat(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sigFormat) !== 'undefined') {
         delete this.sigFormat;
      }
      return;
    }
    
    if (REGEX_SIGFORMAT.test(newValue)) {
      this.sigFormat = newValue
    } else {
      throw new Error("Invalid value pattern for sigFormat of " + newValue);
    }
  }
  
  public getSigFormatPattern(): string {
    return REGEX_SIGFORMAT.source;
  }
  

  public getSigFormat(): string | undefined {
      return this.sigFormat;
  }


}


