import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_NAME_000, REGEX_DOCUMENTATION } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension, StructureMapDependent, StructureMapSource, StructureMapTarget } from './index';



/**
 * A Map of relationships between 2 structures that can be used to transform data.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/StructureMap_Rule
 */
export class StructureMapRule {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This
   * might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these
   * constraints.)  Ids are case-insensitive.
   * Field access restricted because there are specific valid values.
   */
  protected name?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _name?: Element;

  /**
   * Source inputs to the mapping.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => StructureMapSource)
  protected source?: StructureMapSource[];

  /**
   * Content to create because of this mapping rule.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => StructureMapTarget)
  protected target?: StructureMapTarget[];

  /**
   * Rules contained in this rule.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => StructureMapRule)
  protected rule?: StructureMapRule[];

  /**
   * Which other rules to apply in the context of this rule.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => StructureMapDependent)
  protected dependent?: StructureMapDependent[];

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected documentation?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _documentation?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setName(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.name) !== 'undefined') {
         delete this.name;
      }
      return;
    }
    
    if (REGEX_NAME_000.test(newValue)) {
      this.name = newValue
    } else {
      throw new Error("Invalid value pattern for name of " + newValue);
    }
  }
  
  public getNamePattern(): string {
    return REGEX_NAME_000.source;
  }
  
  /**
  * Gets the current value of field name.
  * @returns the value  or undefined
  */
  public getName(): string | undefined {
      return this.name;
  }

  public addSource(newValue: StructureMapSource) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.source) !== 'undefined') {
         delete this.source;
      }
      return;
    }
    
    if (typeof(this.source) === 'undefined') {
      this.source =  [];
    }
    this.source.push(newValue);
  }
  /**
  * Removes all elements from the array source, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSourceAll(): StructureMapSource[] {
    if (typeof(this.source) !== 'undefined') {
       const oldArray = this.source;
       delete this.source;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array source, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSourceBySplice(start: number, deleteCount?: number): StructureMapSource[] {
    if (typeof(this.source) !== 'undefined') {
       return this.source.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field source.
  * @returns the value  or undefined
  */
  public getSource(): StructureMapSource[] | undefined {
      return this.source;
  }

  public addTarget(newValue: StructureMapTarget) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.target) !== 'undefined') {
         delete this.target;
      }
      return;
    }
    
    if (typeof(this.target) === 'undefined') {
      this.target =  [];
    }
    this.target.push(newValue);
  }
  /**
  * Removes all elements from the array target, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTargetAll(): StructureMapTarget[] {
    if (typeof(this.target) !== 'undefined') {
       const oldArray = this.target;
       delete this.target;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array target, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTargetBySplice(start: number, deleteCount?: number): StructureMapTarget[] {
    if (typeof(this.target) !== 'undefined') {
       return this.target.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field target.
  * @returns the value  or undefined
  */
  public getTarget(): StructureMapTarget[] | undefined {
      return this.target;
  }

  public addRule(newValue: StructureMapRule) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.rule) !== 'undefined') {
         delete this.rule;
      }
      return;
    }
    
    if (typeof(this.rule) === 'undefined') {
      this.rule =  [];
    }
    this.rule.push(newValue);
  }
  /**
  * Removes all elements from the array rule, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteRuleAll(): StructureMapRule[] {
    if (typeof(this.rule) !== 'undefined') {
       const oldArray = this.rule;
       delete this.rule;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array rule, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteRuleBySplice(start: number, deleteCount?: number): StructureMapRule[] {
    if (typeof(this.rule) !== 'undefined') {
       return this.rule.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field rule.
  * @returns the value  or undefined
  */
  public getRule(): StructureMapRule[] | undefined {
      return this.rule;
  }

  public addDependent(newValue: StructureMapDependent) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.dependent) !== 'undefined') {
         delete this.dependent;
      }
      return;
    }
    
    if (typeof(this.dependent) === 'undefined') {
      this.dependent =  [];
    }
    this.dependent.push(newValue);
  }
  /**
  * Removes all elements from the array dependent, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDependentAll(): StructureMapDependent[] {
    if (typeof(this.dependent) !== 'undefined') {
       const oldArray = this.dependent;
       delete this.dependent;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array dependent, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDependentBySplice(start: number, deleteCount?: number): StructureMapDependent[] {
    if (typeof(this.dependent) !== 'undefined') {
       return this.dependent.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field dependent.
  * @returns the value  or undefined
  */
  public getDependent(): StructureMapDependent[] | undefined {
      return this.dependent;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setDocumentation(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.documentation) !== 'undefined') {
         delete this.documentation;
      }
      return;
    }
    
    if (REGEX_DOCUMENTATION.test(newValue)) {
      this.documentation = newValue
    } else {
      throw new Error("Invalid value pattern for documentation of " + newValue);
    }
  }
  
  public getDocumentationPattern(): string {
    return REGEX_DOCUMENTATION.source;
  }
  
  /**
  * Gets the current value of field documentation.
  * @returns the value  or undefined
  */
  public getDocumentation(): string | undefined {
      return this.documentation;
  }


}


