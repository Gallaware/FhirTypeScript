import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { CodeableConcept, Extension, PlanDefinitionTarget, RelatedArtifact } from './index';



/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and
 * executable artifact. The resource is general enough to support the description of a broad range of
 * clinical artifacts such as clinical decision support rules, order sets and protocols.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/PlanDefinition_Goal
 */
export class PlanDefinitionGoal {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   category?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   description?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   priority?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   start?: CodeableConcept;

  /**
   * Identifies problems, conditions, issues, or concerns the goal is intended to address.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => CodeableConcept)
  protected addresses?: CodeableConcept[];

  /**
   * Didactic or other informational resources associated with the goal that provide further supporting
   * information about the goal. Information resources can include inline text commentary and links to
   * web resources.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => RelatedArtifact)
  protected documentation?: RelatedArtifact[];

  /**
   * Indicates what should be done and within what timeframe.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => PlanDefinitionTarget)
  protected target?: PlanDefinitionTarget[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  public addAddresses(newValue: CodeableConcept) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.addresses) !== 'undefined') {
         delete this.addresses;
      }
      return;
    }
    
    if (typeof(this.addresses) === 'undefined') {
      this.addresses =  [];
    }
    this.addresses.push(newValue);
  }
  /**
  * Removes all elements from the array addresses, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteAddressesAll(): CodeableConcept[] {
    if (typeof(this.addresses) !== 'undefined') {
       const oldArray = this.addresses;
       delete this.addresses;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array addresses, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteAddressesBySplice(start: number, deleteCount?: number): CodeableConcept[] {
    if (typeof(this.addresses) !== 'undefined') {
       return this.addresses.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field addresses.
  * @returns the value  or undefined
  */
  public getAddresses(): CodeableConcept[] | undefined {
      return this.addresses;
  }

  public addDocumentation(newValue: RelatedArtifact) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.documentation) !== 'undefined') {
         delete this.documentation;
      }
      return;
    }
    
    if (typeof(this.documentation) === 'undefined') {
      this.documentation =  [];
    }
    this.documentation.push(newValue);
  }
  /**
  * Removes all elements from the array documentation, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteDocumentationAll(): RelatedArtifact[] {
    if (typeof(this.documentation) !== 'undefined') {
       const oldArray = this.documentation;
       delete this.documentation;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array documentation, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteDocumentationBySplice(start: number, deleteCount?: number): RelatedArtifact[] {
    if (typeof(this.documentation) !== 'undefined') {
       return this.documentation.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field documentation.
  * @returns the value  or undefined
  */
  public getDocumentation(): RelatedArtifact[] | undefined {
      return this.documentation;
  }

  public addTarget(newValue: PlanDefinitionTarget) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.target) !== 'undefined') {
         delete this.target;
      }
      return;
    }
    
    if (typeof(this.target) === 'undefined') {
      this.target =  [];
    }
    this.target.push(newValue);
  }
  /**
  * Removes all elements from the array target, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTargetAll(): PlanDefinitionTarget[] {
    if (typeof(this.target) !== 'undefined') {
       const oldArray = this.target;
       delete this.target;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array target, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTargetBySplice(start: number, deleteCount?: number): PlanDefinitionTarget[] {
    if (typeof(this.target) !== 'undefined') {
       return this.target.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field target.
  * @returns the value  or undefined
  */
  public getTarget(): PlanDefinitionTarget[] | undefined {
      return this.target;
  }


}


