import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Extension, MedicationKnowledgeMaxDispense, MedicationKnowledgeSchedule, MedicationKnowledgeSubstitution, Reference } from './index';



/**
 * Information about a medication that is used to support knowledge.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/MedicationKnowledge_Regulatory
 */
export class MedicationKnowledgeRegulatory {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A reference from one resource to another.
   */
  @Type(() => Reference)
   regulatoryAuthority?: Reference;

  /**
   * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => MedicationKnowledgeSubstitution)
  protected substitution?: MedicationKnowledgeSubstitution[];

  /**
   * Specifies the schedule of a medication in jurisdiction.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => MedicationKnowledgeSchedule)
  protected schedule?: MedicationKnowledgeSchedule[];

  /**
   * Information about a medication that is used to support knowledge.
   */
  @Type(() => MedicationKnowledgeMaxDispense)
   maxDispense?: MedicationKnowledgeMaxDispense;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  public addSubstitution(newValue: MedicationKnowledgeSubstitution) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.substitution) !== 'undefined') {
         delete this.substitution;
      }
      return;
    }
    
    if (typeof(this.substitution) === 'undefined') {
      this.substitution =  [];
    }
    this.substitution.push(newValue);
  }
  /**
  * Removes all elements from the array substitution, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteSubstitutionAll(): MedicationKnowledgeSubstitution[] {
    if (typeof(this.substitution) !== 'undefined') {
       const oldArray = this.substitution;
       delete this.substitution;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array substitution, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteSubstitutionBySplice(start: number, deleteCount?: number): MedicationKnowledgeSubstitution[] {
    if (typeof(this.substitution) !== 'undefined') {
       return this.substitution.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field substitution.
  * @returns the value  or undefined
  */
  public getSubstitution(): MedicationKnowledgeSubstitution[] | undefined {
      return this.substitution;
  }

  /**
  * Gets the current value of field substitution if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getSubstitutionOrElse(defaultValue: MedicationKnowledgeSubstitution[]): MedicationKnowledgeSubstitution[] {
      if (this.substitution == undefined || this.substitution == null ) { return defaultValue; }
      return this.substitution;
  }

  public addSchedule(newValue: MedicationKnowledgeSchedule) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.schedule) !== 'undefined') {
         delete this.schedule;
      }
      return;
    }
    
    if (typeof(this.schedule) === 'undefined') {
      this.schedule =  [];
    }
    this.schedule.push(newValue);
  }
  /**
  * Removes all elements from the array schedule, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteScheduleAll(): MedicationKnowledgeSchedule[] {
    if (typeof(this.schedule) !== 'undefined') {
       const oldArray = this.schedule;
       delete this.schedule;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array schedule, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteScheduleBySplice(start: number, deleteCount?: number): MedicationKnowledgeSchedule[] {
    if (typeof(this.schedule) !== 'undefined') {
       return this.schedule.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field schedule.
  * @returns the value  or undefined
  */
  public getSchedule(): MedicationKnowledgeSchedule[] | undefined {
      return this.schedule;
  }

  /**
  * Gets the current value of field schedule if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getScheduleOrElse(defaultValue: MedicationKnowledgeSchedule[]): MedicationKnowledgeSchedule[] {
      if (this.schedule == undefined || this.schedule == null ) { return defaultValue; }
      return this.schedule;
  }


}


