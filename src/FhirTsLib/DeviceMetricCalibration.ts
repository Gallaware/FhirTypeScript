import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_TIME_000 } from '../FhirTsLibValidation/FhirRegex';
import { Element, Extension } from './FhirType';
import { DeviceMetricCalibrationType_list_ValidValues, DeviceMetricCalibrationState_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * Describes a measurement, calculation or setting capability of a medical device.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/DeviceMetric_Calibration
 */
export class DeviceMetricCalibration {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * Describes the type of the calibration method.
   * Field access restricted because there are specific valid values.
   */
  protected type?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _type?: Element;

  /**
   * Describes the state of the calibration.
   * Field access restricted because there are specific valid values.
   */
  protected state?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _state?: Element;

  /**
   * An instant in time - known at least to the second
   * Field access restricted because there are specific valid values.
   */
  protected time?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _time?: Element;


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setType(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.type) !== 'undefined') {
         delete this.type;
      }
      return;
    }
    
    const idx = getValidValueIdx(DeviceMetricCalibrationType_list_ValidValues, newValue);
    if (idx >= 0) {
      this.type = DeviceMetricCalibrationType_list_ValidValues[idx];
    } else {
      throw new Error("Unknown type of " + newValue);
    }
  }
  
  public getDeviceMetricCalibrationTypeValidValues(): string[] {
    return DeviceMetricCalibrationType_list_ValidValues;
  }
  

  public getType(): string | undefined {
      return this.type;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setState(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.state) !== 'undefined') {
         delete this.state;
      }
      return;
    }
    
    const idx = getValidValueIdx(DeviceMetricCalibrationState_list_ValidValues, newValue);
    if (idx >= 0) {
      this.state = DeviceMetricCalibrationState_list_ValidValues[idx];
    } else {
      throw new Error("Unknown state of " + newValue);
    }
  }
  
  public getDeviceMetricCalibrationStateValidValues(): string[] {
    return DeviceMetricCalibrationState_list_ValidValues;
  }
  

  public getState(): string | undefined {
      return this.state;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setTime(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.time) !== 'undefined') {
         delete this.time;
      }
      return;
    }
    
    if (REGEX_TIME_000.test(newValue)) {
      this.time = newValue
    } else {
      throw new Error("Invalid value pattern for time of " + newValue);
    }
  }
  
  public getTimePattern(): string {
    return REGEX_TIME_000.source;
  }
  

  public getTime(): string | undefined {
      return this.time;
  }


}


