import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_SEQUENCE } from '../FhirTsLibValidation/FhirRegex';
import { Attachment, CodeableConcept, Element, Extension, SubstanceNucleicAcidLinkage, SubstanceNucleicAcidSugar } from './FhirType';



/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual
 * substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be
 * always entered in the 5’-3’ direction.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/SubstanceNucleicAcid_Subunit
 */
export class SubstanceNucleicAcidSubunit {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A whole number
   */
   subunit?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _subunit?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected sequence?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _sequence?: Element;

  /**
   * A whole number
   */
   length?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _length?: Element;

  /**
   * For referring to data content defined in other formats.
   */
  @Type(() => Attachment)
   sequenceAttachment?: Attachment;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   fivePrime?: CodeableConcept;

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   threePrime?: CodeableConcept;

  /**
   * The linkages between sugar residues will also be captured.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => SubstanceNucleicAcidLinkage)
  protected linkage?: SubstanceNucleicAcidLinkage[];

  /**
   * 5.3.6.8.1 Sugar ID (Mandatory).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => SubstanceNucleicAcidSugar)
  protected sugar?: SubstanceNucleicAcidSugar[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setSequence(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sequence) !== 'undefined') {
         delete this.sequence;
      }
      return;
    }
    
    if (REGEX_SEQUENCE.test(newValue)) {
      this.sequence = newValue
    } else {
      throw new Error("Invalid value pattern for sequence of " + newValue);
    }
  }
  
  public getSequencePattern(): string {
    return REGEX_SEQUENCE.source;
  }
  

  public getSequence(): string | undefined {
      return this.sequence;
  }

  public addLinkage(newValue: SubstanceNucleicAcidLinkage) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.linkage) !== 'undefined') {
         delete this.linkage;
      }
      return;
    }
    
    if (typeof(this.linkage) === 'undefined') {
      this.linkage =  [];
    }
    this.linkage.push(newValue);
  }

  public getLinkage(): SubstanceNucleicAcidLinkage[] | undefined {
      return this.linkage;
  }

  public addSugar(newValue: SubstanceNucleicAcidSugar) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.sugar) !== 'undefined') {
         delete this.sugar;
      }
      return;
    }
    
    if (typeof(this.sugar) === 'undefined') {
      this.sugar =  [];
    }
    this.sugar.push(newValue);
  }

  public getSugar(): SubstanceNucleicAcidSugar[] | undefined {
      return this.sugar;
  }


}


