import { getValidValueIdx } from '../FhirTsLibValidation/FhirUtils';
import { Type } from 'class-transformer';
import { REGEX_ID, REGEX_COLOR, REGEX_BRAND } from '../FhirTsLibValidation/FhirRegex';
import { Annotation, CodeableConcept, Element, Extension, Quantity, VisionPrescriptionPrism } from './FhirType';
import { VisionPrescriptionLensSpecificationEye_list_ValidValues } from '../FhirTsLibValidation/Fhir_ValidValues';



/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/VisionPrescription_LensSpecification
 */
export class VisionPrescriptionLensSpecification {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided
   * by text.
   */
  @Type(() => CodeableConcept)
   product?: CodeableConcept;

  /**
   * The eye for which the lens specification applies.
   * Field access restricted because there are specific valid values.
   */
  protected eye?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _eye?: Element;

  /**
   * A rational number with implicit precision
   */
   sphere?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _sphere?: Element;

  /**
   * A rational number with implicit precision
   */
   cylinder?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _cylinder?: Element;

  /**
   * A whole number
   */
   axis?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _axis?: Element;

  /**
   * Allows for adjustment on two axis.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => VisionPrescriptionPrism)
  protected prism?: VisionPrescriptionPrism[];

  /**
   * A rational number with implicit precision
   */
   add?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _add?: Element;

  /**
   * A rational number with implicit precision
   */
   power?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _power?: Element;

  /**
   * A rational number with implicit precision
   */
   backCurve?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _backCurve?: Element;

  /**
   * A rational number with implicit precision
   */
   diameter?: number;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _diameter?: Element;

  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts
   * include amounts that are not precisely quantified, including amounts involving arbitrary units and
   * floating currencies.
   */
  @Type(() => Quantity)
   duration?: Quantity;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected color?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _color?: Element;

  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected brand?: string;

  /**
   * Base definition for all elements in a resource.
   */
  @Type(() => Element)
   _brand?: Element;

  /**
   * Notes for special requirements such as coatings and lens materials.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Annotation)
  protected note?: Annotation[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  

  public getId(): string | undefined {
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }

  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }

  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /*
  * This sets the data ensuring that the value is valid.  If not valid, it throws an error
  * that should be caught.
  */
  public setEye(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.eye) !== 'undefined') {
         delete this.eye;
      }
      return;
    }
    
    const idx = getValidValueIdx(VisionPrescriptionLensSpecificationEye_list_ValidValues, newValue);
    if (idx >= 0) {
      this.eye = VisionPrescriptionLensSpecificationEye_list_ValidValues[idx];
    } else {
      throw new Error("Unknown eye of " + newValue);
    }
  }
  
  public getVisionPrescriptionLensSpecificationEyeValidValues(): string[] {
    return VisionPrescriptionLensSpecificationEye_list_ValidValues;
  }
  

  public getEye(): string | undefined {
      return this.eye;
  }

  public addPrism(newValue: VisionPrescriptionPrism) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.prism) !== 'undefined') {
         delete this.prism;
      }
      return;
    }
    
    if (typeof(this.prism) === 'undefined') {
      this.prism =  [];
    }
    this.prism.push(newValue);
  }

  public getPrism(): VisionPrescriptionPrism[] | undefined {
      return this.prism;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setColor(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.color) !== 'undefined') {
         delete this.color;
      }
      return;
    }
    
    if (REGEX_COLOR.test(newValue)) {
      this.color = newValue
    } else {
      throw new Error("Invalid value pattern for color of " + newValue);
    }
  }
  
  public getColorPattern(): string {
    return REGEX_COLOR.source;
  }
  

  public getColor(): string | undefined {
      return this.color;
  }

  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setBrand(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.brand) !== 'undefined') {
         delete this.brand;
      }
      return;
    }
    
    if (REGEX_BRAND.test(newValue)) {
      this.brand = newValue
    } else {
      throw new Error("Invalid value pattern for brand of " + newValue);
    }
  }
  
  public getBrandPattern(): string {
    return REGEX_BRAND.source;
  }
  

  public getBrand(): string | undefined {
      return this.brand;
  }

  public addNote(newValue: Annotation) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.note) !== 'undefined') {
         delete this.note;
      }
      return;
    }
    
    if (typeof(this.note) === 'undefined') {
      this.note =  [];
    }
    this.note.push(newValue);
  }

  public getNote(): Annotation[] | undefined {
      return this.note;
  }


}


