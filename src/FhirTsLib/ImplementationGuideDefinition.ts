import { Type } from 'class-transformer';
import { REGEX_ID } from '../FhirTsLibValidation/FhirRegex';
import { Extension, ImplementationGuideGrouping, ImplementationGuidePage, ImplementationGuideParameter, ImplementationGuideResource, ImplementationGuideTemplate } from './index';



/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically
 * through the use of FHIR resources. This resource is used to gather all the parts of an
 * implementation guide into a logical whole and to publish a computable definition of all the parts.
 *
 * Generated by Gallaware, Inc. from:
 *    file:/Users/admin/Documents/DevNetbeans/jsonSchemaToJava/target/classes/schema/fhir.schema.json#/definitions/ImplementationGuide_Definition
 */
export class ImplementationGuideDefinition {
  /**
   * A sequence of Unicode characters
   * Field access restricted because there are specific valid values.
   */
  protected id?: string;

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element. To make the use of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any implementer can define an extension,
   * there is a set of requirements that SHALL be met as part of the definition of the extension.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of the basic definition of the
   * element and that modifies the understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually modifier elements provide negation
   * or qualification. To make the use of extensions safe and manageable, there is a strict set of
   * governance applied to the definition and use of extensions. Though any implementer can define an
   * extension, there is a set of requirements that SHALL be met as part of the definition of the
   * extension. Applications processing a resource are required to check for modifier extensions.
   * 
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource
   * (including cannot change the meaning of modifierExtension itself).
   * Field access restricted because there are specific valid values.
   */
  @Type(() => Extension)
  protected modifierExtension?: Extension[];

  /**
   * A logical group of resources. Logical groups can be used when building pages.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImplementationGuideGrouping)
  protected grouping?: ImplementationGuideGrouping[];

  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure
   * definition, capability statements etc.) are obvious candidates for inclusion, but any kind of
   * resource can be included as an example resource.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImplementationGuideResource)
  protected resource?: ImplementationGuideResource[];

  /**
   * A set of rules of how a particular interoperability or standards problem is solved - typically
   * through the use of FHIR resources. This resource is used to gather all the parts of an
   * implementation guide into a logical whole and to publish a computable definition of all the parts.
   */
  @Type(() => ImplementationGuidePage)
   page?: ImplementationGuidePage;

  /**
   * Defines how IG is built by tools.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImplementationGuideParameter)
  protected parameter?: ImplementationGuideParameter[];

  /**
   * A template for building resources.
   * Field access restricted because there are specific valid values.
   */
  @Type(() => ImplementationGuideTemplate)
  protected template?: ImplementationGuideTemplate[];


  /*
  * This sets the data ensuring that the value is valid pattern.  If not valid, it throws an error
  * that should be caught.
  */
  public setId(newValue: string) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.id) !== 'undefined') {
         delete this.id;
      }
      return;
    }
    
    if (REGEX_ID.test(newValue)) {
      this.id = newValue
    } else {
      throw new Error("Invalid value pattern for id of " + newValue);
    }
  }
  
  public getIdPattern(): string {
    return REGEX_ID.source;
  }
  
  /**
  * Gets the current value of field id.
  * @returns the value  or undefined
  */
  public getId(): string | undefined {
      return this.id;
  }

  /**
  * Gets the current value of field id if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getIdOrElse(defaultValue: string): string {
      if (this.id == undefined || this.id == null ) { return defaultValue; }
      return this.id;
  }

  public addExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.extension) !== 'undefined') {
         delete this.extension;
      }
      return;
    }
    
    if (typeof(this.extension) === 'undefined') {
      this.extension =  [];
    }
    this.extension.push(newValue);
  }
  /**
  * Removes all elements from the array extension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteExtensionAll(): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       const oldArray = this.extension;
       delete this.extension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array extension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.extension) !== 'undefined') {
       return this.extension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field extension.
  * @returns the value  or undefined
  */
  public getExtension(): Extension[] | undefined {
      return this.extension;
  }

  /**
  * Gets the current value of field extension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.extension == undefined || this.extension == null ) { return defaultValue; }
      return this.extension;
  }

  public addModifierExtension(newValue: Extension) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.modifierExtension) !== 'undefined') {
         delete this.modifierExtension;
      }
      return;
    }
    
    if (typeof(this.modifierExtension) === 'undefined') {
      this.modifierExtension =  [];
    }
    this.modifierExtension.push(newValue);
  }
  /**
  * Removes all elements from the array modifierExtension, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteModifierExtensionAll(): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       const oldArray = this.modifierExtension;
       delete this.modifierExtension;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array modifierExtension, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteModifierExtensionBySplice(start: number, deleteCount?: number): Extension[] {
    if (typeof(this.modifierExtension) !== 'undefined') {
       return this.modifierExtension.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field modifierExtension.
  * @returns the value  or undefined
  */
  public getModifierExtension(): Extension[] | undefined {
      return this.modifierExtension;
  }

  /**
  * Gets the current value of field modifierExtension if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getModifierExtensionOrElse(defaultValue: Extension[]): Extension[] {
      if (this.modifierExtension == undefined || this.modifierExtension == null ) { return defaultValue; }
      return this.modifierExtension;
  }

  public addGrouping(newValue: ImplementationGuideGrouping) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.grouping) !== 'undefined') {
         delete this.grouping;
      }
      return;
    }
    
    if (typeof(this.grouping) === 'undefined') {
      this.grouping =  [];
    }
    this.grouping.push(newValue);
  }
  /**
  * Removes all elements from the array grouping, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteGroupingAll(): ImplementationGuideGrouping[] {
    if (typeof(this.grouping) !== 'undefined') {
       const oldArray = this.grouping;
       delete this.grouping;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array grouping, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteGroupingBySplice(start: number, deleteCount?: number): ImplementationGuideGrouping[] {
    if (typeof(this.grouping) !== 'undefined') {
       return this.grouping.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field grouping.
  * @returns the value  or undefined
  */
  public getGrouping(): ImplementationGuideGrouping[] | undefined {
      return this.grouping;
  }

  /**
  * Gets the current value of field grouping if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getGroupingOrElse(defaultValue: ImplementationGuideGrouping[]): ImplementationGuideGrouping[] {
      if (this.grouping == undefined || this.grouping == null ) { return defaultValue; }
      return this.grouping;
  }

  public addResource(newValue: ImplementationGuideResource) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.resource) !== 'undefined') {
         delete this.resource;
      }
      return;
    }
    
    if (typeof(this.resource) === 'undefined') {
      this.resource =  [];
    }
    this.resource.push(newValue);
  }
  /**
  * Removes all elements from the array resource, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteResourceAll(): ImplementationGuideResource[] {
    if (typeof(this.resource) !== 'undefined') {
       const oldArray = this.resource;
       delete this.resource;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array resource, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteResourceBySplice(start: number, deleteCount?: number): ImplementationGuideResource[] {
    if (typeof(this.resource) !== 'undefined') {
       return this.resource.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field resource.
  * @returns the value  or undefined
  */
  public getResource(): ImplementationGuideResource[] | undefined {
      return this.resource;
  }

  /**
  * Gets the current value of field resource if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getResourceOrElse(defaultValue: ImplementationGuideResource[]): ImplementationGuideResource[] {
      if (this.resource == undefined || this.resource == null ) { return defaultValue; }
      return this.resource;
  }

  public addParameter(newValue: ImplementationGuideParameter) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.parameter) !== 'undefined') {
         delete this.parameter;
      }
      return;
    }
    
    if (typeof(this.parameter) === 'undefined') {
      this.parameter =  [];
    }
    this.parameter.push(newValue);
  }
  /**
  * Removes all elements from the array parameter, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteParameterAll(): ImplementationGuideParameter[] {
    if (typeof(this.parameter) !== 'undefined') {
       const oldArray = this.parameter;
       delete this.parameter;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array parameter, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteParameterBySplice(start: number, deleteCount?: number): ImplementationGuideParameter[] {
    if (typeof(this.parameter) !== 'undefined') {
       return this.parameter.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field parameter.
  * @returns the value  or undefined
  */
  public getParameter(): ImplementationGuideParameter[] | undefined {
      return this.parameter;
  }

  /**
  * Gets the current value of field parameter if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getParameterOrElse(defaultValue: ImplementationGuideParameter[]): ImplementationGuideParameter[] {
      if (this.parameter == undefined || this.parameter == null ) { return defaultValue; }
      return this.parameter;
  }

  public addTemplate(newValue: ImplementationGuideTemplate) {
    if (typeof(newValue) === 'undefined') {
      if (typeof(this.template) !== 'undefined') {
         delete this.template;
      }
      return;
    }
    
    if (typeof(this.template) === 'undefined') {
      this.template =  [];
    }
    this.template.push(newValue);
  }
  /**
  * Removes all elements from the array template, returning the deleted elements.
  * @returns An array containing the elements that were deleted.
  */
  public deleteTemplateAll(): ImplementationGuideTemplate[] {
    if (typeof(this.template) !== 'undefined') {
       const oldArray = this.template;
       delete this.template;
       return oldArray;
    }
    return [];
  }
  
  /**
  * Removes elements from the array template, returning the deleted elements.
  * @param start The zero-based location in the array from which to start removing elements.
  * @param deleteCount The number of elements to remove.
  * @returns An array containing the elements that were deleted, or an empty array if the element
  *     was undefined.
  */
  public deleteTemplateBySplice(start: number, deleteCount?: number): ImplementationGuideTemplate[] {
    if (typeof(this.template) !== 'undefined') {
       return this.template.splice(start, deleteCount);
    }
    return [];
  }
  
  /**
  * Gets the current value of field template.
  * @returns the value  or undefined
  */
  public getTemplate(): ImplementationGuideTemplate[] | undefined {
      return this.template;
  }

  /**
  * Gets the current value of field template if it exists,
  * but if it is 'undefined' it will return the value supplied
  * as the parameter.
  * @returns the value or the parameter value
  */
  public getTemplateOrElse(defaultValue: ImplementationGuideTemplate[]): ImplementationGuideTemplate[] {
      if (this.template == undefined || this.template == null ) { return defaultValue; }
      return this.template;
  }


}


